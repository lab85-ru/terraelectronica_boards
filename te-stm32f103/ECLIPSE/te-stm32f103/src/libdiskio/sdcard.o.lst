   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"sdcard.c"
  23              	.Ltext0:
 19503              		.align	1
 19504              		.thumb
 19505              		.thumb_func
 19507              	CmdResp2Error:
 19508              	.LFB51:
   1:sdcard.c      **** /**
   2:sdcard.c      ****   ******************************************************************************
   3:sdcard.c      ****   * @file    SDIO/sdcard.c 
   4:sdcard.c      ****   * @author  MCD Application Team
   5:sdcard.c      ****   * @version V3.1.0
   6:sdcard.c      ****   * @date    06/19/2009
   7:sdcard.c      ****   * @brief   This file provides all the SD Card driver firmware functions.
   8:sdcard.c      ****   ******************************************************************************
   9:sdcard.c      ****   * @copy
  10:sdcard.c      ****   *
  11:sdcard.c      ****   * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  12:sdcard.c      ****   * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  13:sdcard.c      ****   * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  14:sdcard.c      ****   * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  15:sdcard.c      ****   * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  16:sdcard.c      ****   * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  17:sdcard.c      ****   *
  18:sdcard.c      ****   * <h2><center>&copy; COPYRIGHT 2009 STMicroelectronics</center></h2>
  19:sdcard.c      ****   */ 
  20:sdcard.c      **** 
  21:sdcard.c      **** /* Includes ------------------------------------------------------------------*/
  22:sdcard.c      **** #include "sdcard.h"
  23:sdcard.c      **** 
  24:sdcard.c      **** /** @addtogroup STM32F10x_StdPeriph_Examples
  25:sdcard.c      ****   * @{
  26:sdcard.c      ****   */
  27:sdcard.c      **** 
  28:sdcard.c      **** /** @addtogroup SDIO_Example
  29:sdcard.c      ****   * @{
  30:sdcard.c      ****   */ 
  31:sdcard.c      **** 
  32:sdcard.c      **** /* Private typedef -----------------------------------------------------------*/
  33:sdcard.c      **** /* Private define ------------------------------------------------------------*/
  34:sdcard.c      **** #define NULL 0
  35:sdcard.c      **** #define SDIO_STATIC_FLAGS               ((uint32_t)0x000005FF)
  36:sdcard.c      **** #define SDIO_CMD0TIMEOUT                ((uint32_t)0x00002710)
  37:sdcard.c      **** #define SDIO_FIFO_Address               ((uint32_t)0x40018080)
  38:sdcard.c      **** 
  39:sdcard.c      **** /* Mask for errors Card Status R1 (OCR Register) */
  40:sdcard.c      **** #define SD_OCR_ADDR_OUT_OF_RANGE        ((uint32_t)0x80000000)
  41:sdcard.c      **** #define SD_OCR_ADDR_MISALIGNED          ((uint32_t)0x40000000)
  42:sdcard.c      **** #define SD_OCR_BLOCK_LEN_ERR            ((uint32_t)0x20000000)
  43:sdcard.c      **** #define SD_OCR_ERASE_SEQ_ERR            ((uint32_t)0x10000000)
  44:sdcard.c      **** #define SD_OCR_BAD_ERASE_PARAM          ((uint32_t)0x08000000)
  45:sdcard.c      **** #define SD_OCR_WRITE_PROT_VIOLATION     ((uint32_t)0x04000000)
  46:sdcard.c      **** #define SD_OCR_LOCK_UNLOCK_FAILED       ((uint32_t)0x01000000)
  47:sdcard.c      **** #define SD_OCR_COM_CRC_FAILED           ((uint32_t)0x00800000)
  48:sdcard.c      **** #define SD_OCR_ILLEGAL_CMD              ((uint32_t)0x00400000)
  49:sdcard.c      **** #define SD_OCR_CARD_ECC_FAILED          ((uint32_t)0x00200000)
  50:sdcard.c      **** #define SD_OCR_CC_ERROR                 ((uint32_t)0x00100000)
  51:sdcard.c      **** #define SD_OCR_GENERAL_UNKNOWN_ERROR    ((uint32_t)0x00080000)
  52:sdcard.c      **** #define SD_OCR_STREAM_READ_UNDERRUN     ((uint32_t)0x00040000)
  53:sdcard.c      **** #define SD_OCR_STREAM_WRITE_OVERRUN     ((uint32_t)0x00020000)
  54:sdcard.c      **** #define SD_OCR_CID_CSD_OVERWRIETE       ((uint32_t)0x00010000)
  55:sdcard.c      **** #define SD_OCR_WP_ERASE_SKIP            ((uint32_t)0x00008000)
  56:sdcard.c      **** #define SD_OCR_CARD_ECC_DISABLED        ((uint32_t)0x00004000)
  57:sdcard.c      **** #define SD_OCR_ERASE_RESET              ((uint32_t)0x00002000)
  58:sdcard.c      **** #define SD_OCR_AKE_SEQ_ERROR            ((uint32_t)0x00000008)
  59:sdcard.c      **** #define SD_OCR_ERRORBITS                ((uint32_t)0xFDFFE008)
  60:sdcard.c      **** 
  61:sdcard.c      **** /* Masks for R6 Response */
  62:sdcard.c      **** #define SD_R6_GENERAL_UNKNOWN_ERROR     ((uint32_t)0x00002000)
  63:sdcard.c      **** #define SD_R6_ILLEGAL_CMD               ((uint32_t)0x00004000)
  64:sdcard.c      **** #define SD_R6_COM_CRC_FAILED            ((uint32_t)0x00008000)
  65:sdcard.c      **** 
  66:sdcard.c      **** #define SD_VOLTAGE_WINDOW_SD            ((uint32_t)0x80100000)
  67:sdcard.c      **** #define SD_HIGH_CAPACITY                ((uint32_t)0x40000000)
  68:sdcard.c      **** #define SD_STD_CAPACITY                 ((uint32_t)0x00000000)
  69:sdcard.c      **** #define SD_CHECK_PATTERN                ((uint32_t)0x000001AA)
  70:sdcard.c      **** 
  71:sdcard.c      **** #define SD_MAX_VOLT_TRIAL               ((uint32_t)0x0000FFFF)
  72:sdcard.c      **** #define SD_ALLZERO                      ((uint32_t)0x00000000)
  73:sdcard.c      **** 
  74:sdcard.c      **** #define SD_WIDE_BUS_SUPPORT             ((uint32_t)0x00040000)
  75:sdcard.c      **** #define SD_SINGLE_BUS_SUPPORT           ((uint32_t)0x00010000)
  76:sdcard.c      **** #define SD_CARD_LOCKED                  ((uint32_t)0x02000000)
  77:sdcard.c      **** #define SD_CARD_PROGRAMMING             ((uint32_t)0x00000007)
  78:sdcard.c      **** #define SD_CARD_RECEIVING               ((uint32_t)0x00000006)
  79:sdcard.c      **** #define SD_DATATIMEOUT                  ((uint32_t)0x000FFFFF)
  80:sdcard.c      **** #define SD_0TO7BITS                     ((uint32_t)0x000000FF)
  81:sdcard.c      **** #define SD_8TO15BITS                    ((uint32_t)0x0000FF00)
  82:sdcard.c      **** #define SD_16TO23BITS                   ((uint32_t)0x00FF0000)
  83:sdcard.c      **** #define SD_24TO31BITS                   ((uint32_t)0xFF000000)
  84:sdcard.c      **** #define SD_MAX_DATA_LENGTH              ((uint32_t)0x01FFFFFF)
  85:sdcard.c      **** 
  86:sdcard.c      **** #define SD_HALFFIFO                     ((uint32_t)0x00000008)
  87:sdcard.c      **** #define SD_HALFFIFOBYTES                ((uint32_t)0x00000020)
  88:sdcard.c      **** 
  89:sdcard.c      **** /* Command Class Supported */
  90:sdcard.c      **** #define SD_CCCC_LOCK_UNLOCK             ((uint32_t)0x00000080)
  91:sdcard.c      **** #define SD_CCCC_WRITE_PROT              ((uint32_t)0x00000040)
  92:sdcard.c      **** #define SD_CCCC_ERASE                   ((uint32_t)0x00000020)
  93:sdcard.c      **** 
  94:sdcard.c      **** /* Following commands are SD Card Specific commands.
  95:sdcard.c      ****    SDIO_APP_CMD should be sent before sending these commands. */
  96:sdcard.c      **** #define SDIO_SEND_IF_COND               ((uint32_t)0x00000008)
  97:sdcard.c      **** 
  98:sdcard.c      **** #define SDIO_INIT_CLK_DIV                  ((uint8_t)0xB2)
  99:sdcard.c      **** #define SDIO_TRANSFER_CLK_DIV              ((uint8_t)0x1) 
 100:sdcard.c      **** 
 101:sdcard.c      **** /* Private macro -------------------------------------------------------------*/
 102:sdcard.c      **** /* Private variables ---------------------------------------------------------*/
 103:sdcard.c      **** static uint32_t CardType =  SDIO_STD_CAPACITY_SD_CARD_V1_1;
 104:sdcard.c      **** static uint32_t CSD_Tab[4], CID_Tab[4], RCA = 0;
 105:sdcard.c      **** static uint32_t DeviceMode = SD_POLLING_MODE;
 106:sdcard.c      **** static uint32_t TotalNumberOfBytes = 0, StopCondition = 0;
 107:sdcard.c      **** uint32_t *SrcBuffer, *DestBuffer;
 108:sdcard.c      **** volatile SD_Error TransferError = SD_OK;
 109:sdcard.c      **** __IO uint32_t TransferEnd = 0;
 110:sdcard.c      **** __IO uint32_t NumberOfBytes = 0;
 111:sdcard.c      **** SDIO_InitTypeDef SDIO_InitStructure;
 112:sdcard.c      **** SDIO_CmdInitTypeDef SDIO_CmdInitStructure;
 113:sdcard.c      **** SDIO_DataInitTypeDef SDIO_DataInitStructure;
 114:sdcard.c      **** 
 115:sdcard.c      **** /* Private function prototypes -----------------------------------------------*/
 116:sdcard.c      **** static SD_Error CmdError(void);
 117:sdcard.c      **** static SD_Error CmdResp1Error(uint8_t cmd);
 118:sdcard.c      **** static SD_Error CmdResp7Error(void);
 119:sdcard.c      **** static SD_Error CmdResp3Error(void);
 120:sdcard.c      **** static SD_Error CmdResp2Error(void);
 121:sdcard.c      **** static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca);
 122:sdcard.c      **** static SD_Error SDEnWideBus(FunctionalState NewState);
 123:sdcard.c      **** static SD_Error IsCardProgramming(uint8_t *pstatus);
 124:sdcard.c      **** static SD_Error FindSCR(uint16_t rca, uint32_t *pscr);
 125:sdcard.c      **** static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes);
 126:sdcard.c      **** static void GPIO_Configuration(void);
 127:sdcard.c      **** static void DMA_TxConfiguration(uint32_t *BufferSRC, uint32_t BufferSize);
 128:sdcard.c      **** static void DMA_RxConfiguration(uint32_t *BufferDST, uint32_t BufferSize);
 129:sdcard.c      **** 
 130:sdcard.c      **** /* Private functions ---------------------------------------------------------*/
 131:sdcard.c      **** 
 132:sdcard.c      **** /**
 133:sdcard.c      ****   * @brief  Initializes the SD Card and put it into StandBy State (Ready 
 134:sdcard.c      ****   *   for data transfer).
 135:sdcard.c      ****   * @param  None
 136:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 137:sdcard.c      ****   */
 138:sdcard.c      **** SD_Error SD_Init(void)
 139:sdcard.c      **** {
 140:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 141:sdcard.c      **** 
 142:sdcard.c      ****   /* Configure SDIO interface GPIO */
 143:sdcard.c      ****   GPIO_Configuration();
 144:sdcard.c      **** 
 145:sdcard.c      ****   /* Enable the SDIO AHB Clock */
 146:sdcard.c      ****   RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
 147:sdcard.c      **** 
 148:sdcard.c      ****   /* Enable the DMA2 Clock */
 149:sdcard.c      ****   RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 150:sdcard.c      **** 
 151:sdcard.c      ****   SDIO_DeInit();
 152:sdcard.c      **** 
 153:sdcard.c      ****   errorstatus = SD_PowerON();
 154:sdcard.c      **** 
 155:sdcard.c      ****   if (errorstatus != SD_OK)
 156:sdcard.c      ****   {
 157:sdcard.c      ****     /* CMD Response TimeOut (wait for CMDSENT flag) */
 158:sdcard.c      ****     return(errorstatus);
 159:sdcard.c      ****   }
 160:sdcard.c      **** 
 161:sdcard.c      ****   errorstatus = SD_InitializeCards();
 162:sdcard.c      **** 
 163:sdcard.c      ****   if (errorstatus != SD_OK)
 164:sdcard.c      ****   {
 165:sdcard.c      ****     /* CMD Response TimeOut (wait for CMDSENT flag) */
 166:sdcard.c      ****     return(errorstatus);
 167:sdcard.c      ****   }
 168:sdcard.c      **** 
 169:sdcard.c      ****   /* Configure the SDIO peripheral */
 170:sdcard.c      ****   /* HCLK = 72 MHz, SDIOCLK = 72 MHz, SDIO_CK = HCLK/(2 + 1) = 24 MHz */  
 171:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 172:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 173:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 174:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 175:sdcard.c      ****   SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 176:sdcard.c      ****   SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 177:sdcard.c      ****   SDIO_Init(&SDIO_InitStructure);
 178:sdcard.c      **** 
 179:sdcard.c      ****   return(errorstatus);
 180:sdcard.c      **** }
 181:sdcard.c      **** 
 182:sdcard.c      **** /**
 183:sdcard.c      ****   * @brief  Enquires cards about their operating voltage and configures 
 184:sdcard.c      ****   *   clock controls.
 185:sdcard.c      ****   * @param  None
 186:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 187:sdcard.c      ****   */
 188:sdcard.c      **** SD_Error SD_PowerON(void)
 189:sdcard.c      **** {
 190:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 191:sdcard.c      ****   uint32_t response = 0, count = 0;
 192:sdcard.c      ****   bool validvoltage = FALSE;
 193:sdcard.c      ****   uint32_t SDType = SD_STD_CAPACITY;
 194:sdcard.c      **** 
 195:sdcard.c      ****   /* Power ON Sequence -------------------------------------------------------*/
 196:sdcard.c      ****   /* Configure the SDIO peripheral */
 197:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK =
 198:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 199:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 200:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 201:sdcard.c      ****   SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 202:sdcard.c      ****   SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 203:sdcard.c      ****   SDIO_Init(&SDIO_InitStructure);
 204:sdcard.c      **** 
 205:sdcard.c      ****   /* Set Power State to ON */
 206:sdcard.c      ****   SDIO_SetPowerState(SDIO_PowerState_ON);
 207:sdcard.c      **** 
 208:sdcard.c      ****   /* Enable SDIO Clock */
 209:sdcard.c      ****   SDIO_ClockCmd(ENABLE);
 210:sdcard.c      **** 
 211:sdcard.c      ****   /* CMD0: GO_IDLE_STATE -------------------------------------------------------*/
 212:sdcard.c      ****   /* No CMD response required */
 213:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 214:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_GO_IDLE_STATE;
 215:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 216:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 217:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 218:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 219:sdcard.c      **** 
 220:sdcard.c      ****   errorstatus = CmdError();
 221:sdcard.c      **** 
 222:sdcard.c      ****   if (errorstatus != SD_OK)
 223:sdcard.c      ****   {
 224:sdcard.c      ****     /* CMD Response TimeOut (wait for CMDSENT flag) */
 225:sdcard.c      ****     return(errorstatus);
 226:sdcard.c      ****   }
 227:sdcard.c      **** 
 228:sdcard.c      ****   /* CMD8: SEND_IF_COND --------------------------------------------------------*/
 229:sdcard.c      ****   /* Send CMD8 to verify SD card interface operating condition */
 230:sdcard.c      ****   /* Argument: - [31:12]: Reserved (shall be set to '0')
 231:sdcard.c      ****                - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
 232:sdcard.c      ****                - [7:0]: Check Pattern (recommended 0xAA) */
 233:sdcard.c      ****   /* CMD Response: R7 */
 234:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 235:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_IF_COND;
 236:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 237:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 238:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 239:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 240:sdcard.c      **** 
 241:sdcard.c      ****   errorstatus = CmdResp7Error();
 242:sdcard.c      **** 
 243:sdcard.c      ****   if (errorstatus == SD_OK)
 244:sdcard.c      ****   {
 245:sdcard.c      ****     CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /* SD Card 2.0 */
 246:sdcard.c      ****     SDType = SD_HIGH_CAPACITY;
 247:sdcard.c      ****   }
 248:sdcard.c      ****   else
 249:sdcard.c      ****   {
 250:sdcard.c      ****     /* CMD55 */
 251:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 252:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 253:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 254:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 255:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 256:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 257:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_APP_CMD);
 258:sdcard.c      ****   }
 259:sdcard.c      ****   /* CMD55 */
 260:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 261:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 262:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 263:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 264:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 265:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 266:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
 267:sdcard.c      **** 
 268:sdcard.c      ****   /* If errorstatus is Command TimeOut, it is a MMC card */
 269:sdcard.c      ****   /* If errorstatus is SD_OK it is a SD card: SD card 2.0 (voltage range mismatch)
 270:sdcard.c      ****      or SD card 1.x */
 271:sdcard.c      ****   if (errorstatus == SD_OK)
 272:sdcard.c      ****   {
 273:sdcard.c      ****     /* SD CARD */
 274:sdcard.c      ****     /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
 275:sdcard.c      ****     while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 276:sdcard.c      ****     {
 277:sdcard.c      **** 
 278:sdcard.c      ****       /* SEND CMD55 APP_CMD with RCA as 0 */
 279:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 280:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 281:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 282:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 283:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 284:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 285:sdcard.c      **** 
 286:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
 287:sdcard.c      **** 
 288:sdcard.c      ****       if (errorstatus != SD_OK)
 289:sdcard.c      ****       {
 290:sdcard.c      ****         return(errorstatus);
 291:sdcard.c      ****       }
 292:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 293:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_OP_COND;
 294:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 295:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 296:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 297:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 298:sdcard.c      **** 
 299:sdcard.c      ****       errorstatus = CmdResp3Error();
 300:sdcard.c      ****       if (errorstatus != SD_OK)
 301:sdcard.c      ****       {
 302:sdcard.c      ****         return(errorstatus);
 303:sdcard.c      ****       }
 304:sdcard.c      **** 
 305:sdcard.c      ****       response = SDIO_GetResponse(SDIO_RESP1);
 306:sdcard.c      ****       validvoltage = (bool) (((response >> 31) == 1) ? 1 : 0);
 307:sdcard.c      ****       count++;
 308:sdcard.c      ****     }
 309:sdcard.c      ****     if (count >= SD_MAX_VOLT_TRIAL)
 310:sdcard.c      ****     {
 311:sdcard.c      ****       errorstatus = SD_INVALID_VOLTRANGE;
 312:sdcard.c      ****       return(errorstatus);
 313:sdcard.c      ****     }
 314:sdcard.c      **** 
 315:sdcard.c      ****     if (response &= SD_HIGH_CAPACITY)
 316:sdcard.c      ****     {
 317:sdcard.c      ****       CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 318:sdcard.c      ****     }
 319:sdcard.c      **** 
 320:sdcard.c      ****   }/* else MMC Card */
 321:sdcard.c      **** 
 322:sdcard.c      ****   return(errorstatus);
 323:sdcard.c      **** }
 324:sdcard.c      **** 
 325:sdcard.c      **** /**
 326:sdcard.c      ****   * @brief  Turns the SDIO output signals off.
 327:sdcard.c      ****   * @param  None
 328:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 329:sdcard.c      ****   */
 330:sdcard.c      **** SD_Error SD_PowerOFF(void)
 331:sdcard.c      **** {
 332:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 333:sdcard.c      **** 
 334:sdcard.c      ****   /* Set Power State to OFF */
 335:sdcard.c      ****   SDIO_SetPowerState(SDIO_PowerState_OFF);
 336:sdcard.c      **** 
 337:sdcard.c      ****   return(errorstatus);
 338:sdcard.c      **** }
 339:sdcard.c      **** 
 340:sdcard.c      **** /**
 341:sdcard.c      ****   * @brief  Intialises all cards or single card as the case may be. 
 342:sdcard.c      ****   *   Card(s) come into standby state.
 343:sdcard.c      ****   * @param  None
 344:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 345:sdcard.c      ****   */
 346:sdcard.c      **** SD_Error SD_InitializeCards(void)
 347:sdcard.c      **** {
 348:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 349:sdcard.c      ****   uint16_t rca = 0x01;
 350:sdcard.c      **** 
 351:sdcard.c      ****   if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 352:sdcard.c      ****   {
 353:sdcard.c      ****     errorstatus = SD_REQUEST_NOT_APPLICABLE;
 354:sdcard.c      ****     return(errorstatus);
 355:sdcard.c      ****   }
 356:sdcard.c      **** 
 357:sdcard.c      ****   if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 358:sdcard.c      ****   {
 359:sdcard.c      ****     /* Send CMD2 ALL_SEND_CID */
 360:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 361:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
 362:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 363:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 364:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 365:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 366:sdcard.c      **** 
 367:sdcard.c      ****     errorstatus = CmdResp2Error();
 368:sdcard.c      **** 
 369:sdcard.c      ****     if (SD_OK != errorstatus)
 370:sdcard.c      ****     {
 371:sdcard.c      ****       return(errorstatus);
 372:sdcard.c      ****     }
 373:sdcard.c      **** 
 374:sdcard.c      ****     CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 375:sdcard.c      ****     CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 376:sdcard.c      ****     CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 377:sdcard.c      ****     CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 378:sdcard.c      ****   }
 379:sdcard.c      ****   if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType)
 380:sdcard.c      ****       ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 381:sdcard.c      ****   {
 382:sdcard.c      ****     /* Send CMD3 SET_REL_ADDR with argument 0 */
 383:sdcard.c      ****     /* SD Card publishes its RCA. */
 384:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 385:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
 386:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 387:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 388:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 389:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 390:sdcard.c      **** 
 391:sdcard.c      ****     errorstatus = CmdResp6Error(SDIO_SET_REL_ADDR, &rca);
 392:sdcard.c      **** 
 393:sdcard.c      ****     if (SD_OK != errorstatus)
 394:sdcard.c      ****     {
 395:sdcard.c      ****       return(errorstatus);
 396:sdcard.c      ****     }
 397:sdcard.c      ****   }
 398:sdcard.c      **** 
 399:sdcard.c      ****   if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 400:sdcard.c      ****   {
 401:sdcard.c      ****     RCA = rca;
 402:sdcard.c      **** 
 403:sdcard.c      ****     /* Send CMD9 SEND_CSD with argument as card's RCA */
 404:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 405:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
 406:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 407:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 408:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 409:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 410:sdcard.c      **** 
 411:sdcard.c      ****     errorstatus = CmdResp2Error();
 412:sdcard.c      **** 
 413:sdcard.c      ****     if (SD_OK != errorstatus)
 414:sdcard.c      ****     {
 415:sdcard.c      ****       return(errorstatus);
 416:sdcard.c      ****     }
 417:sdcard.c      **** 
 418:sdcard.c      ****     CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 419:sdcard.c      ****     CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 420:sdcard.c      ****     CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 421:sdcard.c      ****     CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 422:sdcard.c      ****   }
 423:sdcard.c      **** 
 424:sdcard.c      ****   errorstatus = SD_OK; /* All cards get intialized */
 425:sdcard.c      **** 
 426:sdcard.c      ****   return(errorstatus);
 427:sdcard.c      **** }
 428:sdcard.c      **** 
 429:sdcard.c      **** /**
 430:sdcard.c      ****   * @brief  Returns information about specific card.
 431:sdcard.c      ****   * @param  cardinfo : pointer to a SD_CardInfo structure 
 432:sdcard.c      ****   *   that contains all SD card information.
 433:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 434:sdcard.c      ****   */
 435:sdcard.c      **** SD_Error SD_GetCardInfo(SD_CardInfo *cardinfo)
 436:sdcard.c      **** {
 437:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 438:sdcard.c      ****   uint8_t tmp = 0;
 439:sdcard.c      **** 
 440:sdcard.c      ****   cardinfo->CardType = (uint8_t)CardType;
 441:sdcard.c      ****   cardinfo->RCA = (uint16_t)RCA;
 442:sdcard.c      **** 
 443:sdcard.c      ****   /* Byte 0 */
 444:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 445:sdcard.c      ****   cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 446:sdcard.c      ****   cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 447:sdcard.c      ****   cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 448:sdcard.c      **** 
 449:sdcard.c      ****   /* Byte 1 */
 450:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 451:sdcard.c      ****   cardinfo->SD_csd.TAAC = tmp;
 452:sdcard.c      **** 
 453:sdcard.c      ****   /* Byte 2 */
 454:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 455:sdcard.c      ****   cardinfo->SD_csd.NSAC = tmp;
 456:sdcard.c      **** 
 457:sdcard.c      ****   /* Byte 3 */
 458:sdcard.c      ****   tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 459:sdcard.c      ****   cardinfo->SD_csd.MaxBusClkFrec = tmp;
 460:sdcard.c      **** 
 461:sdcard.c      ****   /* Byte 4 */
 462:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 463:sdcard.c      ****   cardinfo->SD_csd.CardComdClasses = tmp << 4;
 464:sdcard.c      **** 
 465:sdcard.c      ****   /* Byte 5 */
 466:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
 467:sdcard.c      ****   cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 468:sdcard.c      ****   cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 469:sdcard.c      **** 
 470:sdcard.c      ****   /* Byte 6 */
 471:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 472:sdcard.c      ****   cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 473:sdcard.c      ****   cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 474:sdcard.c      ****   cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 475:sdcard.c      ****   cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 476:sdcard.c      ****   cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
 477:sdcard.c      **** 
 478:sdcard.c      ****   if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 479:sdcard.c      ****   {
 480:sdcard.c      ****     cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 481:sdcard.c      **** 
 482:sdcard.c      ****     /* Byte 7 */
 483:sdcard.c      ****     tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 484:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 485:sdcard.c      **** 
 486:sdcard.c      ****     /* Byte 8 */
 487:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 488:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 489:sdcard.c      **** 
 490:sdcard.c      ****     cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 491:sdcard.c      ****     cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 492:sdcard.c      **** 
 493:sdcard.c      ****     /* Byte 9 */
 494:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 495:sdcard.c      ****     cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 496:sdcard.c      ****     cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 497:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 498:sdcard.c      ****     /* Byte 10 */
 499:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 500:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 501:sdcard.c      ****     
 502:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 503:sdcard.c      ****     cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 504:sdcard.c      ****     cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 505:sdcard.c      ****     cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 506:sdcard.c      ****   }
 507:sdcard.c      ****   else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 508:sdcard.c      ****   {
 509:sdcard.c      ****     /* Byte 7 */
 510:sdcard.c      ****     tmp = (uint8_t)(CSD_Tab[1] & 0x000000FF);
 511:sdcard.c      ****     cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 512:sdcard.c      **** 
 513:sdcard.c      ****     /* Byte 8 */
 514:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 515:sdcard.c      **** 
 516:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 517:sdcard.c      **** 
 518:sdcard.c      ****     /* Byte 9 */
 519:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 520:sdcard.c      **** 
 521:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp);
 522:sdcard.c      **** 
 523:sdcard.c      ****     /* Byte 10 */
 524:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 525:sdcard.c      ****     
 526:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 527:sdcard.c      ****     cardinfo->CardBlockSize = 512;    
 528:sdcard.c      ****   }
 529:sdcard.c      **** 
 530:sdcard.c      **** 
 531:sdcard.c      ****   cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 532:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 533:sdcard.c      **** 
 534:sdcard.c      ****   /* Byte 11 */
 535:sdcard.c      ****   tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 536:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 537:sdcard.c      ****   cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 538:sdcard.c      **** 
 539:sdcard.c      ****   /* Byte 12 */
 540:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 541:sdcard.c      ****   cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 542:sdcard.c      ****   cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 543:sdcard.c      ****   cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 544:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 545:sdcard.c      **** 
 546:sdcard.c      ****   /* Byte 13 */
 547:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
 548:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 549:sdcard.c      ****   cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 550:sdcard.c      ****   cardinfo->SD_csd.Reserved3 = 0;
 551:sdcard.c      ****   cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 552:sdcard.c      **** 
 553:sdcard.c      ****   /* Byte 14 */
 554:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
 555:sdcard.c      ****   cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 556:sdcard.c      ****   cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 557:sdcard.c      ****   cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 558:sdcard.c      ****   cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 559:sdcard.c      ****   cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 560:sdcard.c      ****   cardinfo->SD_csd.ECC = (tmp & 0x03);
 561:sdcard.c      **** 
 562:sdcard.c      ****   /* Byte 15 */
 563:sdcard.c      ****   tmp = (uint8_t)(CSD_Tab[3] & 0x000000FF);
 564:sdcard.c      ****   cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 565:sdcard.c      ****   cardinfo->SD_csd.Reserved4 = 1;
 566:sdcard.c      **** 
 567:sdcard.c      **** 
 568:sdcard.c      ****   /* Byte 0 */
 569:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 570:sdcard.c      ****   cardinfo->SD_cid.ManufacturerID = tmp;
 571:sdcard.c      **** 
 572:sdcard.c      ****   /* Byte 1 */
 573:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[0] & 0x00FF0000) >> 16);
 574:sdcard.c      ****   cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 575:sdcard.c      **** 
 576:sdcard.c      ****   /* Byte 2 */
 577:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[0] & 0x000000FF00) >> 8);
 578:sdcard.c      ****   cardinfo->SD_cid.OEM_AppliID |= tmp;
 579:sdcard.c      **** 
 580:sdcard.c      ****   /* Byte 3 */
 581:sdcard.c      ****   tmp = (uint8_t)(CID_Tab[0] & 0x000000FF);
 582:sdcard.c      ****   cardinfo->SD_cid.ProdName1 = tmp << 24;
 583:sdcard.c      **** 
 584:sdcard.c      ****   /* Byte 4 */
 585:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 586:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp << 16;
 587:sdcard.c      **** 
 588:sdcard.c      ****   /* Byte 5 */
 589:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[1] & 0x00FF0000) >> 16);
 590:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp << 8;
 591:sdcard.c      **** 
 592:sdcard.c      ****   /* Byte 6 */
 593:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[1] & 0x0000FF00) >> 8);
 594:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp;
 595:sdcard.c      **** 
 596:sdcard.c      ****   /* Byte 7 */
 597:sdcard.c      ****   tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 598:sdcard.c      ****   cardinfo->SD_cid.ProdName2 = tmp;
 599:sdcard.c      **** 
 600:sdcard.c      ****   /* Byte 8 */
 601:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 602:sdcard.c      ****   cardinfo->SD_cid.ProdRev = tmp;
 603:sdcard.c      **** 
 604:sdcard.c      ****   /* Byte 9 */
 605:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[2] & 0x00FF0000) >> 16);
 606:sdcard.c      ****   cardinfo->SD_cid.ProdSN = tmp << 24;
 607:sdcard.c      **** 
 608:sdcard.c      ****   /* Byte 10 */
 609:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[2] & 0x0000FF00) >> 8);
 610:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp << 16;
 611:sdcard.c      **** 
 612:sdcard.c      ****   /* Byte 11 */
 613:sdcard.c      ****   tmp = (uint8_t)(CID_Tab[2] & 0x000000FF);
 614:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp << 8;
 615:sdcard.c      **** 
 616:sdcard.c      ****   /* Byte 12 */
 617:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 618:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp;
 619:sdcard.c      **** 
 620:sdcard.c      ****   /* Byte 13 */
 621:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
 622:sdcard.c      ****   cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 623:sdcard.c      ****   cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 624:sdcard.c      **** 
 625:sdcard.c      ****   /* Byte 14 */
 626:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[3] & 0x0000FF00) >> 8);
 627:sdcard.c      ****   cardinfo->SD_cid.ManufactDate |= tmp;
 628:sdcard.c      **** 
 629:sdcard.c      ****   /* Byte 15 */
 630:sdcard.c      ****   tmp = (uint8_t)(CID_Tab[3] & 0x000000FF);
 631:sdcard.c      ****   cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 632:sdcard.c      ****   cardinfo->SD_cid.Reserved2 = 1;
 633:sdcard.c      ****   
 634:sdcard.c      ****   return(errorstatus);
 635:sdcard.c      **** }
 636:sdcard.c      **** 
 637:sdcard.c      **** /**
 638:sdcard.c      ****   * @brief  Enables wide bus opeartion for the requeseted card if 
 639:sdcard.c      ****   *   supported by card.
 640:sdcard.c      ****   * @param  WideMode: Specifies the SD card wide bus mode. 
 641:sdcard.c      ****   *   This parameter can be one of the following values:
 642:sdcard.c      ****   *     @arg SDIO_BusWide_8b: 8-bit data transfer (Only for MMC)
 643:sdcard.c      ****   *     @arg SDIO_BusWide_4b: 4-bit data transfer
 644:sdcard.c      ****   *     @arg SDIO_BusWide_1b: 1-bit data transfer
 645:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 646:sdcard.c      ****   */
 647:sdcard.c      **** SD_Error SD_EnableWideBusOperation(uint32_t WideMode)
 648:sdcard.c      **** {
 649:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 650:sdcard.c      **** 
 651:sdcard.c      ****   /* MMC Card doesn't support this feature */
 652:sdcard.c      ****   if (SDIO_MULTIMEDIA_CARD == CardType)
 653:sdcard.c      ****   {
 654:sdcard.c      ****     errorstatus = SD_UNSUPPORTED_FEATURE;
 655:sdcard.c      ****     return(errorstatus);
 656:sdcard.c      ****   }
 657:sdcard.c      ****   else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardT
 658:sdcard.c      ****   {
 659:sdcard.c      ****     if (SDIO_BusWide_8b == WideMode)
 660:sdcard.c      ****     {
 661:sdcard.c      ****       errorstatus = SD_UNSUPPORTED_FEATURE;
 662:sdcard.c      ****       return(errorstatus);
 663:sdcard.c      ****     }
 664:sdcard.c      ****     else if (SDIO_BusWide_4b == WideMode)
 665:sdcard.c      ****     {
 666:sdcard.c      ****       errorstatus = SDEnWideBus(ENABLE);
 667:sdcard.c      **** 
 668:sdcard.c      ****       if (SD_OK == errorstatus)
 669:sdcard.c      ****       {
 670:sdcard.c      ****         /* Configure the SDIO peripheral */
 671:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 672:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 673:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 674:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 675:sdcard.c      ****         SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 676:sdcard.c      ****         SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 677:sdcard.c      ****         SDIO_Init(&SDIO_InitStructure);
 678:sdcard.c      ****       }
 679:sdcard.c      ****     }
 680:sdcard.c      ****     else
 681:sdcard.c      ****     {
 682:sdcard.c      ****       errorstatus = SDEnWideBus(DISABLE);
 683:sdcard.c      **** 
 684:sdcard.c      ****       if (SD_OK == errorstatus)
 685:sdcard.c      ****       {
 686:sdcard.c      ****         /* Configure the SDIO peripheral */
 687:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 688:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 689:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 690:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 691:sdcard.c      ****         SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 692:sdcard.c      ****         SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 693:sdcard.c      ****         SDIO_Init(&SDIO_InitStructure);
 694:sdcard.c      ****       }
 695:sdcard.c      ****     }
 696:sdcard.c      ****   }
 697:sdcard.c      **** 
 698:sdcard.c      ****   return(errorstatus);
 699:sdcard.c      **** }
 700:sdcard.c      **** 
 701:sdcard.c      **** /**
 702:sdcard.c      ****   * @brief  Sets device mode whether to operate in Polling, Interrupt or
 703:sdcard.c      ****   *   DMA mode.
 704:sdcard.c      ****   * @param  Mode: Specifies the Data Transfer mode.
 705:sdcard.c      ****   *   This parameter can be one of the following values:
 706:sdcard.c      ****   *     @arg SD_DMA_MODE: Data transfer using DMA.
 707:sdcard.c      ****   *     @arg SD_INTERRUPT_MODE: Data transfer using interrupts.
 708:sdcard.c      ****   *     @arg SD_POLLING_MODE: Data transfer using flags.
 709:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 710:sdcard.c      ****   */
 711:sdcard.c      **** SD_Error SD_SetDeviceMode(uint32_t Mode)
 712:sdcard.c      **** {
 713:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 714:sdcard.c      **** 
 715:sdcard.c      ****   if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
 716:sdcard.c      ****   {
 717:sdcard.c      ****     DeviceMode = Mode;
 718:sdcard.c      ****   }
 719:sdcard.c      ****   else
 720:sdcard.c      ****   {
 721:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
 722:sdcard.c      ****   }
 723:sdcard.c      ****   return(errorstatus);
 724:sdcard.c      **** 
 725:sdcard.c      **** }
 726:sdcard.c      **** 
 727:sdcard.c      **** /**
 728:sdcard.c      ****   * @brief  Selects od Deselects the corresponding card.
 729:sdcard.c      ****   * @param  addr: Address of the Card to be selected.
 730:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 731:sdcard.c      ****   */
 732:sdcard.c      **** SD_Error SD_SelectDeselect(uint32_t addr)
 733:sdcard.c      **** {
 734:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 735:sdcard.c      **** 
 736:sdcard.c      ****   /* Send CMD7 SDIO_SEL_DESEL_CARD */
 737:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument =  addr;
 738:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
 739:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 740:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 741:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 742:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 743:sdcard.c      **** 
 744:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEL_DESEL_CARD);
 745:sdcard.c      **** 
 746:sdcard.c      ****   return(errorstatus);
 747:sdcard.c      **** }
 748:sdcard.c      **** 
 749:sdcard.c      **** /**
 750:sdcard.c      ****   * @brief  Allows to read one block from a specified address in a card.
 751:sdcard.c      ****   * @param  addr: Address from where data are to be read.
 752:sdcard.c      ****   * @param  readbuff: pointer to the buffer that will contain the 
 753:sdcard.c      ****   *   received data
 754:sdcard.c      ****   * @param  BlockSize: the SD card Data block size.
 755:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 756:sdcard.c      ****   */
 757:sdcard.c      **** SD_Error SD_ReadBlock(uint32_t addr, uint32_t *readbuff, uint16_t BlockSize)
 758:sdcard.c      **** {
 759:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 760:sdcard.c      ****   uint32_t count = 0, *tempbuff = readbuff;
 761:sdcard.c      ****   uint8_t power = 0;
 762:sdcard.c      **** 
 763:sdcard.c      ****   if (NULL == readbuff)
 764:sdcard.c      ****   {
 765:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
 766:sdcard.c      ****     return(errorstatus);
 767:sdcard.c      ****   }
 768:sdcard.c      **** 
 769:sdcard.c      ****   TransferError = SD_OK;
 770:sdcard.c      ****   TransferEnd = 0;
 771:sdcard.c      ****   TotalNumberOfBytes = 0;
 772:sdcard.c      **** 
 773:sdcard.c      ****   /* Clear all DPSM configuration */
 774:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 775:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
 776:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 777:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 778:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 779:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 780:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 781:sdcard.c      ****   SDIO_DMACmd(DISABLE);
 782:sdcard.c      **** 
 783:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 784:sdcard.c      ****   {
 785:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
 786:sdcard.c      ****     return(errorstatus);
 787:sdcard.c      ****   }
 788:sdcard.c      ****   
 789:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 790:sdcard.c      ****   {
 791:sdcard.c      ****     BlockSize = 512;
 792:sdcard.c      ****     addr /= 512;
 793:sdcard.c      ****   }
 794:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 795:sdcard.c      ****   {
 796:sdcard.c      ****     power = convert_from_bytes_to_power_of_two(BlockSize);
 797:sdcard.c      **** 
 798:sdcard.c      ****     /* Set Block Size for Card */
 799:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 800:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 801:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 802:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 803:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 804:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 805:sdcard.c      **** 
 806:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 807:sdcard.c      **** 
 808:sdcard.c      ****     if (SD_OK != errorstatus)
 809:sdcard.c      ****     {
 810:sdcard.c      ****       return(errorstatus);
 811:sdcard.c      ****     }
 812:sdcard.c      ****   }
 813:sdcard.c      ****   else
 814:sdcard.c      ****   {
 815:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
 816:sdcard.c      ****     return(errorstatus);
 817:sdcard.c      ****   }
 818:sdcard.c      **** 
 819:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 820:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 821:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 822:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 823:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 824:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 825:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 826:sdcard.c      **** 
 827:sdcard.c      ****   TotalNumberOfBytes = BlockSize;
 828:sdcard.c      ****   StopCondition = 0;
 829:sdcard.c      ****   DestBuffer = readbuff;
 830:sdcard.c      **** 
 831:sdcard.c      ****   /* Send CMD17 READ_SINGLE_BLOCK */
 832:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 833:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
 834:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 835:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 836:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 837:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 838:sdcard.c      **** 
 839:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
 840:sdcard.c      **** 
 841:sdcard.c      ****   if (errorstatus != SD_OK)
 842:sdcard.c      ****   {
 843:sdcard.c      ****     return(errorstatus);
 844:sdcard.c      ****   }
 845:sdcard.c      ****   /* In case of single block transfer, no need of stop transfer at all.*/
 846:sdcard.c      ****   if (DeviceMode == SD_POLLING_MODE)
 847:sdcard.c      ****   {
 848:sdcard.c      ****     /* Polling mode */
 849:sdcard.c      ****     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DB
 850:sdcard.c      ****     {
 851:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 852:sdcard.c      ****       {
 853:sdcard.c      ****         for (count = 0; count < 8; count++)
 854:sdcard.c      ****         {
 855:sdcard.c      ****           *(tempbuff + count) = SDIO_ReadData();
 856:sdcard.c      ****         }
 857:sdcard.c      ****         tempbuff += 8;
 858:sdcard.c      ****       }
 859:sdcard.c      ****     }
 860:sdcard.c      **** 
 861:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 862:sdcard.c      ****     {
 863:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 864:sdcard.c      ****       errorstatus = SD_DATA_TIMEOUT;
 865:sdcard.c      ****       return(errorstatus);
 866:sdcard.c      ****     }
 867:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 868:sdcard.c      ****     {
 869:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 870:sdcard.c      ****       errorstatus = SD_DATA_CRC_FAIL;
 871:sdcard.c      ****       return(errorstatus);
 872:sdcard.c      ****     }
 873:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 874:sdcard.c      ****     {
 875:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 876:sdcard.c      ****       errorstatus = SD_RX_OVERRUN;
 877:sdcard.c      ****       return(errorstatus);
 878:sdcard.c      ****     }
 879:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 880:sdcard.c      ****     {
 881:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 882:sdcard.c      ****       errorstatus = SD_START_BIT_ERR;
 883:sdcard.c      ****       return(errorstatus);
 884:sdcard.c      ****     }
 885:sdcard.c      ****     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 886:sdcard.c      ****     {
 887:sdcard.c      ****       *tempbuff = SDIO_ReadData();
 888:sdcard.c      ****       tempbuff++;
 889:sdcard.c      ****     }
 890:sdcard.c      **** 
 891:sdcard.c      ****     /* Clear all the static flags */
 892:sdcard.c      ****     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 893:sdcard.c      ****   }
 894:sdcard.c      ****   else if (DeviceMode == SD_INTERRUPT_MODE)
 895:sdcard.c      ****   {
 896:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT
 897:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 898:sdcard.c      ****     {}
 899:sdcard.c      ****     if (TransferError != SD_OK)
 900:sdcard.c      ****     {
 901:sdcard.c      ****       return(TransferError);
 902:sdcard.c      ****     }
 903:sdcard.c      ****   }
 904:sdcard.c      ****   else if (DeviceMode == SD_DMA_MODE)
 905:sdcard.c      ****   {
 906:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT
 907:sdcard.c      ****     SDIO_DMACmd(ENABLE);
 908:sdcard.c      ****     DMA_RxConfiguration(readbuff, BlockSize);
 909:sdcard.c      ****     while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 910:sdcard.c      ****     {}
 911:sdcard.c      ****   }
 912:sdcard.c      ****   return(errorstatus);
 913:sdcard.c      **** }
 914:sdcard.c      **** 
 915:sdcard.c      **** /**
 916:sdcard.c      ****   * @brief  Allows to read blocks from a specified address  in a card.
 917:sdcard.c      ****   * @param  addr: Address from where data are to be read.
 918:sdcard.c      ****   * @param  readbuff: pointer to the buffer that will contain the 
 919:sdcard.c      ****   *   received data.
 920:sdcard.c      ****   * @param  BlockSize: the SD card Data block size.
 921:sdcard.c      ****   * @param  NumberOfBlocks: number of blocks to be read.
 922:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
 923:sdcard.c      ****   */
 924:sdcard.c      **** SD_Error SD_ReadMultiBlocks(uint32_t addr, uint32_t *readbuff, uint16_t BlockSize, uint32_t NumberO
 925:sdcard.c      **** {
 926:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 927:sdcard.c      ****   uint32_t count = 0, *tempbuff = readbuff;
 928:sdcard.c      ****   uint8_t power = 0;
 929:sdcard.c      **** 
 930:sdcard.c      ****   if (NULL == readbuff)
 931:sdcard.c      ****   {
 932:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
 933:sdcard.c      ****     return(errorstatus);
 934:sdcard.c      ****   }
 935:sdcard.c      **** 
 936:sdcard.c      ****   TransferError = SD_OK;
 937:sdcard.c      ****   TransferEnd = 0;
 938:sdcard.c      ****   TotalNumberOfBytes = 0;
 939:sdcard.c      **** 
 940:sdcard.c      ****   /* Clear all DPSM configuration */
 941:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 942:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
 943:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 944:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 945:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 946:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 947:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 948:sdcard.c      ****   SDIO_DMACmd(DISABLE);
 949:sdcard.c      **** 
 950:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 951:sdcard.c      ****   {
 952:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
 953:sdcard.c      ****     return(errorstatus);
 954:sdcard.c      ****   }
 955:sdcard.c      **** 
 956:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 957:sdcard.c      ****   {
 958:sdcard.c      ****     BlockSize = 512;
 959:sdcard.c      ****     addr /= 512;
 960:sdcard.c      ****   }
 961:sdcard.c      ****   
 962:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
 963:sdcard.c      ****   {
 964:sdcard.c      ****     power = convert_from_bytes_to_power_of_two(BlockSize);
 965:sdcard.c      **** 
 966:sdcard.c      ****     /* Set Block Size for Card */
 967:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 968:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 969:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 970:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 971:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 972:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 973:sdcard.c      **** 
 974:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 975:sdcard.c      **** 
 976:sdcard.c      ****     if (SD_OK != errorstatus)
 977:sdcard.c      ****     {
 978:sdcard.c      ****       return(errorstatus);
 979:sdcard.c      ****     }
 980:sdcard.c      ****   }
 981:sdcard.c      ****   else
 982:sdcard.c      ****   {
 983:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
 984:sdcard.c      ****     return(errorstatus);
 985:sdcard.c      ****   }
 986:sdcard.c      **** 
 987:sdcard.c      ****   if (NumberOfBlocks > 1)
 988:sdcard.c      ****   {
 989:sdcard.c      ****     /* Common to all modes */
 990:sdcard.c      ****     if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
 991:sdcard.c      ****     {
 992:sdcard.c      ****       errorstatus = SD_INVALID_PARAMETER;
 993:sdcard.c      ****       return(errorstatus);
 994:sdcard.c      ****     }
 995:sdcard.c      **** 
 996:sdcard.c      ****     TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 997:sdcard.c      ****     StopCondition = 1;
 998:sdcard.c      ****     DestBuffer = readbuff;
 999:sdcard.c      **** 
1000:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
1001:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
1002:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
1003:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
1004:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
1005:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
1006:sdcard.c      ****     SDIO_DataConfig(&SDIO_DataInitStructure);
1007:sdcard.c      **** 
1008:sdcard.c      ****     /* Send CMD18 READ_MULT_BLOCK with argument data address */
1009:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
1010:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
1011:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1012:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1013:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1014:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1015:sdcard.c      **** 
1016:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
1017:sdcard.c      **** 
1018:sdcard.c      ****     if (errorstatus != SD_OK)
1019:sdcard.c      ****     {
1020:sdcard.c      ****       return(errorstatus);
1021:sdcard.c      ****     }
1022:sdcard.c      **** 
1023:sdcard.c      ****     if (DeviceMode == SD_POLLING_MODE)
1024:sdcard.c      ****     {
1025:sdcard.c      ****       /* Polling mode */
1026:sdcard.c      ****       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_D
1027:sdcard.c      ****       {
1028:sdcard.c      ****         if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
1029:sdcard.c      ****         {
1030:sdcard.c      ****           for (count = 0; count < SD_HALFFIFO; count++)
1031:sdcard.c      ****           {
1032:sdcard.c      ****             *(tempbuff + count) = SDIO_ReadData();
1033:sdcard.c      ****           }
1034:sdcard.c      ****           tempbuff += SD_HALFFIFO;
1035:sdcard.c      ****         }
1036:sdcard.c      ****       }
1037:sdcard.c      **** 
1038:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
1039:sdcard.c      ****       {
1040:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
1041:sdcard.c      ****         errorstatus = SD_DATA_TIMEOUT;
1042:sdcard.c      ****         return(errorstatus);
1043:sdcard.c      ****       }
1044:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
1045:sdcard.c      ****       {
1046:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
1047:sdcard.c      ****         errorstatus = SD_DATA_CRC_FAIL;
1048:sdcard.c      ****         return(errorstatus);
1049:sdcard.c      ****       }
1050:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
1051:sdcard.c      ****       {
1052:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
1053:sdcard.c      ****         errorstatus = SD_RX_OVERRUN;
1054:sdcard.c      ****         return(errorstatus);
1055:sdcard.c      ****       }
1056:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
1057:sdcard.c      ****       {
1058:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
1059:sdcard.c      ****         errorstatus = SD_START_BIT_ERR;
1060:sdcard.c      ****         return(errorstatus);
1061:sdcard.c      ****       }
1062:sdcard.c      ****       while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
1063:sdcard.c      ****       {
1064:sdcard.c      ****         *tempbuff = SDIO_ReadData();
1065:sdcard.c      ****         tempbuff++;
1066:sdcard.c      ****       }
1067:sdcard.c      **** 
1068:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
1069:sdcard.c      ****       {
1070:sdcard.c      ****         /* In Case Of SD-CARD Send Command STOP_TRANSMISSION */
1071:sdcard.c      ****         if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType
1072:sdcard.c      ****         {
1073:sdcard.c      ****           /* Send CMD12 STOP_TRANSMISSION */
1074:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Argument = 0x0;
1075:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
1076:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1077:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1078:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1079:sdcard.c      ****           SDIO_SendCommand(&SDIO_CmdInitStructure);
1080:sdcard.c      **** 
1081:sdcard.c      ****           errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
1082:sdcard.c      **** 
1083:sdcard.c      ****           if (errorstatus != SD_OK)
1084:sdcard.c      ****           {
1085:sdcard.c      ****             return(errorstatus);
1086:sdcard.c      ****           }
1087:sdcard.c      ****         }
1088:sdcard.c      ****       }
1089:sdcard.c      ****       /* Clear all the static flags */
1090:sdcard.c      ****       SDIO_ClearFlag(SDIO_STATIC_FLAGS);
1091:sdcard.c      ****     }
1092:sdcard.c      ****     else if (DeviceMode == SD_INTERRUPT_MODE)
1093:sdcard.c      ****     {
1094:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_
1095:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
1096:sdcard.c      ****       {}
1097:sdcard.c      ****       if (TransferError != SD_OK)
1098:sdcard.c      ****       {
1099:sdcard.c      ****         return(TransferError);
1100:sdcard.c      ****       }
1101:sdcard.c      ****     }
1102:sdcard.c      ****     else if (DeviceMode == SD_DMA_MODE)
1103:sdcard.c      ****     {
1104:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_
1105:sdcard.c      ****       SDIO_DMACmd(ENABLE);
1106:sdcard.c      ****       DMA_RxConfiguration(readbuff, (NumberOfBlocks * BlockSize));
1107:sdcard.c      ****       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
1108:sdcard.c      ****       {}
1109:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
1110:sdcard.c      ****       {}
1111:sdcard.c      ****       if (TransferError != SD_OK)
1112:sdcard.c      ****       {
1113:sdcard.c      ****         return(TransferError);
1114:sdcard.c      ****       }
1115:sdcard.c      ****     }
1116:sdcard.c      ****   }
1117:sdcard.c      ****   return(errorstatus);
1118:sdcard.c      **** }
1119:sdcard.c      **** 
1120:sdcard.c      **** /**
1121:sdcard.c      ****   * @brief  Allows to write one block starting from a specified address 
1122:sdcard.c      ****   *   in a card.
1123:sdcard.c      ****   * @param  addr: Address from where data are to be read.
1124:sdcard.c      ****   * @param  writebuff: pointer to the buffer that contain the data to be
1125:sdcard.c      ****   *   transferred.
1126:sdcard.c      ****   * @param  BlockSize: the SD card Data block size.
1127:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1128:sdcard.c      ****   */
1129:sdcard.c      **** SD_Error SD_WriteBlock(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize)
1130:sdcard.c      **** {
1131:sdcard.c      ****   SD_Error errorstatus = SD_OK;
1132:sdcard.c      ****   uint8_t  power = 0, cardstate = 0;
1133:sdcard.c      ****   uint32_t timeout = 0, bytestransferred = 0;
1134:sdcard.c      ****   uint32_t cardstatus = 0, count = 0, restwords = 0;
1135:sdcard.c      ****   uint32_t *tempbuff = writebuff;
1136:sdcard.c      **** 
1137:sdcard.c      ****   if (writebuff == NULL)
1138:sdcard.c      ****   {
1139:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
1140:sdcard.c      ****     return(errorstatus);
1141:sdcard.c      ****   }
1142:sdcard.c      **** 
1143:sdcard.c      ****   TransferError = SD_OK;
1144:sdcard.c      ****   TransferEnd = 0;
1145:sdcard.c      ****   TotalNumberOfBytes = 0;
1146:sdcard.c      **** 
1147:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
1148:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
1149:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
1150:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
1151:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
1152:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
1153:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
1154:sdcard.c      ****   SDIO_DMACmd(DISABLE);
1155:sdcard.c      **** 
1156:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
1157:sdcard.c      ****   {
1158:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
1159:sdcard.c      ****     return(errorstatus);
1160:sdcard.c      ****   }
1161:sdcard.c      **** 
1162:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
1163:sdcard.c      ****   {
1164:sdcard.c      ****     BlockSize = 512;
1165:sdcard.c      ****     addr /= 512;
1166:sdcard.c      ****   }
1167:sdcard.c      ****   
1168:sdcard.c      ****   /* Set the block size, both on controller and card */
1169:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
1170:sdcard.c      ****   {
1171:sdcard.c      ****     power = convert_from_bytes_to_power_of_two(BlockSize);
1172:sdcard.c      **** 
1173:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
1174:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
1175:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1176:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1177:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1178:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1179:sdcard.c      **** 
1180:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
1181:sdcard.c      **** 
1182:sdcard.c      ****     if (errorstatus != SD_OK)
1183:sdcard.c      ****     {
1184:sdcard.c      ****       return(errorstatus);
1185:sdcard.c      ****     }
1186:sdcard.c      ****   }
1187:sdcard.c      ****   else
1188:sdcard.c      ****   {
1189:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
1190:sdcard.c      ****     return(errorstatus);
1191:sdcard.c      ****   }
1192:sdcard.c      **** 
1193:sdcard.c      ****   /* Wait till card is ready for data Added */
1194:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
1195:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
1196:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1197:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1198:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1199:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1200:sdcard.c      **** 
1201:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
1202:sdcard.c      **** 
1203:sdcard.c      ****   if (errorstatus != SD_OK)
1204:sdcard.c      ****   {
1205:sdcard.c      ****     return(errorstatus);
1206:sdcard.c      ****   }
1207:sdcard.c      **** 
1208:sdcard.c      ****   cardstatus = SDIO_GetResponse(SDIO_RESP1);
1209:sdcard.c      **** 
1210:sdcard.c      ****   timeout = SD_DATATIMEOUT;
1211:sdcard.c      **** 
1212:sdcard.c      ****   while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
1213:sdcard.c      ****   {
1214:sdcard.c      ****     timeout--;
1215:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
1216:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
1217:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1218:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1219:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1220:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1221:sdcard.c      **** 
1222:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
1223:sdcard.c      **** 
1224:sdcard.c      ****     if (errorstatus != SD_OK)
1225:sdcard.c      ****     {
1226:sdcard.c      ****       return(errorstatus);
1227:sdcard.c      ****     }
1228:sdcard.c      ****     cardstatus = SDIO_GetResponse(SDIO_RESP1);
1229:sdcard.c      ****   }
1230:sdcard.c      **** 
1231:sdcard.c      ****   if (timeout == 0)
1232:sdcard.c      ****   {
1233:sdcard.c      ****     return(SD_ERROR);
1234:sdcard.c      ****   }
1235:sdcard.c      **** 
1236:sdcard.c      ****   /* Send CMD24 WRITE_SINGLE_BLOCK */
1237:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = addr;
1238:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
1239:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1240:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1241:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1242:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1243:sdcard.c      **** 
1244:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_WRITE_SINGLE_BLOCK);
1245:sdcard.c      **** 
1246:sdcard.c      ****   if (errorstatus != SD_OK)
1247:sdcard.c      ****   {
1248:sdcard.c      ****     return(errorstatus);
1249:sdcard.c      ****   }
1250:sdcard.c      **** 
1251:sdcard.c      ****   TotalNumberOfBytes = BlockSize;
1252:sdcard.c      ****   StopCondition = 0;
1253:sdcard.c      ****   SrcBuffer = writebuff;
1254:sdcard.c      **** 
1255:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
1256:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
1257:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
1258:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
1259:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
1260:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
1261:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
1262:sdcard.c      **** 
1263:sdcard.c      ****   /* In case of single data block transfer no need of stop command at all */
1264:sdcard.c      ****   if (DeviceMode == SD_POLLING_MODE)
1265:sdcard.c      ****   {
1266:sdcard.c      ****     while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_D
1267:sdcard.c      ****     {
1268:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
1269:sdcard.c      ****       {
1270:sdcard.c      ****         if ((TotalNumberOfBytes - bytestransferred) < 32)
1271:sdcard.c      ****         {
1272:sdcard.c      ****           restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - b
1273:sdcard.c      **** 
1274:sdcard.c      ****           for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
1275:sdcard.c      ****           {
1276:sdcard.c      ****             SDIO_WriteData(*tempbuff);
1277:sdcard.c      ****           }
1278:sdcard.c      ****         }
1279:sdcard.c      ****         else
1280:sdcard.c      ****         {
1281:sdcard.c      ****           for (count = 0; count < 8; count++)
1282:sdcard.c      ****           {
1283:sdcard.c      ****             SDIO_WriteData(*(tempbuff + count));
1284:sdcard.c      ****           }
1285:sdcard.c      ****           tempbuff += 8;
1286:sdcard.c      ****           bytestransferred += 32;
1287:sdcard.c      ****         }
1288:sdcard.c      ****       }
1289:sdcard.c      ****     }
1290:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
1291:sdcard.c      ****     {
1292:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
1293:sdcard.c      ****       errorstatus = SD_DATA_TIMEOUT;
1294:sdcard.c      ****       return(errorstatus);
1295:sdcard.c      ****     }
1296:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
1297:sdcard.c      ****     {
1298:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
1299:sdcard.c      ****       errorstatus = SD_DATA_CRC_FAIL;
1300:sdcard.c      ****       return(errorstatus);
1301:sdcard.c      ****     }
1302:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
1303:sdcard.c      ****     {
1304:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
1305:sdcard.c      ****       errorstatus = SD_TX_UNDERRUN;
1306:sdcard.c      ****       return(errorstatus);
1307:sdcard.c      ****     }
1308:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
1309:sdcard.c      ****     {
1310:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
1311:sdcard.c      ****       errorstatus = SD_START_BIT_ERR;
1312:sdcard.c      ****       return(errorstatus);
1313:sdcard.c      ****     }
1314:sdcard.c      ****   }
1315:sdcard.c      ****   else if (DeviceMode == SD_INTERRUPT_MODE)
1316:sdcard.c      ****   {
1317:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO
1318:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
1319:sdcard.c      ****     {}
1320:sdcard.c      ****     if (TransferError != SD_OK)
1321:sdcard.c      ****     {
1322:sdcard.c      ****       return(TransferError);
1323:sdcard.c      ****     }
1324:sdcard.c      ****   }
1325:sdcard.c      ****   else if (DeviceMode == SD_DMA_MODE)
1326:sdcard.c      ****   {
1327:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_I
1328:sdcard.c      ****     DMA_TxConfiguration(writebuff, BlockSize);
1329:sdcard.c      ****     SDIO_DMACmd(ENABLE);
1330:sdcard.c      ****     while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
1331:sdcard.c      ****     {}
1332:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
1333:sdcard.c      ****     {}
1334:sdcard.c      ****     if (TransferError != SD_OK)
1335:sdcard.c      ****     {
1336:sdcard.c      ****       return(TransferError);
1337:sdcard.c      ****     }
1338:sdcard.c      ****   }
1339:sdcard.c      **** 
1340:sdcard.c      ****   /* Clear all the static flags */
1341:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
1342:sdcard.c      **** 
1343:sdcard.c      ****   /* Wait till the card is in programming state */
1344:sdcard.c      ****   errorstatus = IsCardProgramming(&cardstate);
1345:sdcard.c      **** 
1346:sdcard.c      ****   while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_REC
1347:sdcard.c      ****   {
1348:sdcard.c      ****     errorstatus = IsCardProgramming(&cardstate);
1349:sdcard.c      ****   }
1350:sdcard.c      **** 
1351:sdcard.c      ****   return(errorstatus);
1352:sdcard.c      **** }
1353:sdcard.c      **** 
1354:sdcard.c      **** /**
1355:sdcard.c      ****   * @brief  Allows to write blocks starting from a specified address in 
1356:sdcard.c      ****   *   a card.
1357:sdcard.c      ****   * @param  addr: Address from where data are to be read.
1358:sdcard.c      ****   * @param  writebuff: pointer to the buffer that contain the data to be
1359:sdcard.c      ****   *   transferred.
1360:sdcard.c      ****   * @param  BlockSize: the SD card Data block size.
1361:sdcard.c      ****   * @param  NumberOfBlocks: number of blocks to be written.
1362:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1363:sdcard.c      ****   */
1364:sdcard.c      **** SD_Error SD_WriteMultiBlocks(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize, uint32_t Numbe
1365:sdcard.c      **** {
1366:sdcard.c      ****   SD_Error errorstatus = SD_OK;
1367:sdcard.c      ****   uint8_t  power = 0, cardstate = 0;
1368:sdcard.c      ****   uint32_t bytestransferred = 0;
1369:sdcard.c      ****   uint32_t count = 0, restwords = 0;
1370:sdcard.c      ****   uint32_t *tempbuff = writebuff;
1371:sdcard.c      **** 
1372:sdcard.c      ****   if (writebuff == NULL)
1373:sdcard.c      ****   {
1374:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
1375:sdcard.c      ****     return(errorstatus);
1376:sdcard.c      ****   }
1377:sdcard.c      **** 
1378:sdcard.c      ****   TransferError = SD_OK;
1379:sdcard.c      ****   TransferEnd = 0;
1380:sdcard.c      ****   TotalNumberOfBytes = 0;
1381:sdcard.c      **** 
1382:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
1383:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
1384:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
1385:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
1386:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
1387:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
1388:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
1389:sdcard.c      ****   SDIO_DMACmd(DISABLE);
1390:sdcard.c      **** 
1391:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
1392:sdcard.c      ****   {
1393:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
1394:sdcard.c      ****     return(errorstatus);
1395:sdcard.c      ****   }
1396:sdcard.c      **** 
1397:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
1398:sdcard.c      ****   {
1399:sdcard.c      ****     BlockSize = 512;
1400:sdcard.c      ****     addr /= 512;
1401:sdcard.c      ****   }
1402:sdcard.c      ****   
1403:sdcard.c      ****   /* Set the block size, both on controller and card */
1404:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
1405:sdcard.c      ****   {
1406:sdcard.c      ****     power = convert_from_bytes_to_power_of_two(BlockSize);
1407:sdcard.c      **** 
1408:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
1409:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
1410:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1411:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1412:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1413:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1414:sdcard.c      **** 
1415:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
1416:sdcard.c      **** 
1417:sdcard.c      ****     if (errorstatus != SD_OK)
1418:sdcard.c      ****     {
1419:sdcard.c      ****       return(errorstatus);
1420:sdcard.c      ****     }
1421:sdcard.c      ****   }
1422:sdcard.c      ****   else
1423:sdcard.c      ****   {
1424:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
1425:sdcard.c      ****     return(errorstatus);
1426:sdcard.c      ****   }
1427:sdcard.c      **** 
1428:sdcard.c      ****   /* Wait till card is ready for data Added */
1429:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
1430:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
1431:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1432:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1433:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1434:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1435:sdcard.c      **** 
1436:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
1437:sdcard.c      **** 
1438:sdcard.c      ****   if (errorstatus != SD_OK)
1439:sdcard.c      ****   {
1440:sdcard.c      ****     return(errorstatus);
1441:sdcard.c      ****   }
1442:sdcard.c      **** 
1443:sdcard.c      ****   if (NumberOfBlocks > 1)
1444:sdcard.c      ****   {
1445:sdcard.c      ****     /* Common to all modes */
1446:sdcard.c      ****     if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
1447:sdcard.c      ****     {
1448:sdcard.c      ****       errorstatus = SD_INVALID_PARAMETER;
1449:sdcard.c      ****       return(errorstatus);
1450:sdcard.c      ****     }
1451:sdcard.c      **** 
1452:sdcard.c      ****     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType
1453:sdcard.c      ****     {
1454:sdcard.c      ****       /* To improve performance */
1455:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
1456:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
1457:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1458:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1459:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1460:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
1461:sdcard.c      **** 
1462:sdcard.c      **** 
1463:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
1464:sdcard.c      **** 
1465:sdcard.c      ****       if (errorstatus != SD_OK)
1466:sdcard.c      ****       {
1467:sdcard.c      ****         return(errorstatus);
1468:sdcard.c      ****       }
1469:sdcard.c      ****       /* To improve performance */
1470:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
1471:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
1472:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1473:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1474:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1475:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
1476:sdcard.c      **** 
1477:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_SET_BLOCK_COUNT);
1478:sdcard.c      **** 
1479:sdcard.c      ****       if (errorstatus != SD_OK)
1480:sdcard.c      ****       {
1481:sdcard.c      ****         return(errorstatus);
1482:sdcard.c      ****       }
1483:sdcard.c      ****     }
1484:sdcard.c      **** 
1485:sdcard.c      ****     /* Send CMD25 WRITE_MULT_BLOCK with argument data address */
1486:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
1487:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
1488:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1489:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1490:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1491:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1492:sdcard.c      **** 
1493:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_WRITE_MULT_BLOCK);
1494:sdcard.c      **** 
1495:sdcard.c      ****     if (SD_OK != errorstatus)
1496:sdcard.c      ****     {
1497:sdcard.c      ****       return(errorstatus);
1498:sdcard.c      ****     }
1499:sdcard.c      **** 
1500:sdcard.c      ****     TotalNumberOfBytes = NumberOfBlocks * BlockSize;
1501:sdcard.c      ****     StopCondition = 1;
1502:sdcard.c      ****     SrcBuffer = writebuff;
1503:sdcard.c      **** 
1504:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
1505:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
1506:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
1507:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
1508:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
1509:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
1510:sdcard.c      ****     SDIO_DataConfig(&SDIO_DataInitStructure);
1511:sdcard.c      **** 
1512:sdcard.c      ****     if (DeviceMode == SD_POLLING_MODE)
1513:sdcard.c      ****     {
1514:sdcard.c      ****       while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG
1515:sdcard.c      ****       {
1516:sdcard.c      ****         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
1517:sdcard.c      ****         {
1518:sdcard.c      ****           if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
1519:sdcard.c      ****           {
1520:sdcard.c      ****             for (count = 0; count < SD_HALFFIFO; count++)
1521:sdcard.c      ****             {
1522:sdcard.c      ****               SDIO_WriteData(*(tempbuff + count));
1523:sdcard.c      ****             }
1524:sdcard.c      ****             tempbuff += SD_HALFFIFO;
1525:sdcard.c      ****             bytestransferred += SD_HALFFIFOBYTES;
1526:sdcard.c      ****           }
1527:sdcard.c      ****           else
1528:sdcard.c      ****           {
1529:sdcard.c      ****             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes -
1530:sdcard.c      ****                         ((TotalNumberOfBytes - bytestransferred) / 4 + 1);
1531:sdcard.c      **** 
1532:sdcard.c      ****             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
1533:sdcard.c      ****             {
1534:sdcard.c      ****               SDIO_WriteData(*tempbuff);
1535:sdcard.c      ****             }
1536:sdcard.c      ****           }
1537:sdcard.c      ****         }
1538:sdcard.c      ****       }
1539:sdcard.c      **** 
1540:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
1541:sdcard.c      ****       {
1542:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
1543:sdcard.c      ****         errorstatus = SD_DATA_TIMEOUT;
1544:sdcard.c      ****         return(errorstatus);
1545:sdcard.c      ****       }
1546:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
1547:sdcard.c      ****       {
1548:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
1549:sdcard.c      ****         errorstatus = SD_DATA_CRC_FAIL;
1550:sdcard.c      ****         return(errorstatus);
1551:sdcard.c      ****       }
1552:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
1553:sdcard.c      ****       {
1554:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
1555:sdcard.c      ****         errorstatus = SD_TX_UNDERRUN;
1556:sdcard.c      ****         return(errorstatus);
1557:sdcard.c      ****       }
1558:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
1559:sdcard.c      ****       {
1560:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
1561:sdcard.c      ****         errorstatus = SD_START_BIT_ERR;
1562:sdcard.c      ****         return(errorstatus);
1563:sdcard.c      ****       }
1564:sdcard.c      **** 
1565:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
1566:sdcard.c      ****       {
1567:sdcard.c      ****        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardT
1568:sdcard.c      ****         {
1569:sdcard.c      ****           /* Send CMD12 STOP_TRANSMISSION */
1570:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Argument = 0x0;
1571:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
1572:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1573:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1574:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1575:sdcard.c      ****           SDIO_SendCommand(&SDIO_CmdInitStructure);
1576:sdcard.c      **** 
1577:sdcard.c      **** 
1578:sdcard.c      ****           errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
1579:sdcard.c      **** 
1580:sdcard.c      ****           if (errorstatus != SD_OK)
1581:sdcard.c      ****           {
1582:sdcard.c      ****             return(errorstatus);
1583:sdcard.c      ****           }
1584:sdcard.c      ****         }
1585:sdcard.c      ****       }
1586:sdcard.c      ****     }
1587:sdcard.c      ****     else if (DeviceMode == SD_INTERRUPT_MODE)
1588:sdcard.c      ****     {
1589:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO
1590:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
1591:sdcard.c      ****       {}
1592:sdcard.c      ****       if (TransferError != SD_OK)
1593:sdcard.c      ****       {
1594:sdcard.c      ****         return(TransferError);
1595:sdcard.c      ****       }
1596:sdcard.c      ****     }
1597:sdcard.c      ****     else if (DeviceMode == SD_DMA_MODE)
1598:sdcard.c      ****     {
1599:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO
1600:sdcard.c      ****       SDIO_DMACmd(ENABLE);
1601:sdcard.c      ****       DMA_TxConfiguration(writebuff, (NumberOfBlocks * BlockSize));
1602:sdcard.c      ****       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
1603:sdcard.c      ****       {}
1604:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
1605:sdcard.c      ****       {}
1606:sdcard.c      ****       if (TransferError != SD_OK)
1607:sdcard.c      ****       {
1608:sdcard.c      ****         return(TransferError);
1609:sdcard.c      ****       }
1610:sdcard.c      ****     }
1611:sdcard.c      ****   }
1612:sdcard.c      ****   /* Clear all the static flags */
1613:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
1614:sdcard.c      **** 
1615:sdcard.c      ****   /* Wait till the card is in programming state */
1616:sdcard.c      ****   errorstatus = IsCardProgramming(&cardstate);
1617:sdcard.c      **** 
1618:sdcard.c      ****   while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_REC
1619:sdcard.c      ****   {
1620:sdcard.c      ****     errorstatus = IsCardProgramming(&cardstate);
1621:sdcard.c      ****   }
1622:sdcard.c      **** 
1623:sdcard.c      ****   return(errorstatus);
1624:sdcard.c      **** }
1625:sdcard.c      **** 
1626:sdcard.c      **** /**
1627:sdcard.c      ****   * @brief  Gets the cuurent data transfer state.
1628:sdcard.c      ****   * @param  None
1629:sdcard.c      ****   * @retval SDTransferState: Data Transfer state.
1630:sdcard.c      ****   *   This value can be: 
1631:sdcard.c      ****   *             - SD_NO_TRANSFER: No data transfer is acting
1632:sdcard.c      ****   *             - SD_TRANSFER_IN_PROGRESS: Data transfer is acting
1633:sdcard.c      ****   */
1634:sdcard.c      **** SDTransferState SD_GetTransferState(void)
1635:sdcard.c      **** {
1636:sdcard.c      ****   if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
1637:sdcard.c      ****   {
1638:sdcard.c      ****     return(SD_TRANSFER_IN_PROGRESS);
1639:sdcard.c      ****   }
1640:sdcard.c      ****   else
1641:sdcard.c      ****   {
1642:sdcard.c      ****     return(SD_NO_TRANSFER);
1643:sdcard.c      ****   }
1644:sdcard.c      **** }
1645:sdcard.c      **** 
1646:sdcard.c      **** /**
1647:sdcard.c      ****   * @brief  Aborts an ongoing data transfer.
1648:sdcard.c      ****   * @param  None
1649:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1650:sdcard.c      ****   */
1651:sdcard.c      **** SD_Error SD_StopTransfer(void)
1652:sdcard.c      **** {
1653:sdcard.c      ****   SD_Error errorstatus = SD_OK;
1654:sdcard.c      **** 
1655:sdcard.c      ****   /* Send CMD12 STOP_TRANSMISSION  */
1656:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
1657:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
1658:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1659:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1660:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1661:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1662:sdcard.c      **** 
1663:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
1664:sdcard.c      **** 
1665:sdcard.c      ****   return(errorstatus);
1666:sdcard.c      **** }
1667:sdcard.c      **** 
1668:sdcard.c      **** /**
1669:sdcard.c      ****   * @brief  Allows to erase memory area specified for the given card.
1670:sdcard.c      ****   * @param  startaddr: the start address.
1671:sdcard.c      ****   * @param  endaddr: the end address.
1672:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1673:sdcard.c      ****   */
1674:sdcard.c      **** SD_Error SD_Erase(uint32_t startaddr, uint32_t endaddr)
1675:sdcard.c      **** {
1676:sdcard.c      ****   SD_Error errorstatus = SD_OK;
1677:sdcard.c      ****   uint32_t delay = 0;
1678:sdcard.c      ****   __IO uint32_t maxdelay = 0;
1679:sdcard.c      ****   uint8_t cardstate = 0;
1680:sdcard.c      **** 
1681:sdcard.c      ****   /* Check if the card coomnd class supports erase command */
1682:sdcard.c      ****   if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
1683:sdcard.c      ****   {
1684:sdcard.c      ****     errorstatus = SD_REQUEST_NOT_APPLICABLE;
1685:sdcard.c      ****     return(errorstatus);
1686:sdcard.c      ****   }
1687:sdcard.c      **** 
1688:sdcard.c      ****   maxdelay = 72000 / ((SDIO->CLKCR & 0xFF) + 2);
1689:sdcard.c      **** 
1690:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
1691:sdcard.c      ****   {
1692:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
1693:sdcard.c      ****     return(errorstatus);
1694:sdcard.c      ****   }
1695:sdcard.c      **** 
1696:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
1697:sdcard.c      ****   {
1698:sdcard.c      ****     startaddr /= 512;
1699:sdcard.c      ****     endaddr /= 512;
1700:sdcard.c      ****   }
1701:sdcard.c      ****   
1702:sdcard.c      ****   /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
1703:sdcard.c      ****   if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) 
1704:sdcard.c      ****   {
1705:sdcard.c      ****     /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
1706:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = startaddr;
1707:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
1708:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1709:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1710:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1711:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1712:sdcard.c      **** 
1713:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_START);
1714:sdcard.c      ****     if (errorstatus != SD_OK)
1715:sdcard.c      ****     {
1716:sdcard.c      ****       return(errorstatus);
1717:sdcard.c      ****     }
1718:sdcard.c      **** 
1719:sdcard.c      ****     /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
1720:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = endaddr;
1721:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
1722:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1723:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1724:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1725:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
1726:sdcard.c      **** 
1727:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_END);
1728:sdcard.c      ****     if (errorstatus != SD_OK)
1729:sdcard.c      ****     {
1730:sdcard.c      ****       return(errorstatus);
1731:sdcard.c      ****     }
1732:sdcard.c      ****   }
1733:sdcard.c      **** 
1734:sdcard.c      ****   /* Send CMD38 ERASE */
1735:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0;
1736:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
1737:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1738:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1739:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1740:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1741:sdcard.c      **** 
1742:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_ERASE);
1743:sdcard.c      **** 
1744:sdcard.c      ****   if (errorstatus != SD_OK)
1745:sdcard.c      ****   {
1746:sdcard.c      ****     return(errorstatus);
1747:sdcard.c      ****   }
1748:sdcard.c      **** 
1749:sdcard.c      ****   for (delay = 0; delay < maxdelay; delay++)
1750:sdcard.c      ****   {}
1751:sdcard.c      **** 
1752:sdcard.c      ****   /* Wait till the card is in programming state */
1753:sdcard.c      ****   errorstatus = IsCardProgramming(&cardstate);
1754:sdcard.c      **** 
1755:sdcard.c      ****   while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == car
1756:sdcard.c      ****   {
1757:sdcard.c      ****     errorstatus = IsCardProgramming(&cardstate);
1758:sdcard.c      ****   }
1759:sdcard.c      **** 
1760:sdcard.c      ****   return(errorstatus);
1761:sdcard.c      **** }
1762:sdcard.c      **** 
1763:sdcard.c      **** /**
1764:sdcard.c      ****   * @brief  Returns the current card's status.
1765:sdcard.c      ****   * @param  pcardstatus: pointer to the buffer that will contain the SD 
1766:sdcard.c      ****   *   card status (Card Status register).
1767:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1768:sdcard.c      ****   */
1769:sdcard.c      **** SD_Error SD_SendStatus(uint32_t *pcardstatus)
1770:sdcard.c      **** {
1771:sdcard.c      ****   SD_Error errorstatus = SD_OK;
1772:sdcard.c      **** 
1773:sdcard.c      ****   if (pcardstatus == NULL)
1774:sdcard.c      ****   {
1775:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
1776:sdcard.c      ****     return(errorstatus);
1777:sdcard.c      ****   }
1778:sdcard.c      **** 
1779:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
1780:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
1781:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1782:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1783:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1784:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1785:sdcard.c      **** 
1786:sdcard.c      **** 
1787:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
1788:sdcard.c      **** 
1789:sdcard.c      ****   if (errorstatus != SD_OK)
1790:sdcard.c      ****   {
1791:sdcard.c      ****     return(errorstatus);
1792:sdcard.c      ****   }
1793:sdcard.c      **** 
1794:sdcard.c      ****   *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
1795:sdcard.c      **** 
1796:sdcard.c      ****   return(errorstatus);
1797:sdcard.c      **** }
1798:sdcard.c      **** 
1799:sdcard.c      **** /**
1800:sdcard.c      ****   * @brief  Returns the current SD card's status.
1801:sdcard.c      ****   * @param  psdstatus: pointer to the buffer that will contain the SD 
1802:sdcard.c      ****   *   card status (SD Status register).
1803:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1804:sdcard.c      ****   */
1805:sdcard.c      **** SD_Error SD_SendSDStatus(uint32_t *psdstatus)
1806:sdcard.c      **** {
1807:sdcard.c      ****   SD_Error errorstatus = SD_OK;
1808:sdcard.c      ****   uint32_t count = 0;
1809:sdcard.c      **** 
1810:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
1811:sdcard.c      ****   {
1812:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
1813:sdcard.c      ****     return(errorstatus);
1814:sdcard.c      ****   }
1815:sdcard.c      **** 
1816:sdcard.c      ****   /* Set block size for card if it is not equal to current block size for card. */
1817:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 64;
1818:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
1819:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1820:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1821:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1822:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1823:sdcard.c      **** 
1824:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
1825:sdcard.c      **** 
1826:sdcard.c      ****   if (errorstatus != SD_OK)
1827:sdcard.c      ****   {
1828:sdcard.c      ****     return(errorstatus);
1829:sdcard.c      ****   }
1830:sdcard.c      **** 
1831:sdcard.c      ****   /* CMD55 */
1832:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
1833:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
1834:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1835:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1836:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1837:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1838:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
1839:sdcard.c      **** 
1840:sdcard.c      ****   if (errorstatus != SD_OK)
1841:sdcard.c      ****   {
1842:sdcard.c      ****     return(errorstatus);
1843:sdcard.c      ****   }
1844:sdcard.c      **** 
1845:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
1846:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 64;
1847:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
1848:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
1849:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
1850:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
1851:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
1852:sdcard.c      **** 
1853:sdcard.c      ****   /* Send ACMD13 SD_APP_STAUS  with argument as card's RCA.*/
1854:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0;
1855:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
1856:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
1857:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
1858:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
1859:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
1860:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
1861:sdcard.c      **** 
1862:sdcard.c      ****   if (errorstatus != SD_OK)
1863:sdcard.c      ****   {
1864:sdcard.c      ****     return(errorstatus);
1865:sdcard.c      ****   }
1866:sdcard.c      **** 
1867:sdcard.c      ****   while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCK
1868:sdcard.c      ****   {
1869:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
1870:sdcard.c      ****     {
1871:sdcard.c      ****       for (count = 0; count < 8; count++)
1872:sdcard.c      ****       {
1873:sdcard.c      ****         *(psdstatus + count) = SDIO_ReadData();
1874:sdcard.c      ****       }
1875:sdcard.c      ****       psdstatus += 8;
1876:sdcard.c      ****     }
1877:sdcard.c      ****   }
1878:sdcard.c      **** 
1879:sdcard.c      ****   if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
1880:sdcard.c      ****   {
1881:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
1882:sdcard.c      ****     errorstatus = SD_DATA_TIMEOUT;
1883:sdcard.c      ****     return(errorstatus);
1884:sdcard.c      ****   }
1885:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
1886:sdcard.c      ****   {
1887:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
1888:sdcard.c      ****     errorstatus = SD_DATA_CRC_FAIL;
1889:sdcard.c      ****     return(errorstatus);
1890:sdcard.c      ****   }
1891:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
1892:sdcard.c      ****   {
1893:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
1894:sdcard.c      ****     errorstatus = SD_RX_OVERRUN;
1895:sdcard.c      ****     return(errorstatus);
1896:sdcard.c      ****   }
1897:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
1898:sdcard.c      ****   {
1899:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_STBITERR);
1900:sdcard.c      ****     errorstatus = SD_START_BIT_ERR;
1901:sdcard.c      ****     return(errorstatus);
1902:sdcard.c      ****   }
1903:sdcard.c      **** 
1904:sdcard.c      ****   while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
1905:sdcard.c      ****   {
1906:sdcard.c      ****     *psdstatus = SDIO_ReadData();
1907:sdcard.c      ****     psdstatus++;
1908:sdcard.c      ****   }
1909:sdcard.c      **** 
1910:sdcard.c      ****   /* Clear all the static status flags*/
1911:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
1912:sdcard.c      ****   psdstatus -= 16;
1913:sdcard.c      ****   for (count = 0; count < 16; count++)
1914:sdcard.c      ****   {
1915:sdcard.c      ****     psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS)
1916:sdcard.c      ****                        ((psdstatus[count] & SD_16TO23BITS) >> 8) |((psdstatus[count] & SD_24TO31BIT
1917:sdcard.c      ****   }
1918:sdcard.c      ****   return(errorstatus);
1919:sdcard.c      **** }
1920:sdcard.c      **** 
1921:sdcard.c      **** /**
1922:sdcard.c      ****   * @brief  Allows to process all the interrupts that are high.
1923:sdcard.c      ****   * @param  None
1924:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
1925:sdcard.c      ****   */
1926:sdcard.c      **** SD_Error SD_ProcessIRQSrc(void)
1927:sdcard.c      **** {
1928:sdcard.c      ****   uint32_t count = 0, restwords = 0;
1929:sdcard.c      **** 
1930:sdcard.c      ****   if (DeviceMode == SD_INTERRUPT_MODE)
1931:sdcard.c      ****   {
1932:sdcard.c      ****     if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
1933:sdcard.c      ****     {
1934:sdcard.c      ****       for (count = 0; count < SD_HALFFIFO; count++)
1935:sdcard.c      ****       {
1936:sdcard.c      ****         *(DestBuffer + count) = SDIO_ReadData();
1937:sdcard.c      ****       }
1938:sdcard.c      ****       DestBuffer += SD_HALFFIFO;
1939:sdcard.c      ****       NumberOfBytes += SD_HALFFIFOBYTES;
1940:sdcard.c      ****     }
1941:sdcard.c      ****     else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
1942:sdcard.c      ****     {
1943:sdcard.c      ****       if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
1944:sdcard.c      ****       {
1945:sdcard.c      ****         restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
1946:sdcard.c      ****                     ((TotalNumberOfBytes - NumberOfBytes) / 4) :
1947:sdcard.c      ****                     ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
1948:sdcard.c      **** 
1949:sdcard.c      ****         for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
1950:sdcard.c      ****         {
1951:sdcard.c      ****           SDIO_WriteData(*SrcBuffer);
1952:sdcard.c      ****         }
1953:sdcard.c      ****       }
1954:sdcard.c      ****       else
1955:sdcard.c      ****       {
1956:sdcard.c      ****         for (count = 0; count < SD_HALFFIFO; count++)
1957:sdcard.c      ****         {
1958:sdcard.c      ****           SDIO_WriteData(*(SrcBuffer + count));
1959:sdcard.c      ****         }
1960:sdcard.c      **** 
1961:sdcard.c      ****         SrcBuffer += SD_HALFFIFO;
1962:sdcard.c      ****         NumberOfBytes += SD_HALFFIFOBYTES;
1963:sdcard.c      ****       }
1964:sdcard.c      ****     }
1965:sdcard.c      ****   }
1966:sdcard.c      **** 
1967:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
1968:sdcard.c      ****   {
1969:sdcard.c      ****     if (DeviceMode != SD_DMA_MODE)
1970:sdcard.c      ****     {
1971:sdcard.c      ****       while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfByt
1972:sdcard.c      ****       {
1973:sdcard.c      ****         *DestBuffer = SDIO_ReadData();
1974:sdcard.c      ****         DestBuffer++;
1975:sdcard.c      ****         NumberOfBytes += 4;
1976:sdcard.c      ****       }
1977:sdcard.c      ****     }
1978:sdcard.c      **** 
1979:sdcard.c      ****     if (StopCondition == 1)
1980:sdcard.c      ****     {
1981:sdcard.c      ****       TransferError = SD_StopTransfer();
1982:sdcard.c      ****     }
1983:sdcard.c      ****     else
1984:sdcard.c      ****     {
1985:sdcard.c      ****       TransferError = SD_OK;
1986:sdcard.c      ****     }
1987:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
1988:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
1989:sdcard.c      ****                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
1990:sdcard.c      ****                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
1991:sdcard.c      ****     TransferEnd = 1;
1992:sdcard.c      ****     NumberOfBytes = 0;
1993:sdcard.c      ****     return(TransferError);
1994:sdcard.c      ****   }
1995:sdcard.c      **** 
1996:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
1997:sdcard.c      ****   {
1998:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
1999:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
2000:sdcard.c      ****                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
2001:sdcard.c      ****                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
2002:sdcard.c      ****     NumberOfBytes = 0;
2003:sdcard.c      ****     TransferError = SD_DATA_CRC_FAIL;
2004:sdcard.c      ****     return(SD_DATA_CRC_FAIL);
2005:sdcard.c      ****   }
2006:sdcard.c      **** 
2007:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
2008:sdcard.c      ****   {
2009:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
2010:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
2011:sdcard.c      ****                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
2012:sdcard.c      ****                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
2013:sdcard.c      ****     NumberOfBytes = 0;
2014:sdcard.c      ****     TransferError = SD_DATA_TIMEOUT;
2015:sdcard.c      ****     return(SD_DATA_TIMEOUT);
2016:sdcard.c      ****   }
2017:sdcard.c      **** 
2018:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
2019:sdcard.c      ****   {
2020:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
2021:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
2022:sdcard.c      ****                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
2023:sdcard.c      ****                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
2024:sdcard.c      ****     NumberOfBytes = 0;
2025:sdcard.c      ****     TransferError = SD_RX_OVERRUN;
2026:sdcard.c      ****     return(SD_RX_OVERRUN);
2027:sdcard.c      ****   }
2028:sdcard.c      **** 
2029:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
2030:sdcard.c      ****   {
2031:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
2032:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
2033:sdcard.c      ****                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
2034:sdcard.c      ****                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
2035:sdcard.c      ****     NumberOfBytes = 0;
2036:sdcard.c      ****     TransferError = SD_TX_UNDERRUN;
2037:sdcard.c      ****     return(SD_TX_UNDERRUN);
2038:sdcard.c      ****   }
2039:sdcard.c      **** 
2040:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
2041:sdcard.c      ****   {
2042:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
2043:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
2044:sdcard.c      ****                   SDIO_IT_TXFIFOHE | SDIO_IT_RXFIFOHF | SDIO_IT_TXUNDERR |
2045:sdcard.c      ****                   SDIO_IT_RXOVERR | SDIO_IT_STBITERR, DISABLE);
2046:sdcard.c      ****     NumberOfBytes = 0;
2047:sdcard.c      ****     TransferError = SD_START_BIT_ERR;
2048:sdcard.c      ****     return(SD_START_BIT_ERR);
2049:sdcard.c      ****   }
2050:sdcard.c      **** 
2051:sdcard.c      ****   return(SD_OK);
2052:sdcard.c      **** }
2053:sdcard.c      **** 
2054:sdcard.c      **** /**
2055:sdcard.c      ****   * @brief  Checks for error conditions for CMD0.
2056:sdcard.c      ****   * @param  None
2057:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2058:sdcard.c      ****   */
2059:sdcard.c      **** static SD_Error CmdError(void)
2060:sdcard.c      **** {
2061:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2062:sdcard.c      ****   uint32_t timeout;
2063:sdcard.c      **** 
2064:sdcard.c      ****   timeout = SDIO_CMD0TIMEOUT; /* 10000 */
2065:sdcard.c      **** 
2066:sdcard.c      ****   while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
2067:sdcard.c      ****   {
2068:sdcard.c      ****     timeout--;
2069:sdcard.c      ****   }
2070:sdcard.c      **** 
2071:sdcard.c      ****   if (timeout == 0)
2072:sdcard.c      ****   {
2073:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2074:sdcard.c      ****     return(errorstatus);
2075:sdcard.c      ****   }
2076:sdcard.c      **** 
2077:sdcard.c      ****   /* Clear all the static flags */
2078:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
2079:sdcard.c      **** 
2080:sdcard.c      ****   return(errorstatus);
2081:sdcard.c      **** }
2082:sdcard.c      **** 
2083:sdcard.c      **** /**
2084:sdcard.c      ****   * @brief  Checks for error conditions for R7.
2085:sdcard.c      ****   *   response.
2086:sdcard.c      ****   * @param  None
2087:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2088:sdcard.c      ****   */
2089:sdcard.c      **** static SD_Error CmdResp7Error(void)
2090:sdcard.c      **** {
2091:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2092:sdcard.c      ****   uint32_t status;
2093:sdcard.c      ****   uint32_t timeout = SDIO_CMD0TIMEOUT;
2094:sdcard.c      **** 
2095:sdcard.c      ****   status = SDIO->STA;
2096:sdcard.c      **** 
2097:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0)
2098:sdcard.c      ****   {
2099:sdcard.c      ****     timeout--;
2100:sdcard.c      ****     status = SDIO->STA;
2101:sdcard.c      ****   }
2102:sdcard.c      **** 
2103:sdcard.c      ****   if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
2104:sdcard.c      ****   {
2105:sdcard.c      ****     /* Card is not V2.0 complient or card does not support the set voltage range */
2106:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2107:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
2108:sdcard.c      ****     return(errorstatus);
2109:sdcard.c      ****   }
2110:sdcard.c      **** 
2111:sdcard.c      ****   if (status & SDIO_FLAG_CMDREND)
2112:sdcard.c      ****   {
2113:sdcard.c      ****     /* Card is SD V2.0 compliant */
2114:sdcard.c      ****     errorstatus = SD_OK;
2115:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CMDREND);
2116:sdcard.c      ****     return(errorstatus);
2117:sdcard.c      ****   }
2118:sdcard.c      ****   return(errorstatus);
2119:sdcard.c      **** }
2120:sdcard.c      **** 
2121:sdcard.c      **** /**
2122:sdcard.c      ****   * @brief  Checks for error conditions for R1.
2123:sdcard.c      ****   *   response
2124:sdcard.c      ****   * @param  cmd: The sent command index.
2125:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2126:sdcard.c      ****   */
2127:sdcard.c      **** static SD_Error CmdResp1Error(uint8_t cmd)
2128:sdcard.c      **** {
2129:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2130:sdcard.c      ****   uint32_t status;
2131:sdcard.c      ****   uint32_t response_r1;
2132:sdcard.c      **** 
2133:sdcard.c      ****   status = SDIO->STA;
2134:sdcard.c      **** 
2135:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
2136:sdcard.c      ****   {
2137:sdcard.c      ****     status = SDIO->STA;
2138:sdcard.c      ****   }
2139:sdcard.c      **** 
2140:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
2141:sdcard.c      ****   {
2142:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2143:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
2144:sdcard.c      ****     return(errorstatus);
2145:sdcard.c      ****   }
2146:sdcard.c      ****   else if (status & SDIO_FLAG_CCRCFAIL)
2147:sdcard.c      ****   {
2148:sdcard.c      ****     errorstatus = SD_CMD_CRC_FAIL;
2149:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
2150:sdcard.c      ****     return(errorstatus);
2151:sdcard.c      ****   }
2152:sdcard.c      **** 
2153:sdcard.c      ****   /* Check response received is of desired command */
2154:sdcard.c      ****   if (SDIO_GetCommandResponse() != cmd)
2155:sdcard.c      ****   {
2156:sdcard.c      ****     errorstatus = SD_ILLEGAL_CMD;
2157:sdcard.c      ****     return(errorstatus);
2158:sdcard.c      ****   }
2159:sdcard.c      **** 
2160:sdcard.c      ****   /* Clear all the static flags */
2161:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
2162:sdcard.c      **** 
2163:sdcard.c      ****   /* We have received response, retrieve it for analysis  */
2164:sdcard.c      ****   response_r1 = SDIO_GetResponse(SDIO_RESP1);
2165:sdcard.c      **** 
2166:sdcard.c      ****   if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
2167:sdcard.c      ****   {
2168:sdcard.c      ****     return(errorstatus);
2169:sdcard.c      ****   }
2170:sdcard.c      **** 
2171:sdcard.c      ****   if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
2172:sdcard.c      ****   {
2173:sdcard.c      ****     return(SD_ADDR_OUT_OF_RANGE);
2174:sdcard.c      ****   }
2175:sdcard.c      **** 
2176:sdcard.c      ****   if (response_r1 & SD_OCR_ADDR_MISALIGNED)
2177:sdcard.c      ****   {
2178:sdcard.c      ****     return(SD_ADDR_MISALIGNED);
2179:sdcard.c      ****   }
2180:sdcard.c      **** 
2181:sdcard.c      ****   if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
2182:sdcard.c      ****   {
2183:sdcard.c      ****     return(SD_BLOCK_LEN_ERR);
2184:sdcard.c      ****   }
2185:sdcard.c      **** 
2186:sdcard.c      ****   if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
2187:sdcard.c      ****   {
2188:sdcard.c      ****     return(SD_ERASE_SEQ_ERR);
2189:sdcard.c      ****   }
2190:sdcard.c      **** 
2191:sdcard.c      ****   if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
2192:sdcard.c      ****   {
2193:sdcard.c      ****     return(SD_BAD_ERASE_PARAM);
2194:sdcard.c      ****   }
2195:sdcard.c      **** 
2196:sdcard.c      ****   if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
2197:sdcard.c      ****   {
2198:sdcard.c      ****     return(SD_WRITE_PROT_VIOLATION);
2199:sdcard.c      ****   }
2200:sdcard.c      **** 
2201:sdcard.c      ****   if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
2202:sdcard.c      ****   {
2203:sdcard.c      ****     return(SD_LOCK_UNLOCK_FAILED);
2204:sdcard.c      ****   }
2205:sdcard.c      **** 
2206:sdcard.c      ****   if (response_r1 & SD_OCR_COM_CRC_FAILED)
2207:sdcard.c      ****   {
2208:sdcard.c      ****     return(SD_COM_CRC_FAILED);
2209:sdcard.c      ****   }
2210:sdcard.c      **** 
2211:sdcard.c      ****   if (response_r1 & SD_OCR_ILLEGAL_CMD)
2212:sdcard.c      ****   {
2213:sdcard.c      ****     return(SD_ILLEGAL_CMD);
2214:sdcard.c      ****   }
2215:sdcard.c      **** 
2216:sdcard.c      ****   if (response_r1 & SD_OCR_CARD_ECC_FAILED)
2217:sdcard.c      ****   {
2218:sdcard.c      ****     return(SD_CARD_ECC_FAILED);
2219:sdcard.c      ****   }
2220:sdcard.c      **** 
2221:sdcard.c      ****   if (response_r1 & SD_OCR_CC_ERROR)
2222:sdcard.c      ****   {
2223:sdcard.c      ****     return(SD_CC_ERROR);
2224:sdcard.c      ****   }
2225:sdcard.c      **** 
2226:sdcard.c      ****   if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
2227:sdcard.c      ****   {
2228:sdcard.c      ****     return(SD_GENERAL_UNKNOWN_ERROR);
2229:sdcard.c      ****   }
2230:sdcard.c      **** 
2231:sdcard.c      ****   if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
2232:sdcard.c      ****   {
2233:sdcard.c      ****     return(SD_STREAM_READ_UNDERRUN);
2234:sdcard.c      ****   }
2235:sdcard.c      **** 
2236:sdcard.c      ****   if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
2237:sdcard.c      ****   {
2238:sdcard.c      ****     return(SD_STREAM_WRITE_OVERRUN);
2239:sdcard.c      ****   }
2240:sdcard.c      **** 
2241:sdcard.c      ****   if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
2242:sdcard.c      ****   {
2243:sdcard.c      ****     return(SD_CID_CSD_OVERWRITE);
2244:sdcard.c      ****   }
2245:sdcard.c      **** 
2246:sdcard.c      ****   if (response_r1 & SD_OCR_WP_ERASE_SKIP)
2247:sdcard.c      ****   {
2248:sdcard.c      ****     return(SD_WP_ERASE_SKIP);
2249:sdcard.c      ****   }
2250:sdcard.c      **** 
2251:sdcard.c      ****   if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
2252:sdcard.c      ****   {
2253:sdcard.c      ****     return(SD_CARD_ECC_DISABLED);
2254:sdcard.c      ****   }
2255:sdcard.c      **** 
2256:sdcard.c      ****   if (response_r1 & SD_OCR_ERASE_RESET)
2257:sdcard.c      ****   {
2258:sdcard.c      ****     return(SD_ERASE_RESET);
2259:sdcard.c      ****   }
2260:sdcard.c      **** 
2261:sdcard.c      ****   if (response_r1 & SD_OCR_AKE_SEQ_ERROR)
2262:sdcard.c      ****   {
2263:sdcard.c      ****     return(SD_AKE_SEQ_ERROR);
2264:sdcard.c      ****   }
2265:sdcard.c      ****   return(errorstatus);
2266:sdcard.c      **** }
2267:sdcard.c      **** 
2268:sdcard.c      **** /**
2269:sdcard.c      ****   * @brief  Checks for error conditions for R3 (OCR).
2270:sdcard.c      ****   *   response.
2271:sdcard.c      ****   * @param  None
2272:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2273:sdcard.c      ****   */
2274:sdcard.c      **** static SD_Error CmdResp3Error(void)
2275:sdcard.c      **** {
2276:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2277:sdcard.c      ****   uint32_t status;
2278:sdcard.c      **** 
2279:sdcard.c      ****   status = SDIO->STA;
2280:sdcard.c      **** 
2281:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
2282:sdcard.c      ****   {
2283:sdcard.c      ****     status = SDIO->STA;
2284:sdcard.c      ****   }
2285:sdcard.c      **** 
2286:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
2287:sdcard.c      ****   {
2288:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2289:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
2290:sdcard.c      ****     return(errorstatus);
2291:sdcard.c      ****   }
2292:sdcard.c      ****   /* Clear all the static flags */
2293:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
2294:sdcard.c      ****   return(errorstatus);
2295:sdcard.c      **** }
2296:sdcard.c      **** 
2297:sdcard.c      **** /**
2298:sdcard.c      ****   * @brief  Checks for error conditions for R2 (CID or CSD).
2299:sdcard.c      ****   *   response.
2300:sdcard.c      ****   * @param  None
2301:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2302:sdcard.c      ****   */
2303:sdcard.c      **** static SD_Error CmdResp2Error(void)
2304:sdcard.c      **** {
 19509              		.loc 1 2304 0
 19510              		.cfi_startproc
 19511              		@ args = 0, pretend = 0, frame = 0
 19512              		@ frame_needed = 0, uses_anonymous_args = 0
 19513              	.LVL0:
 19514 0000 08B5     		push	{r3, lr}
 19515              	.LCFI0:
 19516              		.cfi_def_cfa_offset 8
 19517              		.cfi_offset 14, -4
 19518              		.cfi_offset 3, -8
2305:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2306:sdcard.c      ****   uint32_t status;
2307:sdcard.c      **** 
2308:sdcard.c      ****   status = SDIO->STA;
 19519              		.loc 1 2308 0
 19520 0002 0C4B     		ldr	r3, .L7
 19521              	.L3:
2309:sdcard.c      **** 
2310:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
2311:sdcard.c      ****   {
2312:sdcard.c      ****     status = SDIO->STA;
 19522              		.loc 1 2312 0
 19523 0004 5A6B     		ldr	r2, [r3, #52]
 19524              	.LVL1:
2310:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 19525              		.loc 1 2310 0
 19526 0006 12F0450F 		tst	r2, #69
 19527 000a FBD0     		beq	.L3
2313:sdcard.c      ****   }
2314:sdcard.c      **** 
2315:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
 19528              		.loc 1 2315 0
 19529 000c 12F0040F 		tst	r2, #4
 19530 0010 094B     		ldr	r3, .L7+4
 19531 0012 03D0     		beq	.L4
 19532              	.LVL2:
2316:sdcard.c      ****   {
2317:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2318:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 19533              		.loc 1 2318 0
 19534 0014 0420     		movs	r0, #4
 19535 0016 9847     		blx	r3
 19536              	.LVL3:
2319:sdcard.c      ****     return(errorstatus);
 19537              		.loc 1 2319 0
 19538 0018 0320     		movs	r0, #3
 19539 001a 08BD     		pop	{r3, pc}
 19540              	.LVL4:
 19541              	.L4:
2320:sdcard.c      ****   }
2321:sdcard.c      ****   else if (status & SDIO_FLAG_CCRCFAIL)
 19542              		.loc 1 2321 0
 19543 001c D207     		lsls	r2, r2, #31
 19544              	.LVL5:
 19545 001e 03D5     		bpl	.L6
 19546              	.LVL6:
2322:sdcard.c      ****   {
2323:sdcard.c      ****     errorstatus = SD_CMD_CRC_FAIL;
2324:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 19547              		.loc 1 2324 0
 19548 0020 0120     		movs	r0, #1
 19549 0022 9847     		blx	r3
2325:sdcard.c      ****     return(errorstatus);
 19550              		.loc 1 2325 0
 19551 0024 0120     		movs	r0, #1
 19552 0026 08BD     		pop	{r3, pc}
 19553              	.LVL7:
 19554              	.L6:
2326:sdcard.c      ****   }
2327:sdcard.c      **** 
2328:sdcard.c      ****   /* Clear all the static flags */
2329:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 19555              		.loc 1 2329 0
 19556 0028 40F2FF50 		movw	r0, #1535
 19557 002c 9847     		blx	r3
2330:sdcard.c      **** 
2331:sdcard.c      ****   return(errorstatus);
 19558              		.loc 1 2331 0
 19559 002e 2A20     		movs	r0, #42
2332:sdcard.c      **** }
 19560              		.loc 1 2332 0
 19561 0030 08BD     		pop	{r3, pc}
 19562              	.L8:
 19563 0032 00BF     		.align	2
 19564              	.L7:
 19565 0034 00800140 		.word	1073840128
 19566 0038 00000000 		.word	SDIO_ClearFlag
 19567              		.cfi_endproc
 19568              	.LFE51:
 19570              		.section	.text.IsCardProgramming,"ax",%progbits
 19571              		.align	1
 19572              		.thumb
 19573              		.thumb_func
 19575              	IsCardProgramming:
 19576              	.LFB54:
2333:sdcard.c      **** 
2334:sdcard.c      **** /**
2335:sdcard.c      ****   * @brief  Checks for error conditions for R6 (RCA).
2336:sdcard.c      ****   *   response.
2337:sdcard.c      ****   * @param  cmd: The sent command index.
2338:sdcard.c      ****   * @param  prca: pointer to the variable that will contain the SD
2339:sdcard.c      ****   *   card relative address RCA. 
2340:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2341:sdcard.c      ****   */
2342:sdcard.c      **** static SD_Error CmdResp6Error(uint8_t cmd, uint16_t *prca)
2343:sdcard.c      **** {
2344:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2345:sdcard.c      ****   uint32_t status;
2346:sdcard.c      ****   uint32_t response_r1;
2347:sdcard.c      **** 
2348:sdcard.c      ****   status = SDIO->STA;
2349:sdcard.c      **** 
2350:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
2351:sdcard.c      ****   {
2352:sdcard.c      ****     status = SDIO->STA;
2353:sdcard.c      ****   }
2354:sdcard.c      **** 
2355:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
2356:sdcard.c      ****   {
2357:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2358:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
2359:sdcard.c      ****     return(errorstatus);
2360:sdcard.c      ****   }
2361:sdcard.c      ****   else if (status & SDIO_FLAG_CCRCFAIL)
2362:sdcard.c      ****   {
2363:sdcard.c      ****     errorstatus = SD_CMD_CRC_FAIL;
2364:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
2365:sdcard.c      ****     return(errorstatus);
2366:sdcard.c      ****   }
2367:sdcard.c      **** 
2368:sdcard.c      ****   /* Check response received is of desired command */
2369:sdcard.c      ****   if (SDIO_GetCommandResponse() != cmd)
2370:sdcard.c      ****   {
2371:sdcard.c      ****     errorstatus = SD_ILLEGAL_CMD;
2372:sdcard.c      ****     return(errorstatus);
2373:sdcard.c      ****   }
2374:sdcard.c      **** 
2375:sdcard.c      ****   /* Clear all the static flags */
2376:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
2377:sdcard.c      **** 
2378:sdcard.c      ****   /* We have received response, retrieve it.  */
2379:sdcard.c      ****   response_r1 = SDIO_GetResponse(SDIO_RESP1);
2380:sdcard.c      **** 
2381:sdcard.c      ****   if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC
2382:sdcard.c      ****   {
2383:sdcard.c      ****     *prca = (uint16_t) (response_r1 >> 16);
2384:sdcard.c      ****     return(errorstatus);
2385:sdcard.c      ****   }
2386:sdcard.c      **** 
2387:sdcard.c      ****   if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
2388:sdcard.c      ****   {
2389:sdcard.c      ****     return(SD_GENERAL_UNKNOWN_ERROR);
2390:sdcard.c      ****   }
2391:sdcard.c      **** 
2392:sdcard.c      ****   if (response_r1 & SD_R6_ILLEGAL_CMD)
2393:sdcard.c      ****   {
2394:sdcard.c      ****     return(SD_ILLEGAL_CMD);
2395:sdcard.c      ****   }
2396:sdcard.c      **** 
2397:sdcard.c      ****   if (response_r1 & SD_R6_COM_CRC_FAILED)
2398:sdcard.c      ****   {
2399:sdcard.c      ****     return(SD_COM_CRC_FAILED);
2400:sdcard.c      ****   }
2401:sdcard.c      **** 
2402:sdcard.c      ****   return(errorstatus);
2403:sdcard.c      **** }
2404:sdcard.c      **** 
2405:sdcard.c      **** /**
2406:sdcard.c      ****   * @brief  Enables or disables the SDIO wide bus mode.
2407:sdcard.c      ****   * @param  NewState: new state of the SDIO wide bus mode.
2408:sdcard.c      ****   *   This parameter can be: ENABLE or DISABLE.
2409:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2410:sdcard.c      ****   */
2411:sdcard.c      **** static SD_Error SDEnWideBus(FunctionalState NewState)
2412:sdcard.c      **** {
2413:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2414:sdcard.c      **** 
2415:sdcard.c      ****   uint32_t scr[2] = {0, 0};
2416:sdcard.c      **** 
2417:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
2418:sdcard.c      ****   {
2419:sdcard.c      ****     errorstatus = SD_LOCK_UNLOCK_FAILED;
2420:sdcard.c      ****     return(errorstatus);
2421:sdcard.c      ****   }
2422:sdcard.c      **** 
2423:sdcard.c      ****   /* Get SCR Register */
2424:sdcard.c      ****   errorstatus = FindSCR(RCA, scr);
2425:sdcard.c      **** 
2426:sdcard.c      ****   if (errorstatus != SD_OK)
2427:sdcard.c      ****   {
2428:sdcard.c      ****     return(errorstatus);
2429:sdcard.c      ****   }
2430:sdcard.c      **** 
2431:sdcard.c      ****   /* If wide bus operation to be enabled */
2432:sdcard.c      ****   if (NewState == ENABLE)
2433:sdcard.c      ****   {
2434:sdcard.c      ****     /* If requested card supports wide bus operation */
2435:sdcard.c      ****     if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
2436:sdcard.c      ****     {
2437:sdcard.c      ****       /* Send CMD55 APP_CMD with argument as card's RCA.*/
2438:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
2439:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
2440:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2441:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2442:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2443:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
2444:sdcard.c      **** 
2445:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
2446:sdcard.c      **** 
2447:sdcard.c      ****       if (errorstatus != SD_OK)
2448:sdcard.c      ****       {
2449:sdcard.c      ****         return(errorstatus);
2450:sdcard.c      ****       }
2451:sdcard.c      **** 
2452:sdcard.c      ****       /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
2453:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x2;
2454:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
2455:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2456:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2457:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2458:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
2459:sdcard.c      **** 
2460:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
2461:sdcard.c      **** 
2462:sdcard.c      ****       if (errorstatus != SD_OK)
2463:sdcard.c      ****       {
2464:sdcard.c      ****         return(errorstatus);
2465:sdcard.c      ****       }
2466:sdcard.c      ****       return(errorstatus);
2467:sdcard.c      ****     }
2468:sdcard.c      ****     else
2469:sdcard.c      ****     {
2470:sdcard.c      ****       errorstatus = SD_REQUEST_NOT_APPLICABLE;
2471:sdcard.c      ****       return(errorstatus);
2472:sdcard.c      ****     }
2473:sdcard.c      ****   }   /* If wide bus operation to be disabled */
2474:sdcard.c      ****   else
2475:sdcard.c      ****   {
2476:sdcard.c      ****     /* If requested card supports 1 bit mode operation */
2477:sdcard.c      ****     if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
2478:sdcard.c      ****     {
2479:sdcard.c      ****       /* Send CMD55 APP_CMD with argument as card's RCA.*/
2480:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
2481:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
2482:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2483:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2484:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2485:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
2486:sdcard.c      **** 
2487:sdcard.c      **** 
2488:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
2489:sdcard.c      **** 
2490:sdcard.c      ****       if (errorstatus != SD_OK)
2491:sdcard.c      ****       {
2492:sdcard.c      ****         return(errorstatus);
2493:sdcard.c      ****       }
2494:sdcard.c      **** 
2495:sdcard.c      ****       /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
2496:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x00;
2497:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
2498:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2499:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2500:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2501:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
2502:sdcard.c      **** 
2503:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
2504:sdcard.c      **** 
2505:sdcard.c      ****       if (errorstatus != SD_OK)
2506:sdcard.c      ****       {
2507:sdcard.c      ****         return(errorstatus);
2508:sdcard.c      ****       }
2509:sdcard.c      **** 
2510:sdcard.c      ****       return(errorstatus);
2511:sdcard.c      ****     }
2512:sdcard.c      ****     else
2513:sdcard.c      ****     {
2514:sdcard.c      ****       errorstatus = SD_REQUEST_NOT_APPLICABLE;
2515:sdcard.c      ****       return(errorstatus);
2516:sdcard.c      ****     }
2517:sdcard.c      ****   }
2518:sdcard.c      **** }
2519:sdcard.c      **** 
2520:sdcard.c      **** /**
2521:sdcard.c      ****   * @brief  Checks if the SD card is in programming state.
2522:sdcard.c      ****   * @param  pstatus: pointer to the variable that will contain the SD
2523:sdcard.c      ****   *   card state.
2524:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2525:sdcard.c      ****   */
2526:sdcard.c      **** static SD_Error IsCardProgramming(uint8_t *pstatus)
2527:sdcard.c      **** {
 19577              		.loc 1 2527 0
 19578              		.cfi_startproc
 19579              		@ args = 0, pretend = 0, frame = 8
 19580              		@ frame_needed = 0, uses_anonymous_args = 0
 19581              	.LVL8:
 19582 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 19583              	.LCFI1:
 19584              		.cfi_def_cfa_offset 24
 19585              		.cfi_offset 14, -4
 19586              		.cfi_offset 5, -8
 19587              		.cfi_offset 4, -12
 19588              		.cfi_offset 2, -16
 19589              		.cfi_offset 1, -20
 19590              		.cfi_offset 0, -24
2528:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2529:sdcard.c      ****   __IO uint32_t respR1 = 0, status = 0;
2530:sdcard.c      **** 
2531:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 19591              		.loc 1 2531 0
 19592 0002 4E4A     		ldr	r2, .L36
2527:sdcard.c      **** {
 19593              		.loc 1 2527 0
 19594 0004 0446     		mov	r4, r0
 19595              		.loc 1 2531 0
 19596 0006 1168     		ldr	r1, [r2, #0]
 19597 0008 4D48     		ldr	r0, .L36+4
 19598              	.LVL9:
 19599 000a 0A04     		lsls	r2, r1, #16
2532:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 19600              		.loc 1 2532 0
 19601 000c 0D21     		movs	r1, #13
2529:sdcard.c      ****   __IO uint32_t respR1 = 0, status = 0;
 19602              		.loc 1 2529 0
 19603 000e 0023     		movs	r3, #0
2531:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 19604              		.loc 1 2531 0
 19605 0010 0260     		str	r2, [r0, #0]
 19606              		.loc 1 2532 0
 19607 0012 4160     		str	r1, [r0, #4]
2533:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 19608              		.loc 1 2533 0
 19609 0014 4022     		movs	r2, #64
2534:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2535:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 19610              		.loc 1 2535 0
 19611 0016 4FF48061 		mov	r1, #1024
2529:sdcard.c      ****   __IO uint32_t respR1 = 0, status = 0;
 19612              		.loc 1 2529 0
 19613 001a 0093     		str	r3, [sp, #0]
 19614              	.LVL10:
2534:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 19615              		.loc 1 2534 0
 19616 001c C360     		str	r3, [r0, #12]
2529:sdcard.c      ****   __IO uint32_t respR1 = 0, status = 0;
 19617              		.loc 1 2529 0
 19618 001e 0193     		str	r3, [sp, #4]
 19619              	.LVL11:
2533:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 19620              		.loc 1 2533 0
 19621 0020 8260     		str	r2, [r0, #8]
2536:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 19622              		.loc 1 2536 0
 19623 0022 484B     		ldr	r3, .L36+8
2535:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 19624              		.loc 1 2535 0
 19625 0024 0161     		str	r1, [r0, #16]
 19626              		.loc 1 2536 0
 19627 0026 9847     		blx	r3
2537:sdcard.c      **** 
2538:sdcard.c      ****   status = SDIO->STA;
 19628              		.loc 1 2538 0
 19629 0028 474B     		ldr	r3, .L36+12
 19630              	.L11:
2539:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
2540:sdcard.c      ****   {
2541:sdcard.c      ****     status = SDIO->STA;
 19631              		.loc 1 2541 0
 19632 002a 596B     		ldr	r1, [r3, #52]
 19633 002c 0191     		str	r1, [sp, #4]
2539:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 19634              		.loc 1 2539 0
 19635 002e 0198     		ldr	r0, [sp, #4]
 19636 0030 10F0450F 		tst	r0, #69
 19637 0034 F9D0     		beq	.L11
2542:sdcard.c      ****   }
2543:sdcard.c      **** 
2544:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
 19638              		.loc 1 2544 0
 19639 0036 019B     		ldr	r3, [sp, #4]
 19640 0038 5807     		lsls	r0, r3, #29
 19641 003a 04D5     		bpl	.L12
 19642              	.LVL12:
2545:sdcard.c      ****   {
2546:sdcard.c      ****     errorstatus = SD_CMD_RSP_TIMEOUT;
2547:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 19643              		.loc 1 2547 0
 19644 003c 0420     		movs	r0, #4
 19645 003e 434A     		ldr	r2, .L36+16
 19646 0040 9047     		blx	r2
2548:sdcard.c      ****     return(errorstatus);
 19647              		.loc 1 2548 0
 19648 0042 0320     		movs	r0, #3
 19649 0044 78E0     		b	.L13
 19650              	.LVL13:
 19651              	.L12:
2549:sdcard.c      ****   }
2550:sdcard.c      ****   else if (status & SDIO_FLAG_CCRCFAIL)
 19652              		.loc 1 2550 0
 19653 0046 019D     		ldr	r5, [sp, #4]
 19654 0048 15F00105 		ands	r5, r5, #1
 19655 004c 04D0     		beq	.L14
 19656              	.LVL14:
2551:sdcard.c      ****   {
2552:sdcard.c      ****     errorstatus = SD_CMD_CRC_FAIL;
2553:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 19657              		.loc 1 2553 0
 19658 004e 0120     		movs	r0, #1
 19659 0050 3E49     		ldr	r1, .L36+16
 19660 0052 8847     		blx	r1
2554:sdcard.c      ****     return(errorstatus);
 19661              		.loc 1 2554 0
 19662 0054 0120     		movs	r0, #1
 19663 0056 6FE0     		b	.L13
 19664              	.LVL15:
 19665              	.L14:
2555:sdcard.c      ****   }
2556:sdcard.c      **** 
2557:sdcard.c      ****   status = (uint32_t)SDIO_GetCommandResponse();
 19666              		.loc 1 2557 0
 19667 0058 3D4B     		ldr	r3, .L36+20
 19668 005a 9847     		blx	r3
 19669 005c 0190     		str	r0, [sp, #4]
2558:sdcard.c      **** 
2559:sdcard.c      ****   /* Check response received is of desired command */
2560:sdcard.c      ****   if (status != SDIO_SEND_STATUS)
 19670              		.loc 1 2560 0
 19671 005e 0198     		ldr	r0, [sp, #4]
 19672 0060 0D28     		cmp	r0, #13
 19673 0062 60D1     		bne	.L25
2561:sdcard.c      ****   {
2562:sdcard.c      ****     errorstatus = SD_ILLEGAL_CMD;
2563:sdcard.c      ****     return(errorstatus);
2564:sdcard.c      ****   }
2565:sdcard.c      **** 
2566:sdcard.c      ****   /* Clear all the static flags */
2567:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 19674              		.loc 1 2567 0
 19675 0064 3949     		ldr	r1, .L36+16
 19676 0066 40F2FF50 		movw	r0, #1535
 19677 006a 8847     		blx	r1
2568:sdcard.c      **** 
2569:sdcard.c      **** 
2570:sdcard.c      ****   /* We have received response, retrieve it for analysis  */
2571:sdcard.c      ****   respR1 = SDIO_GetResponse(SDIO_RESP1);
 19678              		.loc 1 2571 0
 19679 006c 394A     		ldr	r2, .L36+24
 19680 006e 2846     		mov	r0, r5
 19681 0070 9047     		blx	r2
 19682 0072 0090     		str	r0, [sp, #0]
2572:sdcard.c      **** 
2573:sdcard.c      ****   /* Find out card status */
2574:sdcard.c      ****   *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
 19683              		.loc 1 2574 0
 19684 0074 009B     		ldr	r3, [sp, #0]
2575:sdcard.c      **** 
2576:sdcard.c      ****   if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 19685              		.loc 1 2576 0
 19686 0076 3849     		ldr	r1, .L36+28
 19687 0078 0098     		ldr	r0, [sp, #0]
2574:sdcard.c      ****   *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
 19688              		.loc 1 2574 0
 19689 007a C3F3432C 		ubfx	ip, r3, #9, #4
 19690              		.loc 1 2576 0
 19691 007e 00EA0102 		and	r2, r0, r1
2574:sdcard.c      ****   *pstatus = (uint8_t) ((respR1 >> 9) & 0x0000000F);
 19692              		.loc 1 2574 0
 19693 0082 84F800C0 		strb	ip, [r4, #0]
2577:sdcard.c      ****   {
2578:sdcard.c      ****     return(errorstatus);
 19694              		.loc 1 2578 0
 19695 0086 2A20     		movs	r0, #42
2576:sdcard.c      ****   if ((respR1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 19696              		.loc 1 2576 0
 19697 0088 002A     		cmp	r2, #0
 19698 008a 55D0     		beq	.L13
2579:sdcard.c      ****   }
2580:sdcard.c      **** 
2581:sdcard.c      ****   if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
 19699              		.loc 1 2581 0
 19700 008c 009B     		ldr	r3, [sp, #0]
2582:sdcard.c      ****   {
2583:sdcard.c      ****     return(SD_ADDR_OUT_OF_RANGE);
 19701              		.loc 1 2583 0
 19702 008e 1C20     		movs	r0, #28
2581:sdcard.c      ****   if (respR1 & SD_OCR_ADDR_OUT_OF_RANGE)
 19703              		.loc 1 2581 0
 19704 0090 002B     		cmp	r3, #0
 19705 0092 51DB     		blt	.L13
2584:sdcard.c      ****   }
2585:sdcard.c      **** 
2586:sdcard.c      ****   if (respR1 & SD_OCR_ADDR_MISALIGNED)
 19706              		.loc 1 2586 0
 19707 0094 009A     		ldr	r2, [sp, #0]
2587:sdcard.c      ****   {
2588:sdcard.c      ****     return(SD_ADDR_MISALIGNED);
 19708              		.loc 1 2588 0
 19709 0096 0920     		movs	r0, #9
2586:sdcard.c      ****   if (respR1 & SD_OCR_ADDR_MISALIGNED)
 19710              		.loc 1 2586 0
 19711 0098 5100     		lsls	r1, r2, #1
 19712 009a 4DD4     		bmi	.L13
2589:sdcard.c      ****   }
2590:sdcard.c      **** 
2591:sdcard.c      ****   if (respR1 & SD_OCR_BLOCK_LEN_ERR)
 19713              		.loc 1 2591 0
 19714 009c 0099     		ldr	r1, [sp, #0]
2592:sdcard.c      ****   {
2593:sdcard.c      ****     return(SD_BLOCK_LEN_ERR);
 19715              		.loc 1 2593 0
 19716 009e 0A20     		movs	r0, #10
2591:sdcard.c      ****   if (respR1 & SD_OCR_BLOCK_LEN_ERR)
 19717              		.loc 1 2591 0
 19718 00a0 8A00     		lsls	r2, r1, #2
 19719 00a2 49D4     		bmi	.L13
2594:sdcard.c      ****   }
2595:sdcard.c      **** 
2596:sdcard.c      ****   if (respR1 & SD_OCR_ERASE_SEQ_ERR)
 19720              		.loc 1 2596 0
 19721 00a4 0098     		ldr	r0, [sp, #0]
 19722 00a6 C300     		lsls	r3, r0, #3
 19723 00a8 37D4     		bmi	.L20
2597:sdcard.c      ****   {
2598:sdcard.c      ****     return(SD_ERASE_SEQ_ERR);
2599:sdcard.c      ****   }
2600:sdcard.c      **** 
2601:sdcard.c      ****   if (respR1 & SD_OCR_BAD_ERASE_PARAM)
 19724              		.loc 1 2601 0
 19725 00aa 009B     		ldr	r3, [sp, #0]
 19726 00ac 1801     		lsls	r0, r3, #4
 19727 00ae 36D4     		bmi	.L21
2602:sdcard.c      ****   {
2603:sdcard.c      ****     return(SD_BAD_ERASE_PARAM);
2604:sdcard.c      ****   }
2605:sdcard.c      **** 
2606:sdcard.c      ****   if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
 19728              		.loc 1 2606 0
 19729 00b0 009A     		ldr	r2, [sp, #0]
2607:sdcard.c      ****   {
2608:sdcard.c      ****     return(SD_WRITE_PROT_VIOLATION);
 19730              		.loc 1 2608 0
 19731 00b2 0D20     		movs	r0, #13
2606:sdcard.c      ****   if (respR1 & SD_OCR_WRITE_PROT_VIOLATION)
 19732              		.loc 1 2606 0
 19733 00b4 5101     		lsls	r1, r2, #5
 19734 00b6 3FD4     		bmi	.L13
2609:sdcard.c      ****   }
2610:sdcard.c      **** 
2611:sdcard.c      ****   if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
 19735              		.loc 1 2611 0
 19736 00b8 0099     		ldr	r1, [sp, #0]
2612:sdcard.c      ****   {
2613:sdcard.c      ****     return(SD_LOCK_UNLOCK_FAILED);
 19737              		.loc 1 2613 0
 19738 00ba 0E20     		movs	r0, #14
2611:sdcard.c      ****   if (respR1 & SD_OCR_LOCK_UNLOCK_FAILED)
 19739              		.loc 1 2611 0
 19740 00bc CA01     		lsls	r2, r1, #7
 19741 00be 3BD4     		bmi	.L13
2614:sdcard.c      ****   }
2615:sdcard.c      **** 
2616:sdcard.c      ****   if (respR1 & SD_OCR_COM_CRC_FAILED)
 19742              		.loc 1 2616 0
 19743 00c0 0098     		ldr	r0, [sp, #0]
 19744 00c2 0302     		lsls	r3, r0, #8
 19745 00c4 2DD4     		bmi	.L24
2617:sdcard.c      ****   {
2618:sdcard.c      ****     return(SD_COM_CRC_FAILED);
2619:sdcard.c      ****   }
2620:sdcard.c      **** 
2621:sdcard.c      ****   if (respR1 & SD_OCR_ILLEGAL_CMD)
 19746              		.loc 1 2621 0
 19747 00c6 009B     		ldr	r3, [sp, #0]
 19748 00c8 5802     		lsls	r0, r3, #9
 19749 00ca 2CD4     		bmi	.L25
2622:sdcard.c      ****   {
2623:sdcard.c      ****     return(SD_ILLEGAL_CMD);
2624:sdcard.c      ****   }
2625:sdcard.c      **** 
2626:sdcard.c      ****   if (respR1 & SD_OCR_CARD_ECC_FAILED)
 19750              		.loc 1 2626 0
 19751 00cc 009A     		ldr	r2, [sp, #0]
2627:sdcard.c      ****   {
2628:sdcard.c      ****     return(SD_CARD_ECC_FAILED);
 19752              		.loc 1 2628 0
 19753 00ce 1120     		movs	r0, #17
2626:sdcard.c      ****   if (respR1 & SD_OCR_CARD_ECC_FAILED)
 19754              		.loc 1 2626 0
 19755 00d0 9102     		lsls	r1, r2, #10
 19756 00d2 31D4     		bmi	.L13
2629:sdcard.c      ****   }
2630:sdcard.c      **** 
2631:sdcard.c      ****   if (respR1 & SD_OCR_CC_ERROR)
 19757              		.loc 1 2631 0
 19758 00d4 0099     		ldr	r1, [sp, #0]
2632:sdcard.c      ****   {
2633:sdcard.c      ****     return(SD_CC_ERROR);
 19759              		.loc 1 2633 0
 19760 00d6 1220     		movs	r0, #18
2631:sdcard.c      ****   if (respR1 & SD_OCR_CC_ERROR)
 19761              		.loc 1 2631 0
 19762 00d8 CA02     		lsls	r2, r1, #11
 19763 00da 2DD4     		bmi	.L13
2634:sdcard.c      ****   }
2635:sdcard.c      **** 
2636:sdcard.c      ****   if (respR1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 19764              		.loc 1 2636 0
 19765 00dc 0098     		ldr	r0, [sp, #0]
 19766 00de 0303     		lsls	r3, r0, #12
 19767 00e0 23D4     		bmi	.L28
2637:sdcard.c      ****   {
2638:sdcard.c      ****     return(SD_GENERAL_UNKNOWN_ERROR);
2639:sdcard.c      ****   }
2640:sdcard.c      **** 
2641:sdcard.c      ****   if (respR1 & SD_OCR_STREAM_READ_UNDERRUN)
 19768              		.loc 1 2641 0
 19769 00e2 009B     		ldr	r3, [sp, #0]
 19770 00e4 5803     		lsls	r0, r3, #13
 19771 00e6 22D4     		bmi	.L29
2642:sdcard.c      ****   {
2643:sdcard.c      ****     return(SD_STREAM_READ_UNDERRUN);
2644:sdcard.c      ****   }
2645:sdcard.c      **** 
2646:sdcard.c      ****   if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
 19772              		.loc 1 2646 0
 19773 00e8 009A     		ldr	r2, [sp, #0]
2647:sdcard.c      ****   {
2648:sdcard.c      ****     return(SD_STREAM_WRITE_OVERRUN);
 19774              		.loc 1 2648 0
 19775 00ea 1520     		movs	r0, #21
2646:sdcard.c      ****   if (respR1 & SD_OCR_STREAM_WRITE_OVERRUN)
 19776              		.loc 1 2646 0
 19777 00ec 9103     		lsls	r1, r2, #14
 19778 00ee 23D4     		bmi	.L13
2649:sdcard.c      ****   }
2650:sdcard.c      **** 
2651:sdcard.c      ****   if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
 19779              		.loc 1 2651 0
 19780 00f0 0099     		ldr	r1, [sp, #0]
2652:sdcard.c      ****   {
2653:sdcard.c      ****     return(SD_CID_CSD_OVERWRITE);
 19781              		.loc 1 2653 0
 19782 00f2 1620     		movs	r0, #22
2651:sdcard.c      ****   if (respR1 & SD_OCR_CID_CSD_OVERWRIETE)
 19783              		.loc 1 2651 0
 19784 00f4 CA03     		lsls	r2, r1, #15
 19785 00f6 1FD4     		bmi	.L13
2654:sdcard.c      ****   }
2655:sdcard.c      **** 
2656:sdcard.c      ****   if (respR1 & SD_OCR_WP_ERASE_SKIP)
 19786              		.loc 1 2656 0
 19787 00f8 0098     		ldr	r0, [sp, #0]
 19788 00fa 0304     		lsls	r3, r0, #16
 19789 00fc 19D4     		bmi	.L32
2657:sdcard.c      ****   {
2658:sdcard.c      ****     return(SD_WP_ERASE_SKIP);
2659:sdcard.c      ****   }
2660:sdcard.c      **** 
2661:sdcard.c      ****   if (respR1 & SD_OCR_CARD_ECC_DISABLED)
 19790              		.loc 1 2661 0
 19791 00fe 009B     		ldr	r3, [sp, #0]
 19792 0100 5804     		lsls	r0, r3, #17
 19793 0102 18D4     		bmi	.L33
2662:sdcard.c      ****   {
2663:sdcard.c      ****     return(SD_CARD_ECC_DISABLED);
2664:sdcard.c      ****   }
2665:sdcard.c      **** 
2666:sdcard.c      ****   if (respR1 & SD_OCR_ERASE_RESET)
 19794              		.loc 1 2666 0
 19795 0104 009A     		ldr	r2, [sp, #0]
2667:sdcard.c      ****   {
2668:sdcard.c      ****     return(SD_ERASE_RESET);
 19796              		.loc 1 2668 0
 19797 0106 1920     		movs	r0, #25
2666:sdcard.c      ****   if (respR1 & SD_OCR_ERASE_RESET)
 19798              		.loc 1 2666 0
 19799 0108 9104     		lsls	r1, r2, #18
 19800 010a 15D4     		bmi	.L13
2669:sdcard.c      ****   }
2670:sdcard.c      **** 
2671:sdcard.c      ****   if (respR1 & SD_OCR_AKE_SEQ_ERROR)
 19801              		.loc 1 2671 0
 19802 010c 0099     		ldr	r1, [sp, #0]
2672:sdcard.c      ****   {
2673:sdcard.c      ****     return(SD_AKE_SEQ_ERROR);
 19803              		.loc 1 2673 0
 19804 010e 11F0080F 		tst	r1, #8
 19805 0112 0CBF     		ite	eq
 19806 0114 2A20     		moveq	r0, #42
 19807 0116 1A20     		movne	r0, #26
 19808 0118 0EE0     		b	.L13
 19809              	.L20:
2598:sdcard.c      ****     return(SD_ERASE_SEQ_ERR);
 19810              		.loc 1 2598 0
 19811 011a 0B20     		movs	r0, #11
 19812 011c 0CE0     		b	.L13
 19813              	.L21:
2603:sdcard.c      ****     return(SD_BAD_ERASE_PARAM);
 19814              		.loc 1 2603 0
 19815 011e 0C20     		movs	r0, #12
 19816 0120 0AE0     		b	.L13
 19817              	.L24:
2618:sdcard.c      ****     return(SD_COM_CRC_FAILED);
 19818              		.loc 1 2618 0
 19819 0122 0F20     		movs	r0, #15
 19820 0124 08E0     		b	.L13
 19821              	.L25:
2623:sdcard.c      ****     return(SD_ILLEGAL_CMD);
 19822              		.loc 1 2623 0
 19823 0126 1020     		movs	r0, #16
 19824 0128 06E0     		b	.L13
 19825              	.L28:
2638:sdcard.c      ****     return(SD_GENERAL_UNKNOWN_ERROR);
 19826              		.loc 1 2638 0
 19827 012a 1320     		movs	r0, #19
 19828 012c 04E0     		b	.L13
 19829              	.L29:
2643:sdcard.c      ****     return(SD_STREAM_READ_UNDERRUN);
 19830              		.loc 1 2643 0
 19831 012e 1420     		movs	r0, #20
 19832 0130 02E0     		b	.L13
 19833              	.L32:
2658:sdcard.c      ****     return(SD_WP_ERASE_SKIP);
 19834              		.loc 1 2658 0
 19835 0132 1720     		movs	r0, #23
 19836 0134 00E0     		b	.L13
 19837              	.L33:
2663:sdcard.c      ****     return(SD_CARD_ECC_DISABLED);
 19838              		.loc 1 2663 0
 19839 0136 1820     		movs	r0, #24
 19840              	.LVL16:
 19841              	.L13:
2674:sdcard.c      ****   }
2675:sdcard.c      **** 
2676:sdcard.c      ****   return(errorstatus);
2677:sdcard.c      **** }
 19842              		.loc 1 2677 0
 19843 0138 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 19844              	.L37:
 19845 013a 00BF     		.align	2
 19846              	.L36:
 19847 013c 00000000 		.word	.LANCHOR0
 19848 0140 00000000 		.word	SDIO_CmdInitStructure
 19849 0144 00000000 		.word	SDIO_SendCommand
 19850 0148 00800140 		.word	1073840128
 19851 014c 00000000 		.word	SDIO_ClearFlag
 19852 0150 00000000 		.word	SDIO_GetCommandResponse
 19853 0154 00000000 		.word	SDIO_GetResponse
 19854 0158 08E0FFFD 		.word	-33562616
 19855              		.cfi_endproc
 19856              	.LFE54:
 19858              		.section	.text.DMA_TxConfiguration,"ax",%progbits
 19859              		.align	1
 19860              		.thumb
 19861              		.thumb_func
 19863              	DMA_TxConfiguration:
 19864              	.LFB58:
2678:sdcard.c      **** 
2679:sdcard.c      **** /**
2680:sdcard.c      ****   * @brief  Find the SD card SCR register value.
2681:sdcard.c      ****   * @param  rca: selected card address.
2682:sdcard.c      ****   * @param  pscr: pointer to the buffer that will contain the SCR value.
2683:sdcard.c      ****   * @retval SD_Error: SD Card Error code.
2684:sdcard.c      ****   */
2685:sdcard.c      **** static SD_Error FindSCR(uint16_t rca, uint32_t *pscr)
2686:sdcard.c      **** {
2687:sdcard.c      ****   uint32_t index = 0;
2688:sdcard.c      ****   SD_Error errorstatus = SD_OK;
2689:sdcard.c      ****   uint32_t tempscr[2] = {0, 0};
2690:sdcard.c      **** 
2691:sdcard.c      ****   /* Set Block Size To 8 Bytes */
2692:sdcard.c      ****   /* Send CMD55 APP_CMD with argument as card's RCA */
2693:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
2694:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
2695:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2696:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2697:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2698:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
2699:sdcard.c      **** 
2700:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
2701:sdcard.c      **** 
2702:sdcard.c      ****   if (errorstatus != SD_OK)
2703:sdcard.c      ****   {
2704:sdcard.c      ****     return(errorstatus);
2705:sdcard.c      ****   }
2706:sdcard.c      **** 
2707:sdcard.c      ****   /* Send CMD55 APP_CMD with argument as card's RCA */
2708:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
2709:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
2710:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2711:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2712:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2713:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
2714:sdcard.c      **** 
2715:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
2716:sdcard.c      **** 
2717:sdcard.c      ****   if (errorstatus != SD_OK)
2718:sdcard.c      ****   {
2719:sdcard.c      ****     return(errorstatus);
2720:sdcard.c      ****   }
2721:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
2722:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 8;
2723:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
2724:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
2725:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
2726:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
2727:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
2728:sdcard.c      **** 
2729:sdcard.c      **** 
2730:sdcard.c      ****   /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
2731:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
2732:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
2733:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
2734:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
2735:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
2736:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
2737:sdcard.c      **** 
2738:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SD_APP_SEND_SCR);
2739:sdcard.c      **** 
2740:sdcard.c      ****   if (errorstatus != SD_OK)
2741:sdcard.c      ****   {
2742:sdcard.c      ****     return(errorstatus);
2743:sdcard.c      ****   }
2744:sdcard.c      **** 
2745:sdcard.c      ****   while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBC
2746:sdcard.c      ****   {
2747:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
2748:sdcard.c      ****     {
2749:sdcard.c      ****       *(tempscr + index) = SDIO_ReadData();
2750:sdcard.c      ****       index++;
2751:sdcard.c      ****     }
2752:sdcard.c      ****   }
2753:sdcard.c      **** 
2754:sdcard.c      ****   if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
2755:sdcard.c      ****   {
2756:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
2757:sdcard.c      ****     errorstatus = SD_DATA_TIMEOUT;
2758:sdcard.c      ****     return(errorstatus);
2759:sdcard.c      ****   }
2760:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
2761:sdcard.c      ****   {
2762:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
2763:sdcard.c      ****     errorstatus = SD_DATA_CRC_FAIL;
2764:sdcard.c      ****     return(errorstatus);
2765:sdcard.c      ****   }
2766:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
2767:sdcard.c      ****   {
2768:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
2769:sdcard.c      ****     errorstatus = SD_RX_OVERRUN;
2770:sdcard.c      ****     return(errorstatus);
2771:sdcard.c      ****   }
2772:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
2773:sdcard.c      ****   {
2774:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_STBITERR);
2775:sdcard.c      ****     errorstatus = SD_START_BIT_ERR;
2776:sdcard.c      ****     return(errorstatus);
2777:sdcard.c      ****   }
2778:sdcard.c      **** 
2779:sdcard.c      ****   /* Clear all the static flags */
2780:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
2781:sdcard.c      **** 
2782:sdcard.c      ****   *(pscr + 1) = ((tempscr[0] & SD_0TO7BITS) << 24) | ((tempscr[0] & SD_8TO15BITS) << 8) | ((tempscr
2783:sdcard.c      **** 
2784:sdcard.c      ****   *(pscr) = ((tempscr[1] & SD_0TO7BITS) << 24) | ((tempscr[1] & SD_8TO15BITS) << 8) | ((tempscr[1] 
2785:sdcard.c      **** 
2786:sdcard.c      ****   return(errorstatus);
2787:sdcard.c      **** }
2788:sdcard.c      **** 
2789:sdcard.c      **** /**
2790:sdcard.c      ****   * @brief  Converts the number of bytes in power of two and returns the
2791:sdcard.c      ****   *   power.
2792:sdcard.c      ****   * @param  NumberOfBytes: number of bytes.
2793:sdcard.c      ****   * @retval None
2794:sdcard.c      ****   */
2795:sdcard.c      **** static uint8_t convert_from_bytes_to_power_of_two(uint16_t NumberOfBytes)
2796:sdcard.c      **** {
2797:sdcard.c      ****   uint8_t count = 0;
2798:sdcard.c      **** 
2799:sdcard.c      ****   while (NumberOfBytes != 1)
2800:sdcard.c      ****   {
2801:sdcard.c      ****     NumberOfBytes >>= 1;
2802:sdcard.c      ****     count++;
2803:sdcard.c      ****   }
2804:sdcard.c      ****   return(count);
2805:sdcard.c      **** }
2806:sdcard.c      **** 
2807:sdcard.c      **** /**
2808:sdcard.c      ****   * @brief  Configures the SDIO Corresponding GPIO Ports
2809:sdcard.c      ****   * @param  None
2810:sdcard.c      ****   * @retval None
2811:sdcard.c      ****   */
2812:sdcard.c      **** static void GPIO_Configuration(void)
2813:sdcard.c      **** {
2814:sdcard.c      ****   GPIO_InitTypeDef  GPIO_InitStructure;
2815:sdcard.c      **** 
2816:sdcard.c      ****   /* GPIOC and GPIOD Periph clock enable */
2817:sdcard.c      ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);
2818:sdcard.c      **** 
2819:sdcard.c      ****   /* Configure PC.08, PC.09, PC.10, PC.11, PC.12 pin: D0, D1, D2, D3, CLK pin */
2820:sdcard.c      ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
2821:sdcard.c      ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
2822:sdcard.c      ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
2823:sdcard.c      ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
2824:sdcard.c      **** 
2825:sdcard.c      ****   /* Configure PD.02 CMD line */
2826:sdcard.c      ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
2827:sdcard.c      ****   GPIO_Init(GPIOD, &GPIO_InitStructure);
2828:sdcard.c      **** }
2829:sdcard.c      **** 
2830:sdcard.c      **** /**
2831:sdcard.c      ****   * @brief  Configures the DMA2 Channel4 for SDIO Tx request.
2832:sdcard.c      ****   * @param  BufferSRC: pointer to the source buffer
2833:sdcard.c      ****   * @param  BufferSize: buffer size
2834:sdcard.c      ****   * @retval None
2835:sdcard.c      ****   */
2836:sdcard.c      **** static void DMA_TxConfiguration(uint32_t *BufferSRC, uint32_t BufferSize)
2837:sdcard.c      **** {
 19865              		.loc 1 2837 0
 19866              		.cfi_startproc
 19867              		@ args = 0, pretend = 0, frame = 48
 19868              		@ frame_needed = 0, uses_anonymous_args = 0
 19869              	.LVL17:
 19870 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19871              	.LCFI2:
 19872              		.cfi_def_cfa_offset 20
 19873              		.cfi_offset 14, -4
 19874              		.cfi_offset 7, -8
 19875              		.cfi_offset 6, -12
 19876              		.cfi_offset 5, -16
 19877              		.cfi_offset 4, -20
 19878 0002 0746     		mov	r7, r0
 19879 0004 8DB0     		sub	sp, sp, #52
 19880              	.LCFI3:
 19881              		.cfi_def_cfa_offset 72
2838:sdcard.c      ****   DMA_InitTypeDef DMA_InitStructure;
2839:sdcard.c      **** 
2840:sdcard.c      ****   DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
 19882              		.loc 1 2840 0
 19883 0006 1448     		ldr	r0, .L39
 19884              	.LVL18:
 19885 0008 144C     		ldr	r4, .L39+4
2837:sdcard.c      **** {
 19886              		.loc 1 2837 0
 19887 000a 0E46     		mov	r6, r1
 19888              		.loc 1 2840 0
 19889 000c A047     		blx	r4
 19890              	.LVL19:
2841:sdcard.c      **** 
2842:sdcard.c      ****   /* DMA2 Channel4 disable */
2843:sdcard.c      ****   DMA_Cmd(DMA2_Channel4, DISABLE);
 19891              		.loc 1 2843 0
 19892 000e 144C     		ldr	r4, .L39+8
 19893 0010 0021     		movs	r1, #0
 19894 0012 2046     		mov	r0, r4
 19895 0014 134D     		ldr	r5, .L39+12
 19896 0016 A847     		blx	r5
2844:sdcard.c      **** 
2845:sdcard.c      ****   /* DMA2 Channel4 Config */
2846:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 19897              		.loc 1 2846 0
 19898 0018 1349     		ldr	r1, .L39+16
2847:sdcard.c      ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
2848:sdcard.c      ****   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 19899              		.loc 1 2848 0
 19900 001a 1020     		movs	r0, #16
2849:sdcard.c      ****   DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
2850:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
2851:sdcard.c      ****   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 19901              		.loc 1 2851 0
 19902 001c 8022     		movs	r2, #128
2846:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 19903              		.loc 1 2846 0
 19904 001e 0191     		str	r1, [sp, #4]
2848:sdcard.c      ****   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 19905              		.loc 1 2848 0
 19906 0020 0390     		str	r0, [sp, #12]
 19907              		.loc 1 2851 0
 19908 0022 0692     		str	r2, [sp, #24]
2850:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 19909              		.loc 1 2850 0
 19910 0024 0020     		movs	r0, #0
2852:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
2853:sdcard.c      ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
2854:sdcard.c      ****   DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
2855:sdcard.c      ****   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 19911              		.loc 1 2855 0
 19912 0026 4FF40052 		mov	r2, #8192
2849:sdcard.c      ****   DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 19913              		.loc 1 2849 0
 19914 002a B608     		lsrs	r6, r6, #2
 19915              	.LVL20:
2852:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 19916              		.loc 1 2852 0
 19917 002c 4FF40073 		mov	r3, #512
2853:sdcard.c      ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 19918              		.loc 1 2853 0
 19919 0030 4FF40061 		mov	r1, #2048
2850:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 19920              		.loc 1 2850 0
 19921 0034 0590     		str	r0, [sp, #20]
2852:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 19922              		.loc 1 2852 0
 19923 0036 0793     		str	r3, [sp, #28]
2853:sdcard.c      ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 19924              		.loc 1 2853 0
 19925 0038 0891     		str	r1, [sp, #32]
2854:sdcard.c      ****   DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 19926              		.loc 1 2854 0
 19927 003a 0990     		str	r0, [sp, #36]
2856:sdcard.c      ****   DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 19928              		.loc 1 2856 0
 19929 003c 0B90     		str	r0, [sp, #44]
2857:sdcard.c      ****   DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 19930              		.loc 1 2857 0
 19931 003e 01A9     		add	r1, sp, #4
 19932 0040 2046     		mov	r0, r4
2847:sdcard.c      ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferSRC;
 19933              		.loc 1 2847 0
 19934 0042 0297     		str	r7, [sp, #8]
2849:sdcard.c      ****   DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 19935              		.loc 1 2849 0
 19936 0044 0496     		str	r6, [sp, #16]
2855:sdcard.c      ****   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 19937              		.loc 1 2855 0
 19938 0046 0A92     		str	r2, [sp, #40]
 19939              		.loc 1 2857 0
 19940 0048 084B     		ldr	r3, .L39+20
 19941 004a 9847     		blx	r3
2858:sdcard.c      **** 
2859:sdcard.c      ****   /* DMA2 Channel4 enable */
2860:sdcard.c      ****   DMA_Cmd(DMA2_Channel4, ENABLE);
 19942              		.loc 1 2860 0
 19943 004c 2046     		mov	r0, r4
 19944 004e 0121     		movs	r1, #1
 19945 0050 A847     		blx	r5
2861:sdcard.c      **** }
 19946              		.loc 1 2861 0
 19947 0052 0DB0     		add	sp, sp, #52
 19948 0054 F0BD     		pop	{r4, r5, r6, r7, pc}
 19949              	.L40:
 19950 0056 00BF     		.align	2
 19951              	.L39:
 19952 0058 00F00010 		.word	268496896
 19953 005c 00000000 		.word	DMA_ClearFlag
 19954 0060 44040240 		.word	1073873988
 19955 0064 00000000 		.word	DMA_Cmd
 19956 0068 80800140 		.word	1073840256
 19957 006c 00000000 		.word	DMA_Init
 19958              		.cfi_endproc
 19959              	.LFE58:
 19961              		.section	.text.DMA_RxConfiguration,"ax",%progbits
 19962              		.align	1
 19963              		.thumb
 19964              		.thumb_func
 19966              	DMA_RxConfiguration:
 19967              	.LFB59:
2862:sdcard.c      **** 
2863:sdcard.c      **** /**
2864:sdcard.c      ****   * @brief  Configures the DMA2 Channel4 for SDIO Rx request.
2865:sdcard.c      ****   * @param  BufferDST: pointer to the destination buffer
2866:sdcard.c      ****   * @param  BufferSize: buffer size
2867:sdcard.c      ****   * @retval None
2868:sdcard.c      ****   */
2869:sdcard.c      **** static void DMA_RxConfiguration(uint32_t *BufferDST, uint32_t BufferSize)
2870:sdcard.c      **** {
 19968              		.loc 1 2870 0
 19969              		.cfi_startproc
 19970              		@ args = 0, pretend = 0, frame = 48
 19971              		@ frame_needed = 0, uses_anonymous_args = 0
 19972              	.LVL21:
 19973 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19974              	.LCFI4:
 19975              		.cfi_def_cfa_offset 20
 19976              		.cfi_offset 14, -4
 19977              		.cfi_offset 7, -8
 19978              		.cfi_offset 6, -12
 19979              		.cfi_offset 5, -16
 19980              		.cfi_offset 4, -20
 19981 0002 0746     		mov	r7, r0
 19982 0004 8DB0     		sub	sp, sp, #52
 19983              	.LCFI5:
 19984              		.cfi_def_cfa_offset 72
2871:sdcard.c      ****   DMA_InitTypeDef DMA_InitStructure;
2872:sdcard.c      **** 
2873:sdcard.c      ****   DMA_ClearFlag(DMA2_FLAG_TC4 | DMA2_FLAG_TE4 | DMA2_FLAG_HT4 | DMA2_FLAG_GL4);
 19985              		.loc 1 2873 0
 19986 0006 1348     		ldr	r0, .L42
 19987              	.LVL22:
 19988 0008 134C     		ldr	r4, .L42+4
2870:sdcard.c      **** {
 19989              		.loc 1 2870 0
 19990 000a 0E46     		mov	r6, r1
 19991              		.loc 1 2873 0
 19992 000c A047     		blx	r4
 19993              	.LVL23:
2874:sdcard.c      **** 
2875:sdcard.c      ****   /* DMA2 Channel4 disable */
2876:sdcard.c      ****   DMA_Cmd(DMA2_Channel4, DISABLE);
 19994              		.loc 1 2876 0
 19995 000e 134C     		ldr	r4, .L42+8
 19996 0010 0021     		movs	r1, #0
 19997 0012 2046     		mov	r0, r4
 19998 0014 124D     		ldr	r5, .L42+12
 19999 0016 A847     		blx	r5
2877:sdcard.c      **** 
2878:sdcard.c      ****   /* DMA2 Channel4 Config */
2879:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 20000              		.loc 1 2879 0
 20001 0018 1248     		ldr	r0, .L42+16
2880:sdcard.c      ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
2881:sdcard.c      ****   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
2882:sdcard.c      ****   DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
2883:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
2884:sdcard.c      ****   DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 20002              		.loc 1 2884 0
 20003 001a 8022     		movs	r2, #128
2879:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)SDIO_FIFO_Address;
 20004              		.loc 1 2879 0
 20005 001c 0190     		str	r0, [sp, #4]
 20006              		.loc 1 2884 0
 20007 001e 0692     		str	r2, [sp, #24]
2881:sdcard.c      ****   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 20008              		.loc 1 2881 0
 20009 0020 0020     		movs	r0, #0
2885:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
2886:sdcard.c      ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
2887:sdcard.c      ****   DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
2888:sdcard.c      ****   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 20010              		.loc 1 2888 0
 20011 0022 4FF40052 		mov	r2, #8192
2882:sdcard.c      ****   DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 20012              		.loc 1 2882 0
 20013 0026 B608     		lsrs	r6, r6, #2
 20014              	.LVL24:
2885:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 20015              		.loc 1 2885 0
 20016 0028 4FF40073 		mov	r3, #512
2886:sdcard.c      ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 20017              		.loc 1 2886 0
 20018 002c 4FF40061 		mov	r1, #2048
2881:sdcard.c      ****   DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 20019              		.loc 1 2881 0
 20020 0030 0390     		str	r0, [sp, #12]
2883:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 20021              		.loc 1 2883 0
 20022 0032 0590     		str	r0, [sp, #20]
2885:sdcard.c      ****   DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Word;
 20023              		.loc 1 2885 0
 20024 0034 0793     		str	r3, [sp, #28]
2886:sdcard.c      ****   DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Word;
 20025              		.loc 1 2886 0
 20026 0036 0891     		str	r1, [sp, #32]
2887:sdcard.c      ****   DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 20027              		.loc 1 2887 0
 20028 0038 0990     		str	r0, [sp, #36]
2889:sdcard.c      ****   DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 20029              		.loc 1 2889 0
 20030 003a 0B90     		str	r0, [sp, #44]
2890:sdcard.c      ****   DMA_Init(DMA2_Channel4, &DMA_InitStructure);
 20031              		.loc 1 2890 0
 20032 003c 01A9     		add	r1, sp, #4
 20033 003e 2046     		mov	r0, r4
2880:sdcard.c      ****   DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)BufferDST;
 20034              		.loc 1 2880 0
 20035 0040 0297     		str	r7, [sp, #8]
2882:sdcard.c      ****   DMA_InitStructure.DMA_BufferSize = BufferSize / 4;
 20036              		.loc 1 2882 0
 20037 0042 0496     		str	r6, [sp, #16]
2888:sdcard.c      ****   DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 20038              		.loc 1 2888 0
 20039 0044 0A92     		str	r2, [sp, #40]
 20040              		.loc 1 2890 0
 20041 0046 084B     		ldr	r3, .L42+20
 20042 0048 9847     		blx	r3
2891:sdcard.c      **** 
2892:sdcard.c      ****   /* DMA2 Channel4 enable */
2893:sdcard.c      ****   DMA_Cmd(DMA2_Channel4, ENABLE);
 20043              		.loc 1 2893 0
 20044 004a 2046     		mov	r0, r4
 20045 004c 0121     		movs	r1, #1
 20046 004e A847     		blx	r5
2894:sdcard.c      **** }
 20047              		.loc 1 2894 0
 20048 0050 0DB0     		add	sp, sp, #52
 20049 0052 F0BD     		pop	{r4, r5, r6, r7, pc}
 20050              	.L43:
 20051              		.align	2
 20052              	.L42:
 20053 0054 00F00010 		.word	268496896
 20054 0058 00000000 		.word	DMA_ClearFlag
 20055 005c 44040240 		.word	1073873988
 20056 0060 00000000 		.word	DMA_Cmd
 20057 0064 80800140 		.word	1073840256
 20058 0068 00000000 		.word	DMA_Init
 20059              		.cfi_endproc
 20060              	.LFE59:
 20062              		.section	.text.CmdResp1Error,"ax",%progbits
 20063              		.align	1
 20064              		.thumb
 20065              		.thumb_func
 20067              	CmdResp1Error:
 20068              	.LFB49:
2128:sdcard.c      **** {
 20069              		.loc 1 2128 0
 20070              		.cfi_startproc
 20071              		@ args = 0, pretend = 0, frame = 0
 20072              		@ frame_needed = 0, uses_anonymous_args = 0
 20073              	.LVL25:
 20074 0000 38B5     		push	{r3, r4, r5, lr}
 20075              	.LCFI6:
 20076              		.cfi_def_cfa_offset 16
 20077              		.cfi_offset 14, -4
 20078              		.cfi_offset 5, -8
 20079              		.cfi_offset 4, -12
 20080              		.cfi_offset 3, -16
2133:sdcard.c      ****   status = SDIO->STA;
 20081              		.loc 1 2133 0
 20082 0002 3B4B     		ldr	r3, .L72
2128:sdcard.c      **** {
 20083              		.loc 1 2128 0
 20084 0004 0546     		mov	r5, r0
 20085              	.L46:
2137:sdcard.c      ****     status = SDIO->STA;
 20086              		.loc 1 2137 0
 20087 0006 5C6B     		ldr	r4, [r3, #52]
 20088              	.LVL26:
2135:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 20089              		.loc 1 2135 0
 20090 0008 14F0450F 		tst	r4, #69
 20091 000c FBD0     		beq	.L46
2140:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
 20092              		.loc 1 2140 0
 20093 000e 6107     		lsls	r1, r4, #29
 20094 0010 04D5     		bpl	.L47
 20095              	.LVL27:
2143:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 20096              		.loc 1 2143 0
 20097 0012 0420     		movs	r0, #4
 20098              	.LVL28:
 20099 0014 374B     		ldr	r3, .L72+4
 20100 0016 9847     		blx	r3
2144:sdcard.c      ****     return(errorstatus);
 20101              		.loc 1 2144 0
 20102 0018 0320     		movs	r0, #3
 20103 001a 38BD     		pop	{r3, r4, r5, pc}
 20104              	.LVL29:
 20105              	.L47:
2146:sdcard.c      ****   else if (status & SDIO_FLAG_CCRCFAIL)
 20106              		.loc 1 2146 0
 20107 001c 14F00104 		ands	r4, r4, #1
 20108              	.LVL30:
 20109 0020 04D0     		beq	.L49
 20110              	.LVL31:
2149:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 20111              		.loc 1 2149 0
 20112 0022 0120     		movs	r0, #1
 20113              	.LVL32:
 20114 0024 3349     		ldr	r1, .L72+4
 20115 0026 8847     		blx	r1
2150:sdcard.c      ****     return(errorstatus);
 20116              		.loc 1 2150 0
 20117 0028 0120     		movs	r0, #1
 20118 002a 38BD     		pop	{r3, r4, r5, pc}
 20119              	.LVL33:
 20120              	.L49:
2154:sdcard.c      ****   if (SDIO_GetCommandResponse() != cmd)
 20121              		.loc 1 2154 0
 20122 002c 3248     		ldr	r0, .L72+8
 20123              	.LVL34:
 20124 002e 8047     		blx	r0
 20125 0030 A842     		cmp	r0, r5
 20126 0032 5BD1     		bne	.L51
 20127              	.LBB22:
 20128              	.LBB23:
2161:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 20129              		.loc 1 2161 0
 20130 0034 2F4A     		ldr	r2, .L72+4
 20131 0036 40F2FF50 		movw	r0, #1535
 20132 003a 9047     		blx	r2
2164:sdcard.c      ****   response_r1 = SDIO_GetResponse(SDIO_RESP1);
 20133              		.loc 1 2164 0
 20134 003c 2046     		mov	r0, r4
 20135 003e 2F49     		ldr	r1, .L72+12
 20136 0040 8847     		blx	r1
 20137              	.LVL35:
2166:sdcard.c      ****   if ((response_r1 & SD_OCR_ERRORBITS) == SD_ALLZERO)
 20138              		.loc 1 2166 0
 20139 0042 2F4B     		ldr	r3, .L72+16
 20140 0044 00EA0302 		and	r2, r0, r3
 20141 0048 002A     		cmp	r2, #0
 20142 004a 29D0     		beq	.L52
2171:sdcard.c      ****   if (response_r1 & SD_OCR_ADDR_OUT_OF_RANGE)
 20143              		.loc 1 2171 0
 20144 004c 0028     		cmp	r0, #0
 20145 004e 29DB     		blt	.L53
2176:sdcard.c      ****   if (response_r1 & SD_OCR_ADDR_MISALIGNED)
 20146              		.loc 1 2176 0
 20147 0050 4200     		lsls	r2, r0, #1
 20148 0052 29D4     		bmi	.L54
2181:sdcard.c      ****   if (response_r1 & SD_OCR_BLOCK_LEN_ERR)
 20149              		.loc 1 2181 0
 20150 0054 8300     		lsls	r3, r0, #2
 20151 0056 29D4     		bmi	.L55
2186:sdcard.c      ****   if (response_r1 & SD_OCR_ERASE_SEQ_ERR)
 20152              		.loc 1 2186 0
 20153 0058 C100     		lsls	r1, r0, #3
 20154 005a 29D4     		bmi	.L56
2191:sdcard.c      ****   if (response_r1 & SD_OCR_BAD_ERASE_PARAM)
 20155              		.loc 1 2191 0
 20156 005c 0201     		lsls	r2, r0, #4
 20157 005e 29D4     		bmi	.L57
2196:sdcard.c      ****   if (response_r1 & SD_OCR_WRITE_PROT_VIOLATION)
 20158              		.loc 1 2196 0
 20159 0060 4301     		lsls	r3, r0, #5
 20160 0062 29D4     		bmi	.L58
2201:sdcard.c      ****   if (response_r1 & SD_OCR_LOCK_UNLOCK_FAILED)
 20161              		.loc 1 2201 0
 20162 0064 C101     		lsls	r1, r0, #7
 20163 0066 29D4     		bmi	.L59
2206:sdcard.c      ****   if (response_r1 & SD_OCR_COM_CRC_FAILED)
 20164              		.loc 1 2206 0
 20165 0068 0202     		lsls	r2, r0, #8
 20166 006a 29D4     		bmi	.L60
2211:sdcard.c      ****   if (response_r1 & SD_OCR_ILLEGAL_CMD)
 20167              		.loc 1 2211 0
 20168 006c 4302     		lsls	r3, r0, #9
 20169 006e 29D4     		bmi	.L61
2216:sdcard.c      ****   if (response_r1 & SD_OCR_CARD_ECC_FAILED)
 20170              		.loc 1 2216 0
 20171 0070 8102     		lsls	r1, r0, #10
 20172 0072 29D4     		bmi	.L62
2221:sdcard.c      ****   if (response_r1 & SD_OCR_CC_ERROR)
 20173              		.loc 1 2221 0
 20174 0074 C202     		lsls	r2, r0, #11
 20175 0076 29D4     		bmi	.L63
2226:sdcard.c      ****   if (response_r1 & SD_OCR_GENERAL_UNKNOWN_ERROR)
 20176              		.loc 1 2226 0
 20177 0078 0303     		lsls	r3, r0, #12
 20178 007a 29D4     		bmi	.L64
2231:sdcard.c      ****   if (response_r1 & SD_OCR_STREAM_READ_UNDERRUN)
 20179              		.loc 1 2231 0
 20180 007c 4103     		lsls	r1, r0, #13
 20181 007e 29D4     		bmi	.L65
2236:sdcard.c      ****   if (response_r1 & SD_OCR_STREAM_WRITE_OVERRUN)
 20182              		.loc 1 2236 0
 20183 0080 8203     		lsls	r2, r0, #14
 20184 0082 29D4     		bmi	.L66
2241:sdcard.c      ****   if (response_r1 & SD_OCR_CID_CSD_OVERWRIETE)
 20185              		.loc 1 2241 0
 20186 0084 C303     		lsls	r3, r0, #15
 20187 0086 29D4     		bmi	.L67
2246:sdcard.c      ****   if (response_r1 & SD_OCR_WP_ERASE_SKIP)
 20188              		.loc 1 2246 0
 20189 0088 0104     		lsls	r1, r0, #16
 20190 008a 29D4     		bmi	.L68
2251:sdcard.c      ****   if (response_r1 & SD_OCR_CARD_ECC_DISABLED)
 20191              		.loc 1 2251 0
 20192 008c 4204     		lsls	r2, r0, #17
 20193 008e 29D4     		bmi	.L69
2256:sdcard.c      ****   if (response_r1 & SD_OCR_ERASE_RESET)
 20194              		.loc 1 2256 0
 20195 0090 8304     		lsls	r3, r0, #18
 20196 0092 29D4     		bmi	.L70
2263:sdcard.c      ****     return(SD_AKE_SEQ_ERROR);
 20197              		.loc 1 2263 0
 20198 0094 10F0080F 		tst	r0, #8
 20199 0098 0CBF     		ite	eq
 20200 009a 2A20     		moveq	r0, #42
 20201 009c 1A20     		movne	r0, #26
 20202              	.LVL36:
 20203 009e 38BD     		pop	{r3, r4, r5, pc}
 20204              	.LVL37:
 20205              	.L52:
2168:sdcard.c      ****     return(errorstatus);
 20206              		.loc 1 2168 0
 20207 00a0 2A20     		movs	r0, #42
 20208              	.LVL38:
 20209 00a2 38BD     		pop	{r3, r4, r5, pc}
 20210              	.LVL39:
 20211              	.L53:
2173:sdcard.c      ****     return(SD_ADDR_OUT_OF_RANGE);
 20212              		.loc 1 2173 0
 20213 00a4 1C20     		movs	r0, #28
 20214              	.LVL40:
 20215 00a6 38BD     		pop	{r3, r4, r5, pc}
 20216              	.LVL41:
 20217              	.L54:
2178:sdcard.c      ****     return(SD_ADDR_MISALIGNED);
 20218              		.loc 1 2178 0
 20219 00a8 0920     		movs	r0, #9
 20220              	.LVL42:
 20221 00aa 38BD     		pop	{r3, r4, r5, pc}
 20222              	.LVL43:
 20223              	.L55:
2183:sdcard.c      ****     return(SD_BLOCK_LEN_ERR);
 20224              		.loc 1 2183 0
 20225 00ac 0A20     		movs	r0, #10
 20226              	.LVL44:
 20227 00ae 38BD     		pop	{r3, r4, r5, pc}
 20228              	.LVL45:
 20229              	.L56:
2188:sdcard.c      ****     return(SD_ERASE_SEQ_ERR);
 20230              		.loc 1 2188 0
 20231 00b0 0B20     		movs	r0, #11
 20232              	.LVL46:
 20233 00b2 38BD     		pop	{r3, r4, r5, pc}
 20234              	.LVL47:
 20235              	.L57:
2193:sdcard.c      ****     return(SD_BAD_ERASE_PARAM);
 20236              		.loc 1 2193 0
 20237 00b4 0C20     		movs	r0, #12
 20238              	.LVL48:
 20239 00b6 38BD     		pop	{r3, r4, r5, pc}
 20240              	.LVL49:
 20241              	.L58:
2198:sdcard.c      ****     return(SD_WRITE_PROT_VIOLATION);
 20242              		.loc 1 2198 0
 20243 00b8 0D20     		movs	r0, #13
 20244              	.LVL50:
 20245 00ba 38BD     		pop	{r3, r4, r5, pc}
 20246              	.LVL51:
 20247              	.L59:
2203:sdcard.c      ****     return(SD_LOCK_UNLOCK_FAILED);
 20248              		.loc 1 2203 0
 20249 00bc 0E20     		movs	r0, #14
 20250              	.LVL52:
 20251 00be 38BD     		pop	{r3, r4, r5, pc}
 20252              	.LVL53:
 20253              	.L60:
2208:sdcard.c      ****     return(SD_COM_CRC_FAILED);
 20254              		.loc 1 2208 0
 20255 00c0 0F20     		movs	r0, #15
 20256              	.LVL54:
 20257 00c2 38BD     		pop	{r3, r4, r5, pc}
 20258              	.LVL55:
 20259              	.L61:
2213:sdcard.c      ****     return(SD_ILLEGAL_CMD);
 20260              		.loc 1 2213 0
 20261 00c4 1020     		movs	r0, #16
 20262              	.LVL56:
 20263 00c6 38BD     		pop	{r3, r4, r5, pc}
 20264              	.LVL57:
 20265              	.L62:
2218:sdcard.c      ****     return(SD_CARD_ECC_FAILED);
 20266              		.loc 1 2218 0
 20267 00c8 1120     		movs	r0, #17
 20268              	.LVL58:
 20269 00ca 38BD     		pop	{r3, r4, r5, pc}
 20270              	.LVL59:
 20271              	.L63:
2223:sdcard.c      ****     return(SD_CC_ERROR);
 20272              		.loc 1 2223 0
 20273 00cc 1220     		movs	r0, #18
 20274              	.LVL60:
 20275 00ce 38BD     		pop	{r3, r4, r5, pc}
 20276              	.LVL61:
 20277              	.L64:
2228:sdcard.c      ****     return(SD_GENERAL_UNKNOWN_ERROR);
 20278              		.loc 1 2228 0
 20279 00d0 1320     		movs	r0, #19
 20280              	.LVL62:
 20281 00d2 38BD     		pop	{r3, r4, r5, pc}
 20282              	.LVL63:
 20283              	.L65:
2233:sdcard.c      ****     return(SD_STREAM_READ_UNDERRUN);
 20284              		.loc 1 2233 0
 20285 00d4 1420     		movs	r0, #20
 20286              	.LVL64:
 20287 00d6 38BD     		pop	{r3, r4, r5, pc}
 20288              	.LVL65:
 20289              	.L66:
2238:sdcard.c      ****     return(SD_STREAM_WRITE_OVERRUN);
 20290              		.loc 1 2238 0
 20291 00d8 1520     		movs	r0, #21
 20292              	.LVL66:
 20293 00da 38BD     		pop	{r3, r4, r5, pc}
 20294              	.LVL67:
 20295              	.L67:
2243:sdcard.c      ****     return(SD_CID_CSD_OVERWRITE);
 20296              		.loc 1 2243 0
 20297 00dc 1620     		movs	r0, #22
 20298              	.LVL68:
 20299 00de 38BD     		pop	{r3, r4, r5, pc}
 20300              	.LVL69:
 20301              	.L68:
2248:sdcard.c      ****     return(SD_WP_ERASE_SKIP);
 20302              		.loc 1 2248 0
 20303 00e0 1720     		movs	r0, #23
 20304              	.LVL70:
 20305 00e2 38BD     		pop	{r3, r4, r5, pc}
 20306              	.LVL71:
 20307              	.L69:
2253:sdcard.c      ****     return(SD_CARD_ECC_DISABLED);
 20308              		.loc 1 2253 0
 20309 00e4 1820     		movs	r0, #24
 20310              	.LVL72:
 20311 00e6 38BD     		pop	{r3, r4, r5, pc}
 20312              	.LVL73:
 20313              	.L70:
2258:sdcard.c      ****     return(SD_ERASE_RESET);
 20314              		.loc 1 2258 0
 20315 00e8 1920     		movs	r0, #25
 20316              	.LVL74:
 20317 00ea 38BD     		pop	{r3, r4, r5, pc}
 20318              	.L51:
 20319              	.LBE23:
 20320              	.LBE22:
2157:sdcard.c      ****     return(errorstatus);
 20321              		.loc 1 2157 0
 20322 00ec 1020     		movs	r0, #16
2266:sdcard.c      **** }
 20323              		.loc 1 2266 0
 20324 00ee 38BD     		pop	{r3, r4, r5, pc}
 20325              	.L73:
 20326              		.align	2
 20327              	.L72:
 20328 00f0 00800140 		.word	1073840128
 20329 00f4 00000000 		.word	SDIO_ClearFlag
 20330 00f8 00000000 		.word	SDIO_GetCommandResponse
 20331 00fc 00000000 		.word	SDIO_GetResponse
 20332 0100 08E0FFFD 		.word	-33562616
 20333              		.cfi_endproc
 20334              	.LFE49:
 20336              		.section	.text.SDEnWideBus,"ax",%progbits
 20337              		.align	1
 20338              		.thumb
 20339              		.thumb_func
 20341              	SDEnWideBus:
 20342              	.LFB53:
2412:sdcard.c      **** {
 20343              		.loc 1 2412 0
 20344              		.cfi_startproc
 20345              		@ args = 0, pretend = 0, frame = 16
 20346              		@ frame_needed = 0, uses_anonymous_args = 0
 20347              	.LVL75:
 20348 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 20349              	.LCFI7:
 20350              		.cfi_def_cfa_offset 36
 20351              		.cfi_offset 14, -4
 20352              		.cfi_offset 11, -8
 20353              		.cfi_offset 10, -12
 20354              		.cfi_offset 9, -16
 20355              		.cfi_offset 8, -20
 20356              		.cfi_offset 7, -24
 20357              		.cfi_offset 6, -28
 20358              		.cfi_offset 5, -32
 20359              		.cfi_offset 4, -36
2417:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 20360              		.loc 1 2417 0
 20361 0004 6E4B     		ldr	r3, .L94
2412:sdcard.c      **** {
 20362              		.loc 1 2412 0
 20363 0006 85B0     		sub	sp, sp, #20
 20364              	.LCFI8:
 20365              		.cfi_def_cfa_offset 56
2412:sdcard.c      **** {
 20366              		.loc 1 2412 0
 20367 0008 8246     		mov	sl, r0
2417:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 20368              		.loc 1 2417 0
 20369 000a 0020     		movs	r0, #0
 20370              	.LVL76:
 20371 000c 9847     		blx	r3
 20372 000e 10F00075 		ands	r5, r0, #33554432
 20373 0012 40F0CF80 		bne	.L86
 20374              	.LVL77:
 20375              	.LBB26:
 20376              	.LBB27:
2693:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 20377              		.loc 1 2693 0
 20378 0016 6B4C     		ldr	r4, .L94+4
2694:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 20379              		.loc 1 2694 0
 20380 0018 1026     		movs	r6, #16
2693:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 20381              		.loc 1 2693 0
 20382 001a 4FF0080B 		mov	fp, #8
2695:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20383              		.loc 1 2695 0
 20384 001e 4FF04009 		mov	r9, #64
2697:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20385              		.loc 1 2697 0
 20386 0022 4FF48068 		mov	r8, #1024
2694:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 20387              		.loc 1 2694 0
 20388 0026 6660     		str	r6, [r4, #4]
2698:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20389              		.loc 1 2698 0
 20390 0028 2046     		mov	r0, r4
2689:sdcard.c      ****   uint32_t tempscr[2] = {0, 0};
 20391              		.loc 1 2689 0
 20392 002a 0295     		str	r5, [sp, #8]
2693:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)8;
 20393              		.loc 1 2693 0
 20394 002c C4F800B0 		str	fp, [r4, #0]
2695:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20395              		.loc 1 2695 0
 20396 0030 C4F80890 		str	r9, [r4, #8]
2696:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20397              		.loc 1 2696 0
 20398 0034 E560     		str	r5, [r4, #12]
2697:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20399              		.loc 1 2697 0
 20400 0036 C4F81080 		str	r8, [r4, #16]
2698:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20401              		.loc 1 2698 0
 20402 003a 634F     		ldr	r7, .L94+8
 20403 003c B847     		blx	r7
2700:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 20404              		.loc 1 2700 0
 20405 003e 3046     		mov	r0, r6
 20406 0040 624E     		ldr	r6, .L94+12
 20407 0042 B047     		blx	r6
 20408              	.LVL78:
2702:sdcard.c      ****   if (errorstatus != SD_OK)
 20409              		.loc 1 2702 0
 20410 0044 2A28     		cmp	r0, #42
 20411 0046 40F0B880 		bne	.L75
2708:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20412              		.loc 1 2708 0
 20413 004a 6148     		ldr	r0, .L94+16
 20414              	.LVL79:
2709:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20415              		.loc 1 2709 0
 20416 004c 3721     		movs	r1, #55
2708:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20417              		.loc 1 2708 0
 20418 004e 0368     		ldr	r3, [r0, #0]
2709:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20419              		.loc 1 2709 0
 20420 0050 6160     		str	r1, [r4, #4]
2708:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20421              		.loc 1 2708 0
 20422 0052 1A04     		lsls	r2, r3, #16
 20423 0054 2260     		str	r2, [r4, #0]
2710:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20424              		.loc 1 2710 0
 20425 0056 C4F80890 		str	r9, [r4, #8]
2711:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20426              		.loc 1 2711 0
 20427 005a E560     		str	r5, [r4, #12]
2712:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20428              		.loc 1 2712 0
 20429 005c C4F81080 		str	r8, [r4, #16]
2713:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20430              		.loc 1 2713 0
 20431 0060 2046     		mov	r0, r4
 20432 0062 0191     		str	r1, [sp, #4]
 20433 0064 B847     		blx	r7
2715:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20434              		.loc 1 2715 0
 20435 0066 0198     		ldr	r0, [sp, #4]
 20436 0068 B047     		blx	r6
 20437              	.LVL80:
2717:sdcard.c      ****   if (errorstatus != SD_OK)
 20438              		.loc 1 2717 0
 20439 006a 2A28     		cmp	r0, #42
 20440 006c 40F0A580 		bne	.L75
2721:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 20441              		.loc 1 2721 0
 20442 0070 5848     		ldr	r0, .L94+20
 20443              	.LVL81:
 20444 0072 594B     		ldr	r3, .L94+24
2726:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 20445              		.loc 1 2726 0
 20446 0074 0122     		movs	r2, #1
2722:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 8;
 20447              		.loc 1 2722 0
 20448 0076 80E80808 		stmia	r0, {r3, fp}
2723:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 20449              		.loc 1 2723 0
 20450 007a 3021     		movs	r1, #48
2724:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 20451              		.loc 1 2724 0
 20452 007c 0223     		movs	r3, #2
 20453 007e C360     		str	r3, [r0, #12]
2726:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 20454              		.loc 1 2726 0
 20455 0080 4261     		str	r2, [r0, #20]
2723:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_8b;
 20456              		.loc 1 2723 0
 20457 0082 8160     		str	r1, [r0, #8]
2725:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 20458              		.loc 1 2725 0
 20459 0084 0561     		str	r5, [r0, #16]
2727:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 20460              		.loc 1 2727 0
 20461 0086 5549     		ldr	r1, .L94+28
2732:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
 20462              		.loc 1 2732 0
 20463 0088 4FF0330B 		mov	fp, #51
2727:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 20464              		.loc 1 2727 0
 20465 008c 8847     		blx	r1
2736:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20466              		.loc 1 2736 0
 20467 008e 2046     		mov	r0, r4
2731:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 20468              		.loc 1 2731 0
 20469 0090 2560     		str	r5, [r4, #0]
2732:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_SEND_SCR;
 20470              		.loc 1 2732 0
 20471 0092 C4F804B0 		str	fp, [r4, #4]
2733:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20472              		.loc 1 2733 0
 20473 0096 C4F80890 		str	r9, [r4, #8]
2734:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20474              		.loc 1 2734 0
 20475 009a E560     		str	r5, [r4, #12]
2735:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20476              		.loc 1 2735 0
 20477 009c C4F81080 		str	r8, [r4, #16]
2736:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20478              		.loc 1 2736 0
 20479 00a0 B847     		blx	r7
2738:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SD_APP_SEND_SCR);
 20480              		.loc 1 2738 0
 20481 00a2 5846     		mov	r0, fp
 20482 00a4 B047     		blx	r6
 20483              	.LVL82:
2740:sdcard.c      ****   if (errorstatus != SD_OK)
 20484              		.loc 1 2740 0
 20485 00a6 2A28     		cmp	r0, #42
 20486 00a8 40F08780 		bne	.L75
 20487 00ac 02AC     		add	r4, sp, #8
2745:sdcard.c      ****   while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBC
 20488              		.loc 1 2745 0
 20489 00ae DFF83C81 		ldr	r8, .L94+44
 20490 00b2 4B4F     		ldr	r7, .L94+32
2749:sdcard.c      ****       *(tempscr + index) = SDIO_ReadData();
 20491              		.loc 1 2749 0
 20492 00b4 4B4E     		ldr	r6, .L94+36
 20493 00b6 06E0     		b	.L91
 20494              	.LVL83:
 20495              	.L79:
2747:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 20496              		.loc 1 2747 0
 20497 00b8 4FF40010 		mov	r0, #2097152
 20498 00bc B847     		blx	r7
 20499 00be 10B1     		cbz	r0, .L91
2749:sdcard.c      ****       *(tempscr + index) = SDIO_ReadData();
 20500              		.loc 1 2749 0
 20501 00c0 B047     		blx	r6
 20502 00c2 44F8040B 		str	r0, [r4], #4
 20503              	.L91:
2745:sdcard.c      ****   while (!(SDIO->STA & (SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBC
 20504              		.loc 1 2745 0
 20505 00c6 D8F83420 		ldr	r2, [r8, #52]
 20506 00ca 40F22A65 		movw	r5, #1578
 20507 00ce 02EA0500 		and	r0, r2, r5
 20508 00d2 434D     		ldr	r5, .L94+32
 20509 00d4 0028     		cmp	r0, #0
 20510 00d6 EFD0     		beq	.L79
2754:sdcard.c      ****   if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 20511              		.loc 1 2754 0
 20512 00d8 0820     		movs	r0, #8
 20513 00da A847     		blx	r5
 20514 00dc 424C     		ldr	r4, .L94+40
 20515 00de 18B1     		cbz	r0, .L80
2756:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 20516              		.loc 1 2756 0
 20517 00e0 0820     		movs	r0, #8
 20518 00e2 A047     		blx	r4
 20519              	.LVL84:
2758:sdcard.c      ****     return(errorstatus);
 20520              		.loc 1 2758 0
 20521 00e4 0420     		movs	r0, #4
 20522 00e6 68E0     		b	.L75
 20523              	.LVL85:
 20524              	.L80:
2760:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 20525              		.loc 1 2760 0
 20526 00e8 0220     		movs	r0, #2
 20527 00ea A847     		blx	r5
 20528 00ec 18B1     		cbz	r0, .L81
2762:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 20529              		.loc 1 2762 0
 20530 00ee 0220     		movs	r0, #2
 20531 00f0 A047     		blx	r4
 20532              	.LVL86:
2764:sdcard.c      ****     return(errorstatus);
 20533              		.loc 1 2764 0
 20534 00f2 0220     		movs	r0, #2
 20535 00f4 61E0     		b	.L75
 20536              	.LVL87:
 20537              	.L81:
2766:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 20538              		.loc 1 2766 0
 20539 00f6 2020     		movs	r0, #32
 20540 00f8 A847     		blx	r5
 20541 00fa 18B1     		cbz	r0, .L82
2768:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 20542              		.loc 1 2768 0
 20543 00fc 2020     		movs	r0, #32
 20544 00fe A047     		blx	r4
 20545              	.LVL88:
2770:sdcard.c      ****     return(errorstatus);
 20546              		.loc 1 2770 0
 20547 0100 0620     		movs	r0, #6
 20548 0102 5AE0     		b	.L75
 20549              	.LVL89:
 20550              	.L82:
2772:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 20551              		.loc 1 2772 0
 20552 0104 4FF40070 		mov	r0, #512
 20553 0108 A847     		blx	r5
 20554 010a 0546     		mov	r5, r0
 20555 010c 20B1     		cbz	r0, .L83
2774:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 20556              		.loc 1 2774 0
 20557 010e 4FF40070 		mov	r0, #512
 20558 0112 A047     		blx	r4
 20559              	.LVL90:
2776:sdcard.c      ****     return(errorstatus);
 20560              		.loc 1 2776 0
 20561 0114 0720     		movs	r0, #7
 20562              	.LVL91:
 20563 0116 50E0     		b	.L75
 20564              	.LVL92:
 20565              	.L83:
2780:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 20566              		.loc 1 2780 0
 20567 0118 40F2FF50 		movw	r0, #1535
 20568 011c A047     		blx	r4
 20569 011e 029B     		ldr	r3, [sp, #8]
 20570              	.LBE27:
 20571              	.LBE26:
2432:sdcard.c      ****   if (NewState == ENABLE)
 20572              		.loc 1 2432 0
 20573 0120 BAF1010F 		cmp	sl, #1
 20574              	.LBB29:
 20575              	.LBB28:
2780:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 20576              		.loc 1 2780 0
 20577 0124 1BBA     		rev	r3, r3
 20578              	.LVL93:
 20579              	.LBE28:
 20580              	.LBE29:
2432:sdcard.c      ****   if (NewState == ENABLE)
 20581              		.loc 1 2432 0
 20582 0126 1DD1     		bne	.L92
2435:sdcard.c      ****     if ((scr[1] & SD_WIDE_BUS_SUPPORT) != SD_ALLZERO)
 20583              		.loc 1 2435 0
 20584 0128 5B03     		lsls	r3, r3, #13
 20585 012a 45D5     		bpl	.L88
2438:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20586              		.loc 1 2438 0
 20587 012c 284A     		ldr	r2, .L94+16
 20588 012e 254C     		ldr	r4, .L94+4
 20589 0130 1068     		ldr	r0, [r2, #0]
2439:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20590              		.loc 1 2439 0
 20591 0132 3726     		movs	r6, #55
2438:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20592              		.loc 1 2438 0
 20593 0134 0104     		lsls	r1, r0, #16
2440:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20594              		.loc 1 2440 0
 20595 0136 4FF0400A 		mov	sl, #64
2442:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20596              		.loc 1 2442 0
 20597 013a 4FF48069 		mov	r9, #1024
2438:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20598              		.loc 1 2438 0
 20599 013e 2160     		str	r1, [r4, #0]
2439:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20600              		.loc 1 2439 0
 20601 0140 6660     		str	r6, [r4, #4]
2443:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20602              		.loc 1 2443 0
 20603 0142 2046     		mov	r0, r4
2440:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20604              		.loc 1 2440 0
 20605 0144 C4F808A0 		str	sl, [r4, #8]
2441:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20606              		.loc 1 2441 0
 20607 0148 E560     		str	r5, [r4, #12]
2442:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20608              		.loc 1 2442 0
 20609 014a C4F81090 		str	r9, [r4, #16]
2443:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20610              		.loc 1 2443 0
 20611 014e DFF87880 		ldr	r8, .L94+8
 20612 0152 C047     		blx	r8
 20613              	.LVL94:
2445:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20614              		.loc 1 2445 0
 20615 0154 3046     		mov	r0, r6
 20616 0156 1D4E     		ldr	r6, .L94+12
 20617 0158 B047     		blx	r6
 20618              	.LVL95:
2447:sdcard.c      ****       if (errorstatus != SD_OK)
 20619              		.loc 1 2447 0
 20620 015a 2A28     		cmp	r0, #42
 20621 015c 2DD1     		bne	.L75
2453:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x2;
 20622              		.loc 1 2453 0
 20623 015e 0227     		movs	r7, #2
 20624 0160 2760     		str	r7, [r4, #0]
 20625 0162 1BE0     		b	.L93
 20626              	.LVL96:
 20627              	.L92:
2477:sdcard.c      ****     if ((scr[1] & SD_SINGLE_BUS_SUPPORT) != SD_ALLZERO)
 20628              		.loc 1 2477 0
 20629 0164 D803     		lsls	r0, r3, #15
 20630 0166 27D5     		bpl	.L88
2480:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20631              		.loc 1 2480 0
 20632 0168 1948     		ldr	r0, .L94+16
 20633 016a 164C     		ldr	r4, .L94+4
 20634 016c 0168     		ldr	r1, [r0, #0]
2481:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20635              		.loc 1 2481 0
 20636 016e 3726     		movs	r6, #55
2480:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20637              		.loc 1 2480 0
 20638 0170 0B04     		lsls	r3, r1, #16
2482:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20639              		.loc 1 2482 0
 20640 0172 4FF0400A 		mov	sl, #64
2484:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20641              		.loc 1 2484 0
 20642 0176 4FF48069 		mov	r9, #1024
2480:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 20643              		.loc 1 2480 0
 20644 017a 2360     		str	r3, [r4, #0]
2481:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20645              		.loc 1 2481 0
 20646 017c 6660     		str	r6, [r4, #4]
2485:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20647              		.loc 1 2485 0
 20648 017e 2046     		mov	r0, r4
2482:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20649              		.loc 1 2482 0
 20650 0180 C4F808A0 		str	sl, [r4, #8]
2483:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20651              		.loc 1 2483 0
 20652 0184 E560     		str	r5, [r4, #12]
2484:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20653              		.loc 1 2484 0
 20654 0186 C4F81090 		str	r9, [r4, #16]
2485:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20655              		.loc 1 2485 0
 20656 018a DFF83C80 		ldr	r8, .L94+8
 20657 018e C047     		blx	r8
 20658              	.LVL97:
2488:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20659              		.loc 1 2488 0
 20660 0190 3046     		mov	r0, r6
 20661 0192 0E4E     		ldr	r6, .L94+12
 20662 0194 B047     		blx	r6
 20663              	.LVL98:
2490:sdcard.c      ****       if (errorstatus != SD_OK)
 20664              		.loc 1 2490 0
 20665 0196 2A28     		cmp	r0, #42
 20666 0198 0FD1     		bne	.L75
2496:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 20667              		.loc 1 2496 0
 20668 019a 2560     		str	r5, [r4, #0]
 20669              	.LVL99:
 20670              	.L93:
2497:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
 20671              		.loc 1 2497 0
 20672 019c 0627     		movs	r7, #6
2501:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20673              		.loc 1 2501 0
 20674 019e 2046     		mov	r0, r4
2497:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_SD_SET_BUSWIDTH;
 20675              		.loc 1 2497 0
 20676 01a0 6760     		str	r7, [r4, #4]
2498:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20677              		.loc 1 2498 0
 20678 01a2 C4F808A0 		str	sl, [r4, #8]
2499:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20679              		.loc 1 2499 0
 20680 01a6 E560     		str	r5, [r4, #12]
2500:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20681              		.loc 1 2500 0
 20682 01a8 C4F81090 		str	r9, [r4, #16]
2501:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20683              		.loc 1 2501 0
 20684 01ac C047     		blx	r8
2503:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_SD_SET_BUSWIDTH);
 20685              		.loc 1 2503 0
 20686 01ae 3846     		mov	r0, r7
 20687 01b0 B047     		blx	r6
 20688              	.LVL100:
 20689 01b2 02E0     		b	.L75
 20690              	.LVL101:
 20691              	.L86:
2420:sdcard.c      ****     return(errorstatus);
 20692              		.loc 1 2420 0
 20693 01b4 0E20     		movs	r0, #14
 20694 01b6 00E0     		b	.L75
 20695              	.LVL102:
 20696              	.L88:
2515:sdcard.c      ****       return(errorstatus);
 20697              		.loc 1 2515 0
 20698 01b8 2520     		movs	r0, #37
 20699              	.LVL103:
 20700              	.L75:
2518:sdcard.c      **** }
 20701              		.loc 1 2518 0
 20702 01ba 05B0     		add	sp, sp, #20
 20703 01bc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 20704              	.L95:
 20705              		.align	2
 20706              	.L94:
 20707 01c0 00000000 		.word	SDIO_GetResponse
 20708 01c4 00000000 		.word	SDIO_CmdInitStructure
 20709 01c8 00000000 		.word	SDIO_SendCommand
 20710 01cc 00000000 		.word	CmdResp1Error
 20711 01d0 00000000 		.word	.LANCHOR0
 20712 01d4 00000000 		.word	SDIO_DataInitStructure
 20713 01d8 FFFF0F00 		.word	1048575
 20714 01dc 00000000 		.word	SDIO_DataConfig
 20715 01e0 00000000 		.word	SDIO_GetFlagStatus
 20716 01e4 00000000 		.word	SDIO_ReadData
 20717 01e8 00000000 		.word	SDIO_ClearFlag
 20718 01ec 00800140 		.word	1073840128
 20719              		.cfi_endproc
 20720              	.LFE53:
 20722              		.section	.text.SD_PowerON,"ax",%progbits
 20723              		.align	1
 20724              		.global	SD_PowerON
 20725              		.thumb
 20726              		.thumb_func
 20728              	SD_PowerON:
 20729              	.LFB30:
 189:sdcard.c      **** {
 20730              		.loc 1 189 0
 20731              		.cfi_startproc
 20732              		@ args = 0, pretend = 0, frame = 8
 20733              		@ frame_needed = 0, uses_anonymous_args = 0
 20734              	.LVL104:
 20735 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 20736              	.LCFI9:
 20737              		.cfi_def_cfa_offset 48
 20738              		.cfi_offset 14, -4
 20739              		.cfi_offset 11, -8
 20740              		.cfi_offset 10, -12
 20741              		.cfi_offset 9, -16
 20742              		.cfi_offset 8, -20
 20743              		.cfi_offset 7, -24
 20744              		.cfi_offset 6, -28
 20745              		.cfi_offset 5, -32
 20746              		.cfi_offset 4, -36
 20747              		.cfi_offset 2, -40
 20748              		.cfi_offset 1, -44
 20749              		.cfi_offset 0, -48
 197:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK =
 20750              		.loc 1 197 0
 20751 0004 6F48     		ldr	r0, .L119
 198:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 20752              		.loc 1 198 0
 20753 0006 0024     		movs	r4, #0
 197:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockDiv = SDIO_INIT_CLK_DIV; /* HCLK = 72MHz, SDIOCLK = 72MHz, SDIO_CK =
 20754              		.loc 1 197 0
 20755 0008 B221     		movs	r1, #178
 20756 000a 0175     		strb	r1, [r0, #20]
 203:sdcard.c      ****   SDIO_Init(&SDIO_InitStructure);
 20757              		.loc 1 203 0
 20758 000c 6E4B     		ldr	r3, .L119+4
 198:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 20759              		.loc 1 198 0
 20760 000e 0460     		str	r4, [r0, #0]
 199:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 20761              		.loc 1 199 0
 20762 0010 4460     		str	r4, [r0, #4]
 200:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 20763              		.loc 1 200 0
 20764 0012 8460     		str	r4, [r0, #8]
 201:sdcard.c      ****   SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 20765              		.loc 1 201 0
 20766 0014 C460     		str	r4, [r0, #12]
 202:sdcard.c      ****   SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 20767              		.loc 1 202 0
 20768 0016 0461     		str	r4, [r0, #16]
 203:sdcard.c      ****   SDIO_Init(&SDIO_InitStructure);
 20769              		.loc 1 203 0
 20770 0018 9847     		blx	r3
 206:sdcard.c      ****   SDIO_SetPowerState(SDIO_PowerState_ON);
 20771              		.loc 1 206 0
 20772 001a 6C4D     		ldr	r5, .L119+8
 20773 001c 0320     		movs	r0, #3
 20774 001e A847     		blx	r5
 209:sdcard.c      ****   SDIO_ClockCmd(ENABLE);
 20775              		.loc 1 209 0
 20776 0020 0120     		movs	r0, #1
 20777 0022 6B4A     		ldr	r2, .L119+12
 20778 0024 9047     		blx	r2
 213:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 20779              		.loc 1 213 0
 20780 0026 6B48     		ldr	r0, .L119+16
 217:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20781              		.loc 1 217 0
 20782 0028 4FF48061 		mov	r1, #1024
 213:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 20783              		.loc 1 213 0
 20784 002c 0460     		str	r4, [r0, #0]
 214:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_GO_IDLE_STATE;
 20785              		.loc 1 214 0
 20786 002e 4460     		str	r4, [r0, #4]
 215:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_No;
 20787              		.loc 1 215 0
 20788 0030 8460     		str	r4, [r0, #8]
 216:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20789              		.loc 1 216 0
 20790 0032 C460     		str	r4, [r0, #12]
 217:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20791              		.loc 1 217 0
 20792 0034 0161     		str	r1, [r0, #16]
 218:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20793              		.loc 1 218 0
 20794 0036 684B     		ldr	r3, .L119+20
 20795 0038 9847     		blx	r3
 20796              	.LVL105:
 20797 003a 42F21074 		movw	r4, #10000
 20798              	.LBB30:
 20799              	.LBB31:
2066:sdcard.c      ****   while ((timeout > 0) && (SDIO_GetFlagStatus(SDIO_FLAG_CMDSENT) == RESET))
 20800              		.loc 1 2066 0
 20801 003e 674D     		ldr	r5, .L119+24
 20802 0040 02E0     		b	.L97
 20803              	.LVL106:
 20804              	.L99:
 20805 0042 013C     		subs	r4, r4, #1
 20806 0044 00F09A80 		beq	.L112
 20807              	.L97:
 20808 0048 8020     		movs	r0, #128
 20809 004a A847     		blx	r5
 20810 004c 0028     		cmp	r0, #0
 20811 004e F8D0     		beq	.L99
 20812 0050 9CE0     		b	.L117
 20813              	.LVL107:
 20814              	.L101:
 20815              	.LBE31:
 20816              	.LBE30:
 20817              	.LBB34:
 20818              	.LBB35:
2100:sdcard.c      ****     status = SDIO->STA;
 20819              		.loc 1 2100 0
 20820 0052 4A6B     		ldr	r2, [r1, #52]
 20821              	.LVL108:
2099:sdcard.c      ****     timeout--;
 20822              		.loc 1 2099 0
 20823 0054 013B     		subs	r3, r3, #1
 20824              	.LVL109:
 20825              	.L111:
2097:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) && (timeout > 0)
 20826              		.loc 1 2097 0
 20827 0056 12F0450F 		tst	r2, #69
 20828 005a 14BF     		ite	ne
 20829 005c 0020     		movne	r0, #0
 20830 005e 0120     		moveq	r0, #1
 20831 0060 002B     		cmp	r3, #0
 20832 0062 0CBF     		ite	eq
 20833 0064 0020     		moveq	r0, #0
 20834 0066 00F00100 		andne	r0, r0, #1
 20835 006a 0028     		cmp	r0, #0
 20836 006c F1D1     		bne	.L101
2103:sdcard.c      ****   if ((timeout == 0) || (status & SDIO_FLAG_CTIMEOUT))
 20837              		.loc 1 2103 0
 20838 006e 0BB1     		cbz	r3, .L102
 20839 0070 5107     		lsls	r1, r2, #29
 20840 0072 14D5     		bpl	.L103
 20841              	.L102:
 20842              	.LVL110:
2107:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 20843              		.loc 1 2107 0
 20844 0074 0420     		movs	r0, #4
 20845 0076 5A4C     		ldr	r4, .L119+28
 20846 0078 A047     		blx	r4
 20847              	.LVL111:
 20848              	.LBE35:
 20849              	.LBE34:
 251:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 20850              		.loc 1 251 0
 20851 007a 5648     		ldr	r0, .L119+16
 252:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20852              		.loc 1 252 0
 20853 007c 0024     		movs	r4, #0
 253:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20854              		.loc 1 253 0
 20855 007e 4021     		movs	r1, #64
 255:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20856              		.loc 1 255 0
 20857 0080 4FF48063 		mov	r3, #1024
 252:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20858              		.loc 1 252 0
 20859 0084 3725     		movs	r5, #55
 253:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20860              		.loc 1 253 0
 20861 0086 8160     		str	r1, [r0, #8]
 255:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20862              		.loc 1 255 0
 20863 0088 0361     		str	r3, [r0, #16]
 252:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20864              		.loc 1 252 0
 20865 008a 80E83000 		stmia	r0, {r4, r5}
 254:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20866              		.loc 1 254 0
 20867 008e C460     		str	r4, [r0, #12]
 256:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 20868              		.loc 1 256 0
 20869 0090 514A     		ldr	r2, .L119+20
 20870 0092 9047     		blx	r2
 257:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20871              		.loc 1 257 0
 20872 0094 534F     		ldr	r7, .L119+32
 20873 0096 2846     		mov	r0, r5
 20874 0098 B847     		blx	r7
 193:sdcard.c      ****   uint32_t SDType = SD_STD_CAPACITY;
 20875              		.loc 1 193 0
 20876 009a 2746     		mov	r7, r4
 20877 009c 06E0     		b	.L104
 20878              	.LVL112:
 20879              	.L103:
 20880              	.LBB38:
 20881              	.LBB36:
2111:sdcard.c      ****   if (status & SDIO_FLAG_CMDREND)
 20882              		.loc 1 2111 0
 20883 009e 5206     		lsls	r2, r2, #25
 20884              	.LVL113:
 20885 00a0 40F18A80 		bpl	.L105
2115:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CMDREND);
 20886              		.loc 1 2115 0
 20887 00a4 4020     		movs	r0, #64
 20888 00a6 4E4D     		ldr	r5, .L119+28
 20889 00a8 A847     		blx	r5
 20890              	.LVL114:
 20891 00aa 85E0     		b	.L105
 20892              	.LVL115:
 20893              	.L104:
 20894              	.LBE36:
 20895              	.LBE38:
 260:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 20896              		.loc 1 260 0
 20897 00ac 4948     		ldr	r0, .L119+16
 261:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20898              		.loc 1 261 0
 20899 00ae 3725     		movs	r5, #55
 262:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20900              		.loc 1 262 0
 20901 00b0 4022     		movs	r2, #64
 261:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20902              		.loc 1 261 0
 20903 00b2 0024     		movs	r4, #0
 264:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20904              		.loc 1 264 0
 20905 00b4 4FF48061 		mov	r1, #1024
 261:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20906              		.loc 1 261 0
 20907 00b8 80E83000 		stmia	r0, {r4, r5}
 262:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20908              		.loc 1 262 0
 20909 00bc 8260     		str	r2, [r0, #8]
 264:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20910              		.loc 1 264 0
 20911 00be 0161     		str	r1, [r0, #16]
 263:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20912              		.loc 1 263 0
 20913 00c0 C460     		str	r4, [r0, #12]
 265:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 20914              		.loc 1 265 0
 20915 00c2 454B     		ldr	r3, .L119+20
 20916 00c4 9847     		blx	r3
 266:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20917              		.loc 1 266 0
 20918 00c6 2846     		mov	r0, r5
 20919 00c8 464A     		ldr	r2, .L119+32
 20920 00ca 9047     		blx	r2
 271:sdcard.c      ****   if (errorstatus == SD_OK)
 20921              		.loc 1 271 0
 20922 00cc 2A28     		cmp	r0, #42
 266:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20923              		.loc 1 266 0
 20924 00ce 0546     		mov	r5, r0
 20925              	.LVL116:
 271:sdcard.c      ****   if (errorstatus == SD_OK)
 20926              		.loc 1 271 0
 20927 00d0 59D1     		bne	.L98
 20928 00d2 37E0     		b	.L118
 20929              	.LVL117:
 20930              	.L110:
 279:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 20931              		.loc 1 279 0
 20932 00d4 3F4C     		ldr	r4, .L119+16
 280:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20933              		.loc 1 280 0
 20934 00d6 3721     		movs	r1, #55
 279:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 20935              		.loc 1 279 0
 20936 00d8 0027     		movs	r7, #0
 281:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20937              		.loc 1 281 0
 20938 00da 4FF0400A 		mov	sl, #64
 283:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20939              		.loc 1 283 0
 20940 00de 4FF48069 		mov	r9, #1024
 280:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 20941              		.loc 1 280 0
 20942 00e2 6160     		str	r1, [r4, #4]
 279:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 20943              		.loc 1 279 0
 20944 00e4 2760     		str	r7, [r4, #0]
 281:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20945              		.loc 1 281 0
 20946 00e6 C4F808A0 		str	sl, [r4, #8]
 282:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20947              		.loc 1 282 0
 20948 00ea E760     		str	r7, [r4, #12]
 283:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20949              		.loc 1 283 0
 20950 00ec C4F81090 		str	r9, [r4, #16]
 284:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20951              		.loc 1 284 0
 20952 00f0 2046     		mov	r0, r4
 20953 00f2 DFF8E480 		ldr	r8, .L119+20
 20954 00f6 0091     		str	r1, [sp, #0]
 20955 00f8 C047     		blx	r8
 286:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
 20956              		.loc 1 286 0
 20957 00fa 0098     		ldr	r0, [sp, #0]
 20958 00fc 394B     		ldr	r3, .L119+32
 20959 00fe 9847     		blx	r3
 20960              	.LVL118:
 288:sdcard.c      ****       if (errorstatus != SD_OK)
 20961              		.loc 1 288 0
 20962 0100 2A28     		cmp	r0, #42
 20963 0102 3DD1     		bne	.L114
 292:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 20964              		.loc 1 292 0
 20965 0104 019B     		ldr	r3, [sp, #4]
 293:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_OP_COND;
 20966              		.loc 1 293 0
 20967 0106 2922     		movs	r2, #41
 292:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 20968              		.loc 1 292 0
 20969 0108 2360     		str	r3, [r4, #0]
 293:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_OP_COND;
 20970              		.loc 1 293 0
 20971 010a 6260     		str	r2, [r4, #4]
 294:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 20972              		.loc 1 294 0
 20973 010c C4F808A0 		str	sl, [r4, #8]
 295:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 20974              		.loc 1 295 0
 20975 0110 E760     		str	r7, [r4, #12]
 296:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 20976              		.loc 1 296 0
 20977 0112 C4F81090 		str	r9, [r4, #16]
 297:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 20978              		.loc 1 297 0
 20979 0116 2046     		mov	r0, r4
 20980              	.LVL119:
 20981 0118 C047     		blx	r8
 20982              	.LVL120:
 20983              	.LBB39:
 20984              	.LBB40:
2279:sdcard.c      ****   status = SDIO->STA;
 20985              		.loc 1 2279 0
 20986 011a 334B     		ldr	r3, .L119+36
 20987              	.L108:
2283:sdcard.c      ****     status = SDIO->STA;
 20988              		.loc 1 2283 0
 20989 011c 5C6B     		ldr	r4, [r3, #52]
 20990              	.LVL121:
2281:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)))
 20991              		.loc 1 2281 0
 20992 011e 14F0450F 		tst	r4, #69
 20993 0122 FBD0     		beq	.L108
2286:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
 20994              		.loc 1 2286 0
 20995 0124 14F00404 		ands	r4, r4, #4
 20996              	.LVL122:
 20997 0128 2D4B     		ldr	r3, .L119+28
 20998 012a 02D0     		beq	.L109
 20999              	.LVL123:
2289:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 21000              		.loc 1 2289 0
 21001 012c 0420     		movs	r0, #4
 21002 012e 9847     		blx	r3
 21003 0130 24E0     		b	.L112
 21004              	.LVL124:
 21005              	.L109:
2293:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 21006              		.loc 1 2293 0
 21007 0132 40F2FF50 		movw	r0, #1535
 21008 0136 9847     		blx	r3
 21009              	.LBE40:
 21010              	.LBE39:
 305:sdcard.c      ****       response = SDIO_GetResponse(SDIO_RESP1);
 21011              		.loc 1 305 0
 21012 0138 2046     		mov	r0, r4
 21013 013a 2C4C     		ldr	r4, .L119+40
 21014 013c A047     		blx	r4
 21015              	.LVL125:
 307:sdcard.c      ****       count++;
 21016              		.loc 1 307 0
 21017 013e 0136     		adds	r6, r6, #1
 21018              	.LVL126:
 306:sdcard.c      ****       validvoltage = (bool) (((response >> 31) == 1) ? 1 : 0);
 21019              		.loc 1 306 0
 21020 0140 C40F     		lsrs	r4, r0, #31
 21021              	.LVL127:
 21022 0142 08E0     		b	.L106
 21023              	.LVL128:
 21024              	.L118:
 292:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 21025              		.loc 1 292 0
 21026 0144 47F0004C 		orr	ip, r7, #-2147483648
 21027 0148 4CF48017 		orr	r7, ip, #1048576
 21028              	.LVL129:
 271:sdcard.c      ****   if (errorstatus == SD_OK)
 21029              		.loc 1 271 0
 21030 014c 2646     		mov	r6, r4
 21031 014e 2046     		mov	r0, r4
 275:sdcard.c      ****     while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 21032              		.loc 1 275 0
 21033 0150 4FF6FE7B 		movw	fp, #65534
 292:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = SD_VOLTAGE_WINDOW_SD | SDType;
 21034              		.loc 1 292 0
 21035 0154 0197     		str	r7, [sp, #4]
 21036              	.LVL130:
 21037              	.L106:
 275:sdcard.c      ****     while ((!validvoltage) && (count < SD_MAX_VOLT_TRIAL))
 21038              		.loc 1 275 0 discriminator 1
 21039 0156 84F00104 		eor	r4, r4, #1
 21040              	.LVL131:
 21041 015a 5E45     		cmp	r6, fp
 21042 015c 8CBF     		ite	hi
 21043 015e 0024     		movhi	r4, #0
 21044 0160 04F00104 		andls	r4, r4, #1
 21045              	.LVL132:
 21046 0164 002C     		cmp	r4, #0
 21047 0166 B5D1     		bne	.L110
 309:sdcard.c      ****     if (count >= SD_MAX_VOLT_TRIAL)
 21048              		.loc 1 309 0
 21049 0168 4FF6FE7E 		movw	lr, #65534
 21050 016c 7645     		cmp	r6, lr
 21051 016e 09D8     		bhi	.L115
 21052              	.LVL133:
 315:sdcard.c      ****     if (response &= SD_HIGH_CAPACITY)
 21053              		.loc 1 315 0
 21054 0170 4300     		lsls	r3, r0, #1
 21055 0172 08D5     		bpl	.L98
 317:sdcard.c      ****       CardType = SDIO_HIGH_CAPACITY_SD_CARD;
 21056              		.loc 1 317 0
 21057 0174 1E49     		ldr	r1, .L119+44
 21058 0176 0220     		movs	r0, #2
 21059              	.LVL134:
 21060 0178 0860     		str	r0, [r1, #0]
 21061 017a 04E0     		b	.L98
 21062              	.LVL135:
 21063              	.L112:
 21064              	.LBB41:
 21065              	.LBB32:
2074:sdcard.c      ****     return(errorstatus);
 21066              		.loc 1 2074 0
 21067 017c 0325     		movs	r5, #3
 21068 017e 02E0     		b	.L98
 21069              	.LVL136:
 21070              	.L114:
 21071              	.LBE32:
 21072              	.LBE41:
 286:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
 21073              		.loc 1 286 0
 21074 0180 0546     		mov	r5, r0
 21075 0182 00E0     		b	.L98
 21076              	.LVL137:
 21077              	.L115:
 312:sdcard.c      ****       return(errorstatus);
 21078              		.loc 1 312 0
 21079 0184 1B25     		movs	r5, #27
 21080              	.LVL138:
 21081              	.L98:
 323:sdcard.c      **** }
 21082              		.loc 1 323 0
 21083 0186 2846     		mov	r0, r5
 21084 0188 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 21085              	.LVL139:
 21086              	.L117:
 21087              	.LBB42:
 21088              	.LBB33:
2078:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 21089              		.loc 1 2078 0
 21090 018c 40F2FF50 		movw	r0, #1535
 21091 0190 134A     		ldr	r2, .L119+28
 21092 0192 9047     		blx	r2
 21093              	.LVL140:
 21094              	.LBE33:
 21095              	.LBE42:
 234:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = SD_CHECK_PATTERN;
 21096              		.loc 1 234 0
 21097 0194 0F48     		ldr	r0, .L119+16
 237:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 21098              		.loc 1 237 0
 21099 0196 4FF4D571 		mov	r1, #426
 21100 019a 0822     		movs	r2, #8
 21101 019c 4023     		movs	r3, #64
 21102 019e 0024     		movs	r4, #0
 238:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21103              		.loc 1 238 0
 21104 01a0 4FF48065 		mov	r5, #1024
 237:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 21105              		.loc 1 237 0
 21106 01a4 80E81E00 		stmia	r0, {r1, r2, r3, r4}
 238:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21107              		.loc 1 238 0
 21108 01a8 0561     		str	r5, [r0, #16]
 239:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 21109              		.loc 1 239 0
 21110 01aa 0B4F     		ldr	r7, .L119+20
 21111 01ac B847     		blx	r7
 21112              	.LVL141:
 21113              	.LBB43:
 21114              	.LBB37:
2095:sdcard.c      ****   status = SDIO->STA;
 21115              		.loc 1 2095 0
 21116 01ae 0E49     		ldr	r1, .L119+36
2093:sdcard.c      ****   uint32_t timeout = SDIO_CMD0TIMEOUT;
 21117              		.loc 1 2093 0
 21118 01b0 42F21073 		movw	r3, #10000
2095:sdcard.c      ****   status = SDIO->STA;
 21119              		.loc 1 2095 0
 21120 01b4 4A6B     		ldr	r2, [r1, #52]
 21121              	.LVL142:
 21122 01b6 4EE7     		b	.L111
 21123              	.LVL143:
 21124              	.L105:
 21125              	.LBE37:
 21126              	.LBE43:
 245:sdcard.c      ****     CardType = SDIO_STD_CAPACITY_SD_CARD_V2_0; /* SD Card 2.0 */
 21127              		.loc 1 245 0
 21128 01b8 0D4B     		ldr	r3, .L119+44
 21129 01ba 0124     		movs	r4, #1
 21130 01bc 1C60     		str	r4, [r3, #0]
 21131              	.LVL144:
 246:sdcard.c      ****     SDType = SD_HIGH_CAPACITY;
 21132              		.loc 1 246 0
 21133 01be 4FF08047 		mov	r7, #1073741824
 21134 01c2 73E7     		b	.L104
 21135              	.L120:
 21136              		.align	2
 21137              	.L119:
 21138 01c4 00000000 		.word	SDIO_InitStructure
 21139 01c8 00000000 		.word	SDIO_Init
 21140 01cc 00000000 		.word	SDIO_SetPowerState
 21141 01d0 00000000 		.word	SDIO_ClockCmd
 21142 01d4 00000000 		.word	SDIO_CmdInitStructure
 21143 01d8 00000000 		.word	SDIO_SendCommand
 21144 01dc 00000000 		.word	SDIO_GetFlagStatus
 21145 01e0 00000000 		.word	SDIO_ClearFlag
 21146 01e4 00000000 		.word	CmdResp1Error
 21147 01e8 00800140 		.word	1073840128
 21148 01ec 00000000 		.word	SDIO_GetResponse
 21149 01f0 00000000 		.word	.LANCHOR1
 21150              		.cfi_endproc
 21151              	.LFE30:
 21153              		.section	.text.SD_PowerOFF,"ax",%progbits
 21154              		.align	1
 21155              		.global	SD_PowerOFF
 21156              		.thumb
 21157              		.thumb_func
 21159              	SD_PowerOFF:
 21160              	.LFB31:
 331:sdcard.c      **** {
 21161              		.loc 1 331 0
 21162              		.cfi_startproc
 21163              		@ args = 0, pretend = 0, frame = 0
 21164              		@ frame_needed = 0, uses_anonymous_args = 0
 21165              	.LVL145:
 21166 0000 08B5     		push	{r3, lr}
 21167              	.LCFI10:
 21168              		.cfi_def_cfa_offset 8
 21169              		.cfi_offset 14, -4
 21170              		.cfi_offset 3, -8
 335:sdcard.c      ****   SDIO_SetPowerState(SDIO_PowerState_OFF);
 21171              		.loc 1 335 0
 21172 0002 0020     		movs	r0, #0
 21173 0004 014B     		ldr	r3, .L122
 21174 0006 9847     		blx	r3
 338:sdcard.c      **** }
 21175              		.loc 1 338 0
 21176 0008 2A20     		movs	r0, #42
 21177 000a 08BD     		pop	{r3, pc}
 21178              	.L123:
 21179              		.align	2
 21180              	.L122:
 21181 000c 00000000 		.word	SDIO_SetPowerState
 21182              		.cfi_endproc
 21183              	.LFE31:
 21185              		.section	.text.SD_InitializeCards,"ax",%progbits
 21186              		.align	1
 21187              		.global	SD_InitializeCards
 21188              		.thumb
 21189              		.thumb_func
 21191              	SD_InitializeCards:
 21192              	.LFB32:
 347:sdcard.c      **** {
 21193              		.loc 1 347 0
 21194              		.cfi_startproc
 21195              		@ args = 0, pretend = 0, frame = 0
 21196              		@ frame_needed = 0, uses_anonymous_args = 0
 21197              	.LVL146:
 21198 0000 70B5     		push	{r4, r5, r6, lr}
 21199              	.LCFI11:
 21200              		.cfi_def_cfa_offset 16
 21201              		.cfi_offset 14, -4
 21202              		.cfi_offset 6, -8
 21203              		.cfi_offset 5, -12
 21204              		.cfi_offset 4, -16
 351:sdcard.c      ****   if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 21205              		.loc 1 351 0
 21206 0002 4E4B     		ldr	r3, .L143
 21207 0004 9847     		blx	r3
 354:sdcard.c      ****     return(errorstatus);
 21208              		.loc 1 354 0
 21209 0006 2524     		movs	r4, #37
 351:sdcard.c      ****   if (SDIO_GetPowerState() == SDIO_PowerState_OFF)
 21210              		.loc 1 351 0
 21211 0008 0028     		cmp	r0, #0
 21212 000a 00F09580 		beq	.L125
 357:sdcard.c      ****   if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 21213              		.loc 1 357 0
 21214 000e 4C49     		ldr	r1, .L143+4
 21215 0010 0868     		ldr	r0, [r1, #0]
 21216 0012 0428     		cmp	r0, #4
 21217 0014 1FD0     		beq	.L126
 360:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 21218              		.loc 1 360 0
 21219 0016 4B48     		ldr	r0, .L143+8
 361:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
 21220              		.loc 1 361 0
 21221 0018 0222     		movs	r2, #2
 362:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 21222              		.loc 1 362 0
 21223 001a C021     		movs	r1, #192
 360:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 21224              		.loc 1 360 0
 21225 001c 0025     		movs	r5, #0
 364:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21226              		.loc 1 364 0
 21227 001e 4FF48063 		mov	r3, #1024
 361:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ALL_SEND_CID;
 21228              		.loc 1 361 0
 21229 0022 4260     		str	r2, [r0, #4]
 360:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 21230              		.loc 1 360 0
 21231 0024 0560     		str	r5, [r0, #0]
 362:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 21232              		.loc 1 362 0
 21233 0026 8160     		str	r1, [r0, #8]
 363:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 21234              		.loc 1 363 0
 21235 0028 C560     		str	r5, [r0, #12]
 364:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21236              		.loc 1 364 0
 21237 002a 0361     		str	r3, [r0, #16]
 365:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 21238              		.loc 1 365 0
 21239 002c 464C     		ldr	r4, .L143+12
 21240 002e A047     		blx	r4
 367:sdcard.c      ****     errorstatus = CmdResp2Error();
 21241              		.loc 1 367 0
 21242 0030 464A     		ldr	r2, .L143+16
 21243 0032 9047     		blx	r2
 369:sdcard.c      ****     if (SD_OK != errorstatus)
 21244              		.loc 1 369 0
 21245 0034 2A28     		cmp	r0, #42
 367:sdcard.c      ****     errorstatus = CmdResp2Error();
 21246              		.loc 1 367 0
 21247 0036 0446     		mov	r4, r0
 21248              	.LVL147:
 369:sdcard.c      ****     if (SD_OK != errorstatus)
 21249              		.loc 1 369 0
 21250 0038 7ED1     		bne	.L125
 374:sdcard.c      ****     CID_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 21251              		.loc 1 374 0
 21252 003a 2846     		mov	r0, r5
 21253              	.LVL148:
 21254 003c 444D     		ldr	r5, .L143+20
 21255 003e A847     		blx	r5
 21256 0040 444C     		ldr	r4, .L143+24
 21257              	.LVL149:
 21258 0042 2060     		str	r0, [r4, #0]
 375:sdcard.c      ****     CID_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 21259              		.loc 1 375 0
 21260 0044 0420     		movs	r0, #4
 21261 0046 A847     		blx	r5
 21262 0048 6060     		str	r0, [r4, #4]
 376:sdcard.c      ****     CID_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 21263              		.loc 1 376 0
 21264 004a 0820     		movs	r0, #8
 21265 004c A847     		blx	r5
 21266 004e A060     		str	r0, [r4, #8]
 377:sdcard.c      ****     CID_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 21267              		.loc 1 377 0
 21268 0050 0C20     		movs	r0, #12
 21269 0052 A847     		blx	r5
 21270 0054 E060     		str	r0, [r4, #12]
 21271              	.L126:
 379:sdcard.c      ****   if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) ||  (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType)
 21272              		.loc 1 379 0
 21273 0056 3A4B     		ldr	r3, .L143+4
 21274 0058 1B68     		ldr	r3, [r3, #0]
 21275 005a 012B     		cmp	r3, #1
 21276 005c 8CBF     		ite	hi
 21277 005e 0020     		movhi	r0, #0
 21278 0060 0120     		movls	r0, #1
 21279 0062 062B     		cmp	r3, #6
 21280 0064 08BF     		it	eq
 21281 0066 40F00100 		orreq	r0, r0, #1
 21282 006a 08B9     		cbnz	r0, .L127
 380:sdcard.c      ****       ||  (SDIO_HIGH_CAPACITY_SD_CARD == CardType))
 21283              		.loc 1 380 0
 21284 006c 022B     		cmp	r3, #2
 21285 006e 3AD1     		bne	.L137
 21286              	.L127:
 384:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 21287              		.loc 1 384 0
 21288 0070 3448     		ldr	r0, .L143+8
 386:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 21289              		.loc 1 386 0
 21290 0072 4023     		movs	r3, #64
 384:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 21291              		.loc 1 384 0
 21292 0074 0024     		movs	r4, #0
 385:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
 21293              		.loc 1 385 0
 21294 0076 0321     		movs	r1, #3
 388:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21295              		.loc 1 388 0
 21296 0078 4FF48062 		mov	r2, #1024
 385:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_REL_ADDR;
 21297              		.loc 1 385 0
 21298 007c 4160     		str	r1, [r0, #4]
 386:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 21299              		.loc 1 386 0
 21300 007e 8360     		str	r3, [r0, #8]
 384:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = 0x00;
 21301              		.loc 1 384 0
 21302 0080 0460     		str	r4, [r0, #0]
 387:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 21303              		.loc 1 387 0
 21304 0082 C460     		str	r4, [r0, #12]
 388:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21305              		.loc 1 388 0
 21306 0084 0261     		str	r2, [r0, #16]
 389:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 21307              		.loc 1 389 0
 21308 0086 3049     		ldr	r1, .L143+12
 21309 0088 8847     		blx	r1
 21310              	.LVL150:
 21311              	.LBB44:
 21312              	.LBB45:
2348:sdcard.c      ****   status = SDIO->STA;
 21313              		.loc 1 2348 0
 21314 008a 334B     		ldr	r3, .L143+28
 21315              	.L130:
2352:sdcard.c      ****     status = SDIO->STA;
 21316              		.loc 1 2352 0
 21317 008c 5C6B     		ldr	r4, [r3, #52]
 21318              	.LVL151:
2350:sdcard.c      ****   while (!(status & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CTIMEOUT | SDIO_FLAG_CMDREND)))
 21319              		.loc 1 2350 0
 21320 008e 14F0450F 		tst	r4, #69
 21321 0092 FBD0     		beq	.L130
2355:sdcard.c      ****   if (status & SDIO_FLAG_CTIMEOUT)
 21322              		.loc 1 2355 0
 21323 0094 6207     		lsls	r2, r4, #29
 21324 0096 04D5     		bpl	.L131
 21325              	.LVL152:
2358:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CTIMEOUT);
 21326              		.loc 1 2358 0
 21327 0098 0420     		movs	r0, #4
 21328 009a 304A     		ldr	r2, .L143+32
 21329 009c 9047     		blx	r2
2359:sdcard.c      ****     return(errorstatus);
 21330              		.loc 1 2359 0
 21331 009e 0324     		movs	r4, #3
 21332              	.LVL153:
 21333 00a0 4AE0     		b	.L125
 21334              	.LVL154:
 21335              	.L131:
2361:sdcard.c      ****   else if (status & SDIO_FLAG_CCRCFAIL)
 21336              		.loc 1 2361 0
 21337 00a2 14F00104 		ands	r4, r4, #1
 21338              	.LVL155:
 21339 00a6 04D0     		beq	.L133
 21340              	.LVL156:
2364:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_CCRCFAIL);
 21341              		.loc 1 2364 0
 21342 00a8 2C4C     		ldr	r4, .L143+32
 21343 00aa 0120     		movs	r0, #1
 21344 00ac A047     		blx	r4
2365:sdcard.c      ****     return(errorstatus);
 21345              		.loc 1 2365 0
 21346 00ae 0124     		movs	r4, #1
 21347 00b0 42E0     		b	.L125
 21348              	.LVL157:
 21349              	.L133:
2369:sdcard.c      ****   if (SDIO_GetCommandResponse() != cmd)
 21350              		.loc 1 2369 0
 21351 00b2 2B48     		ldr	r0, .L143+36
 21352 00b4 8047     		blx	r0
 21353 00b6 0328     		cmp	r0, #3
 21354 00b8 13D1     		bne	.L140
2376:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 21355              		.loc 1 2376 0
 21356 00ba 40F2FF50 		movw	r0, #1535
 21357 00be 2749     		ldr	r1, .L143+32
 21358 00c0 8847     		blx	r1
2379:sdcard.c      ****   response_r1 = SDIO_GetResponse(SDIO_RESP1);
 21359              		.loc 1 2379 0
 21360 00c2 234B     		ldr	r3, .L143+20
 21361 00c4 2046     		mov	r0, r4
 21362 00c6 9847     		blx	r3
 21363              	.LVL158:
2383:sdcard.c      ****     *prca = (uint16_t) (response_r1 >> 16);
 21364              		.loc 1 2383 0
 21365 00c8 030C     		lsrs	r3, r0, #16
2381:sdcard.c      ****   if (SD_ALLZERO == (response_r1 & (SD_R6_GENERAL_UNKNOWN_ERROR | SD_R6_ILLEGAL_CMD | SD_R6_COM_CRC
 21366              		.loc 1 2381 0
 21367 00ca 10F4604F 		tst	r0, #57344
 21368 00ce 0BD0     		beq	.L128
2389:sdcard.c      ****     return(SD_GENERAL_UNKNOWN_ERROR);
 21369              		.loc 1 2389 0
 21370 00d0 1324     		movs	r4, #19
2387:sdcard.c      ****   if (response_r1 & SD_R6_GENERAL_UNKNOWN_ERROR)
 21371              		.loc 1 2387 0
 21372 00d2 8304     		lsls	r3, r0, #18
 21373 00d4 30D4     		bmi	.L125
2392:sdcard.c      ****   if (response_r1 & SD_R6_ILLEGAL_CMD)
 21374              		.loc 1 2392 0
 21375 00d6 4404     		lsls	r4, r0, #17
 21376 00d8 03D4     		bmi	.L140
2397:sdcard.c      ****   if (response_r1 & SD_R6_COM_CRC_FAILED)
 21377              		.loc 1 2397 0
 21378 00da 0004     		lsls	r0, r0, #16
 21379              	.LVL159:
 21380 00dc 03D5     		bpl	.L137
2399:sdcard.c      ****     return(SD_COM_CRC_FAILED);
 21381              		.loc 1 2399 0
 21382 00de 0F24     		movs	r4, #15
 21383 00e0 2AE0     		b	.L125
 21384              	.L140:
2394:sdcard.c      ****     return(SD_ILLEGAL_CMD);
 21385              		.loc 1 2394 0
 21386 00e2 1024     		movs	r4, #16
 21387 00e4 28E0     		b	.L125
 21388              	.LVL160:
 21389              	.L137:
 21390              	.LBE45:
 21391              	.LBE44:
 349:sdcard.c      ****   uint16_t rca = 0x01;
 21392              		.loc 1 349 0
 21393 00e6 0123     		movs	r3, #1
 21394              	.L128:
 21395              	.LVL161:
 399:sdcard.c      ****   if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 21396              		.loc 1 399 0
 21397 00e8 154C     		ldr	r4, .L143+4
 21398 00ea 2268     		ldr	r2, [r4, #0]
 426:sdcard.c      ****   return(errorstatus);
 21399              		.loc 1 426 0
 21400 00ec 2A24     		movs	r4, #42
 399:sdcard.c      ****   if (SDIO_SECURE_DIGITAL_IO_CARD != CardType)
 21401              		.loc 1 399 0
 21402 00ee 042A     		cmp	r2, #4
 21403 00f0 22D0     		beq	.L125
 401:sdcard.c      ****     RCA = rca;
 21404              		.loc 1 401 0
 21405 00f2 1C48     		ldr	r0, .L143+40
 406:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 21406              		.loc 1 406 0
 21407 00f4 C025     		movs	r5, #192
 401:sdcard.c      ****     RCA = rca;
 21408              		.loc 1 401 0
 21409 00f6 0360     		str	r3, [r0, #0]
 404:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 21410              		.loc 1 404 0
 21411 00f8 1248     		ldr	r0, .L143+8
 21412 00fa 1C04     		lsls	r4, r3, #16
 405:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
 21413              		.loc 1 405 0
 21414 00fc 0922     		movs	r2, #9
 406:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Long;
 21415              		.loc 1 406 0
 21416 00fe 8560     		str	r5, [r0, #8]
 408:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21417              		.loc 1 408 0
 21418 0100 4FF48061 		mov	r1, #1024
 407:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 21419              		.loc 1 407 0
 21420 0104 0025     		movs	r5, #0
 404:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)(rca << 16);
 21421              		.loc 1 404 0
 21422 0106 0460     		str	r4, [r0, #0]
 405:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_CSD;
 21423              		.loc 1 405 0
 21424 0108 4260     		str	r2, [r0, #4]
 408:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 21425              		.loc 1 408 0
 21426 010a 0161     		str	r1, [r0, #16]
 407:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 21427              		.loc 1 407 0
 21428 010c C560     		str	r5, [r0, #12]
 409:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 21429              		.loc 1 409 0
 21430 010e 0E4B     		ldr	r3, .L143+12
 21431              	.LVL162:
 21432 0110 9847     		blx	r3
 21433              	.LVL163:
 411:sdcard.c      ****     errorstatus = CmdResp2Error();
 21434              		.loc 1 411 0
 21435 0112 0E48     		ldr	r0, .L143+16
 21436 0114 8047     		blx	r0
 413:sdcard.c      ****     if (SD_OK != errorstatus)
 21437              		.loc 1 413 0
 21438 0116 2A28     		cmp	r0, #42
 411:sdcard.c      ****     errorstatus = CmdResp2Error();
 21439              		.loc 1 411 0
 21440 0118 0446     		mov	r4, r0
 21441              	.LVL164:
 413:sdcard.c      ****     if (SD_OK != errorstatus)
 21442              		.loc 1 413 0
 21443 011a 0DD1     		bne	.L125
 418:sdcard.c      ****     CSD_Tab[0] = SDIO_GetResponse(SDIO_RESP1);
 21444              		.loc 1 418 0
 21445 011c 0C4E     		ldr	r6, .L143+20
 21446 011e 2846     		mov	r0, r5
 21447              	.LVL165:
 21448 0120 B047     		blx	r6
 21449 0122 114D     		ldr	r5, .L143+44
 21450 0124 2860     		str	r0, [r5, #0]
 419:sdcard.c      ****     CSD_Tab[1] = SDIO_GetResponse(SDIO_RESP2);
 21451              		.loc 1 419 0
 21452 0126 0420     		movs	r0, #4
 21453 0128 B047     		blx	r6
 21454 012a 6860     		str	r0, [r5, #4]
 420:sdcard.c      ****     CSD_Tab[2] = SDIO_GetResponse(SDIO_RESP3);
 21455              		.loc 1 420 0
 21456 012c 0820     		movs	r0, #8
 21457 012e B047     		blx	r6
 21458 0130 A860     		str	r0, [r5, #8]
 421:sdcard.c      ****     CSD_Tab[3] = SDIO_GetResponse(SDIO_RESP4);
 21459              		.loc 1 421 0
 21460 0132 0C20     		movs	r0, #12
 21461 0134 B047     		blx	r6
 21462 0136 E860     		str	r0, [r5, #12]
 21463              	.LVL166:
 21464              	.L125:
 427:sdcard.c      **** }
 21465              		.loc 1 427 0
 21466 0138 2046     		mov	r0, r4
 21467 013a 70BD     		pop	{r4, r5, r6, pc}
 21468              	.L144:
 21469              		.align	2
 21470              	.L143:
 21471 013c 00000000 		.word	SDIO_GetPowerState
 21472 0140 00000000 		.word	.LANCHOR1
 21473 0144 00000000 		.word	SDIO_CmdInitStructure
 21474 0148 00000000 		.word	SDIO_SendCommand
 21475 014c 00000000 		.word	CmdResp2Error
 21476 0150 00000000 		.word	SDIO_GetResponse
 21477 0154 00000000 		.word	.LANCHOR2
 21478 0158 00800140 		.word	1073840128
 21479 015c 00000000 		.word	SDIO_ClearFlag
 21480 0160 00000000 		.word	SDIO_GetCommandResponse
 21481 0164 00000000 		.word	.LANCHOR0
 21482 0168 00000000 		.word	.LANCHOR3
 21483              		.cfi_endproc
 21484              	.LFE32:
 21486              		.section	.text.SD_Init,"ax",%progbits
 21487              		.align	1
 21488              		.global	SD_Init
 21489              		.thumb
 21490              		.thumb_func
 21492              	SD_Init:
 21493              	.LFB29:
 139:sdcard.c      **** {
 21494              		.loc 1 139 0
 21495              		.cfi_startproc
 21496              		@ args = 0, pretend = 0, frame = 8
 21497              		@ frame_needed = 0, uses_anonymous_args = 0
 21498              	.LVL167:
 21499 0000 13B5     		push	{r0, r1, r4, lr}
 21500              	.LCFI12:
 21501              		.cfi_def_cfa_offset 16
 21502              		.cfi_offset 14, -4
 21503              		.cfi_offset 4, -8
 21504              		.cfi_offset 1, -12
 21505              		.cfi_offset 0, -16
 21506              	.LBB46:
 21507              	.LBB47:
2817:sdcard.c      ****   RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD, ENABLE);
 21508              		.loc 1 2817 0
 21509 0002 3020     		movs	r0, #48
 21510 0004 0121     		movs	r1, #1
 21511 0006 1B4C     		ldr	r4, .L147
 21512 0008 A047     		blx	r4
2821:sdcard.c      ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 21513              		.loc 1 2821 0
 21514 000a 0323     		movs	r3, #3
2822:sdcard.c      ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 21515              		.loc 1 2822 0
 21516 000c 1822     		movs	r2, #24
2820:sdcard.c      ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | GPIO_Pin_11 | GPIO_Pin_12;
 21517              		.loc 1 2820 0
 21518 000e 4FF4F85C 		mov	ip, #7936	@ movhi
 21519 0012 ADF804C0 		strh	ip, [sp, #4]	@ movhi
2821:sdcard.c      ****   GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 21520              		.loc 1 2821 0
 21521 0016 8DF80630 		strb	r3, [sp, #6]
2822:sdcard.c      ****   GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 21522              		.loc 1 2822 0
 21523 001a 8DF80720 		strb	r2, [sp, #7]
2823:sdcard.c      ****   GPIO_Init(GPIOC, &GPIO_InitStructure);
 21524              		.loc 1 2823 0
 21525 001e 164C     		ldr	r4, .L147+4
 21526 0020 1648     		ldr	r0, .L147+8
 21527 0022 01A9     		add	r1, sp, #4
 21528 0024 A047     		blx	r4
2826:sdcard.c      ****   GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 21529              		.loc 1 2826 0
 21530 0026 0421     		movs	r1, #4
 21531 0028 ADF80410 		strh	r1, [sp, #4]	@ movhi
2827:sdcard.c      ****   GPIO_Init(GPIOD, &GPIO_InitStructure);
 21532              		.loc 1 2827 0
 21533 002c 1448     		ldr	r0, .L147+12
 21534 002e 01A9     		add	r1, sp, #4
 21535 0030 A047     		blx	r4
 21536              	.LBE47:
 21537              	.LBE46:
 146:sdcard.c      ****   RCC_AHBPeriphClockCmd(RCC_AHBPeriph_SDIO, ENABLE);
 21538              		.loc 1 146 0
 21539 0032 0121     		movs	r1, #1
 21540 0034 134C     		ldr	r4, .L147+16
 21541 0036 4FF48060 		mov	r0, #1024
 21542 003a A047     		blx	r4
 149:sdcard.c      ****   RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA2, ENABLE);
 21543              		.loc 1 149 0
 21544 003c 0121     		movs	r1, #1
 21545 003e 0220     		movs	r0, #2
 21546 0040 A047     		blx	r4
 151:sdcard.c      ****   SDIO_DeInit();
 21547              		.loc 1 151 0
 21548 0042 1148     		ldr	r0, .L147+20
 21549 0044 8047     		blx	r0
 153:sdcard.c      ****   errorstatus = SD_PowerON();
 21550              		.loc 1 153 0
 21551 0046 114B     		ldr	r3, .L147+24
 21552 0048 9847     		blx	r3
 155:sdcard.c      ****   if (errorstatus != SD_OK)
 21553              		.loc 1 155 0
 21554 004a 2A28     		cmp	r0, #42
 153:sdcard.c      ****   errorstatus = SD_PowerON();
 21555              		.loc 1 153 0
 21556 004c 0446     		mov	r4, r0
 21557              	.LVL168:
 155:sdcard.c      ****   if (errorstatus != SD_OK)
 21558              		.loc 1 155 0
 21559 004e 0FD1     		bne	.L146
 161:sdcard.c      ****   errorstatus = SD_InitializeCards();
 21560              		.loc 1 161 0
 21561 0050 0F48     		ldr	r0, .L147+28
 21562              	.LVL169:
 21563 0052 8047     		blx	r0
 163:sdcard.c      ****   if (errorstatus != SD_OK)
 21564              		.loc 1 163 0
 21565 0054 2A28     		cmp	r0, #42
 161:sdcard.c      ****   errorstatus = SD_InitializeCards();
 21566              		.loc 1 161 0
 21567 0056 0446     		mov	r4, r0
 21568              	.LVL170:
 163:sdcard.c      ****   if (errorstatus != SD_OK)
 21569              		.loc 1 163 0
 21570 0058 0AD1     		bne	.L146
 171:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 21571              		.loc 1 171 0
 21572 005a 0E48     		ldr	r0, .L147+32
 21573              	.LVL171:
 172:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 21574              		.loc 1 172 0
 21575 005c 0022     		movs	r2, #0
 171:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 21576              		.loc 1 171 0
 21577 005e 0123     		movs	r3, #1
 21578 0060 0375     		strb	r3, [r0, #20]
 172:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 21579              		.loc 1 172 0
 21580 0062 0260     		str	r2, [r0, #0]
 173:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 21581              		.loc 1 173 0
 21582 0064 4260     		str	r2, [r0, #4]
 174:sdcard.c      ****   SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 21583              		.loc 1 174 0
 21584 0066 8260     		str	r2, [r0, #8]
 175:sdcard.c      ****   SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 21585              		.loc 1 175 0
 21586 0068 C260     		str	r2, [r0, #12]
 176:sdcard.c      ****   SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 21587              		.loc 1 176 0
 21588 006a 0261     		str	r2, [r0, #16]
 177:sdcard.c      ****   SDIO_Init(&SDIO_InitStructure);
 21589              		.loc 1 177 0
 21590 006c 0A49     		ldr	r1, .L147+36
 21591 006e 8847     		blx	r1
 21592              	.LVL172:
 21593              	.L146:
 180:sdcard.c      **** }
 21594              		.loc 1 180 0
 21595 0070 2046     		mov	r0, r4
 21596 0072 1CBD     		pop	{r2, r3, r4, pc}
 21597              	.L148:
 21598              		.align	2
 21599              	.L147:
 21600 0074 00000000 		.word	RCC_APB2PeriphClockCmd
 21601 0078 00000000 		.word	GPIO_Init
 21602 007c 00100140 		.word	1073811456
 21603 0080 00140140 		.word	1073812480
 21604 0084 00000000 		.word	RCC_AHBPeriphClockCmd
 21605 0088 00000000 		.word	SDIO_DeInit
 21606 008c 00000000 		.word	SD_PowerON
 21607 0090 00000000 		.word	SD_InitializeCards
 21608 0094 00000000 		.word	SDIO_InitStructure
 21609 0098 00000000 		.word	SDIO_Init
 21610              		.cfi_endproc
 21611              	.LFE29:
 21613              		.section	.text.SD_GetCardInfo,"ax",%progbits
 21614              		.align	1
 21615              		.global	SD_GetCardInfo
 21616              		.thumb
 21617              		.thumb_func
 21619              	SD_GetCardInfo:
 21620              	.LFB33:
 436:sdcard.c      **** {
 21621              		.loc 1 436 0
 21622              		.cfi_startproc
 21623              		@ args = 0, pretend = 0, frame = 0
 21624              		@ frame_needed = 0, uses_anonymous_args = 0
 21625              	.LVL173:
 441:sdcard.c      ****   cardinfo->RCA = (uint16_t)RCA;
 21626              		.loc 1 441 0
 21627 0000 A04B     		ldr	r3, .L152
 436:sdcard.c      **** {
 21628              		.loc 1 436 0
 21629 0002 30B5     		push	{r4, r5, lr}
 21630              	.LCFI13:
 21631              		.cfi_def_cfa_offset 12
 21632              		.cfi_offset 14, -4
 21633              		.cfi_offset 5, -8
 21634              		.cfi_offset 4, -12
 441:sdcard.c      ****   cardinfo->RCA = (uint16_t)RCA;
 21635              		.loc 1 441 0
 21636 0004 1988     		ldrh	r1, [r3, #0]
 440:sdcard.c      ****   cardinfo->CardType = (uint8_t)CardType;
 21637              		.loc 1 440 0
 21638 0006 A04C     		ldr	r4, .L152+4
 441:sdcard.c      ****   cardinfo->RCA = (uint16_t)RCA;
 21639              		.loc 1 441 0
 21640 0008 A0F84C10 		strh	r1, [r0, #76]	@ movhi
 444:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 21641              		.loc 1 444 0
 21642 000c 9F49     		ldr	r1, .L152+8
 440:sdcard.c      ****   cardinfo->CardType = (uint8_t)CardType;
 21643              		.loc 1 440 0
 21644 000e 2468     		ldr	r4, [r4, #0]
 444:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 21645              		.loc 1 444 0
 21646 0010 0B68     		ldr	r3, [r1, #0]
 440:sdcard.c      ****   cardinfo->CardType = (uint8_t)CardType;
 21647              		.loc 1 440 0
 21648 0012 80F84E40 		strb	r4, [r0, #78]
 444:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0xFF000000) >> 24);
 21649              		.loc 1 444 0
 21650 0016 1A0E     		lsrs	r2, r3, #24
 21651              	.LVL174:
 445:sdcard.c      ****   cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 21652              		.loc 1 445 0
 21653 0018 9509     		lsrs	r5, r2, #6
 446:sdcard.c      ****   cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 21654              		.loc 1 446 0
 21655 001a C2F3830C 		ubfx	ip, r2, #2, #4
 447:sdcard.c      ****   cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 21656              		.loc 1 447 0
 21657 001e 02F00302 		and	r2, r2, #3
 21658              	.LVL175:
 445:sdcard.c      ****   cardinfo->SD_csd.CSDStruct = (tmp & 0xC0) >> 6;
 21659              		.loc 1 445 0
 21660 0022 0570     		strb	r5, [r0, #0]
 446:sdcard.c      ****   cardinfo->SD_csd.SysSpecVersion = (tmp & 0x3C) >> 2;
 21661              		.loc 1 446 0
 21662 0024 80F801C0 		strb	ip, [r0, #1]
 450:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0x00FF0000) >> 16);
 21663              		.loc 1 450 0
 21664 0028 C3F30745 		ubfx	r5, r3, #16, #8
 21665              	.LVL176:
 447:sdcard.c      ****   cardinfo->SD_csd.Reserved1 = tmp & 0x03;
 21666              		.loc 1 447 0
 21667 002c 8270     		strb	r2, [r0, #2]
 454:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[0] & 0x0000FF00) >> 8);
 21668              		.loc 1 454 0
 21669 002e C3F3072C 		ubfx	ip, r3, #8, #8
 21670              	.LVL177:
 458:sdcard.c      ****   tmp = (uint8_t)(CSD_Tab[0] & 0x000000FF);
 21671              		.loc 1 458 0
 21672 0032 DAB2     		uxtb	r2, r3
 21673              	.LVL178:
 451:sdcard.c      ****   cardinfo->SD_csd.TAAC = tmp;
 21674              		.loc 1 451 0
 21675 0034 C570     		strb	r5, [r0, #3]
 455:sdcard.c      ****   cardinfo->SD_csd.NSAC = tmp;
 21676              		.loc 1 455 0
 21677 0036 80F804C0 		strb	ip, [r0, #4]
 459:sdcard.c      ****   cardinfo->SD_csd.MaxBusClkFrec = tmp;
 21678              		.loc 1 459 0
 21679 003a 4271     		strb	r2, [r0, #5]
 462:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[1] & 0xFF000000) >> 24);
 21680              		.loc 1 462 0
 21681 003c 4A68     		ldr	r2, [r1, #4]
 21682              	.LVL179:
 463:sdcard.c      ****   cardinfo->SD_csd.CardComdClasses = tmp << 4;
 21683              		.loc 1 463 0
 21684 003e 150E     		lsrs	r5, r2, #24
 21685 0040 2B01     		lsls	r3, r5, #4
 21686 0042 C380     		strh	r3, [r0, #6]	@ movhi
 467:sdcard.c      ****   cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 21687              		.loc 1 467 0
 21688 0044 C588     		ldrh	r5, [r0, #6]
 466:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[1] & 0x00FF0000) >> 16);
 21689              		.loc 1 466 0
 21690 0046 C2F3074C 		ubfx	ip, r2, #16, #8
 21691              	.LVL180:
 467:sdcard.c      ****   cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 21692              		.loc 1 467 0
 21693 004a ABB2     		uxth	r3, r5
 21694 004c 43EA1C15 		orr	r5, r3, ip, lsr #4
 468:sdcard.c      ****   cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 21695              		.loc 1 468 0
 21696 0050 0CF00F03 		and	r3, ip, #15
 467:sdcard.c      ****   cardinfo->SD_csd.CardComdClasses |= (tmp & 0xF0) >> 4;
 21697              		.loc 1 467 0
 21698 0054 C580     		strh	r5, [r0, #6]	@ movhi
 468:sdcard.c      ****   cardinfo->SD_csd.RdBlockLen = tmp & 0x0F;
 21699              		.loc 1 468 0
 21700 0056 0372     		strb	r3, [r0, #8]
 471:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[1] & 0x0000FF00) >> 8);
 21701              		.loc 1 471 0
 21702 0058 C2F30723 		ubfx	r3, r2, #8, #8
 21703              	.LVL181:
 472:sdcard.c      ****   cardinfo->SD_csd.PartBlockRead = (tmp & 0x80) >> 7;
 21704              		.loc 1 472 0
 21705 005c DD09     		lsrs	r5, r3, #7
 21706 005e 4572     		strb	r5, [r0, #9]
 473:sdcard.c      ****   cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 21707              		.loc 1 473 0
 21708 0060 C3F3801C 		ubfx	ip, r3, #6, #1
 474:sdcard.c      ****   cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 21709              		.loc 1 474 0
 21710 0064 C3F34015 		ubfx	r5, r3, #5, #1
 473:sdcard.c      ****   cardinfo->SD_csd.WrBlockMisalign = (tmp & 0x40) >> 6;
 21711              		.loc 1 473 0
 21712 0068 80F80AC0 		strb	ip, [r0, #10]
 474:sdcard.c      ****   cardinfo->SD_csd.RdBlockMisalign = (tmp & 0x20) >> 5;
 21713              		.loc 1 474 0
 21714 006c C572     		strb	r5, [r0, #11]
 475:sdcard.c      ****   cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 21715              		.loc 1 475 0
 21716 006e C3F3001C 		ubfx	ip, r3, #4, #1
 476:sdcard.c      ****   cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
 21717              		.loc 1 476 0
 21718 0072 0025     		movs	r5, #0
 478:sdcard.c      ****   if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 21719              		.loc 1 478 0
 21720 0074 012C     		cmp	r4, #1
 475:sdcard.c      ****   cardinfo->SD_csd.DSRImpl = (tmp & 0x10) >> 4;
 21721              		.loc 1 475 0
 21722 0076 80F80CC0 		strb	ip, [r0, #12]
 476:sdcard.c      ****   cardinfo->SD_csd.Reserved2 = 0; /* Reserved */
 21723              		.loc 1 476 0
 21724 007a 4573     		strb	r5, [r0, #13]
 478:sdcard.c      ****   if ((CardType == SDIO_STD_CAPACITY_SD_CARD_V1_1) || (CardType == SDIO_STD_CAPACITY_SD_CARD_V2_0))
 21725              		.loc 1 478 0
 21726 007c 36D8     		bhi	.L150
 480:sdcard.c      ****     cardinfo->SD_csd.DeviceSize = (tmp & 0x03) << 10;
 21727              		.loc 1 480 0
 21728 007e 03F00303 		and	r3, r3, #3
 21729              	.LVL182:
 21730 0082 9C02     		lsls	r4, r3, #10
 21731 0084 0461     		str	r4, [r0, #16]
 21732              	.LVL183:
 484:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp) << 2;
 21733              		.loc 1 484 0
 21734 0086 0569     		ldr	r5, [r0, #16]
 21735 0088 5FFA82FC 		uxtb	ip, r2
 21736 008c 45EA8C03 		orr	r3, r5, ip, lsl #2
 21737 0090 0361     		str	r3, [r0, #16]
 487:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 21738              		.loc 1 487 0
 21739 0092 8B68     		ldr	r3, [r1, #8]
 488:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 21740              		.loc 1 488 0
 21741 0094 0469     		ldr	r4, [r0, #16]
 487:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 21742              		.loc 1 487 0
 21743 0096 1D0E     		lsrs	r5, r3, #24
 21744              	.LVL184:
 488:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 21745              		.loc 1 488 0
 21746 0098 44EA9511 		orr	r1, r4, r5, lsr #6
 490:sdcard.c      ****     cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 21747              		.loc 1 490 0
 21748 009c C5F3C202 		ubfx	r2, r5, #3, #3
 488:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp & 0xC0) >> 6;
 21749              		.loc 1 488 0
 21750 00a0 0161     		str	r1, [r0, #16]
 490:sdcard.c      ****     cardinfo->SD_csd.MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 21751              		.loc 1 490 0
 21752 00a2 0275     		strb	r2, [r0, #20]
 494:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x00FF0000) >> 16);
 21753              		.loc 1 494 0
 21754 00a4 C3F30742 		ubfx	r2, r3, #16, #8
 21755              	.LVL185:
 491:sdcard.c      ****     cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 21756              		.loc 1 491 0
 21757 00a8 05F00704 		and	r4, r5, #7
 497:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 21758              		.loc 1 497 0
 21759 00ac 02F00305 		and	r5, r2, #3
 491:sdcard.c      ****     cardinfo->SD_csd.MaxRdCurrentVDDMax = (tmp & 0x07);
 21760              		.loc 1 491 0
 21761 00b0 4475     		strb	r4, [r0, #21]
 495:sdcard.c      ****     cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 21762              		.loc 1 495 0
 21763 00b2 5109     		lsrs	r1, r2, #5
 496:sdcard.c      ****     cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 21764              		.loc 1 496 0
 21765 00b4 C2F3820C 		ubfx	ip, r2, #2, #3
 497:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 21766              		.loc 1 497 0
 21767 00b8 6C00     		lsls	r4, r5, #1
 495:sdcard.c      ****     cardinfo->SD_csd.MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 21768              		.loc 1 495 0
 21769 00ba 8175     		strb	r1, [r0, #22]
 496:sdcard.c      ****     cardinfo->SD_csd.MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 21770              		.loc 1 496 0
 21771 00bc 80F817C0 		strb	ip, [r0, #23]
 497:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul = (tmp & 0x03) << 1;
 21772              		.loc 1 497 0
 21773 00c0 0476     		strb	r4, [r0, #24]
 500:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 21774              		.loc 1 500 0
 21775 00c2 017E     		ldrb	r1, [r0, #24]	@ zero_extendqisi2
 499:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 21776              		.loc 1 499 0
 21777 00c4 C3F30723 		ubfx	r3, r3, #8, #8
 21778              	.LVL186:
 500:sdcard.c      ****     cardinfo->SD_csd.DeviceSizeMul |= (tmp & 0x80) >> 7;
 21779              		.loc 1 500 0
 21780 00c8 41EAD31C 		orr	ip, r1, r3, lsr #7
 21781 00cc 80F818C0 		strb	ip, [r0, #24]
 502:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 21782              		.loc 1 502 0
 21783 00d0 0469     		ldr	r4, [r0, #16]
 503:sdcard.c      ****     cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 21784              		.loc 1 503 0
 21785 00d2 017E     		ldrb	r1, [r0, #24]	@ zero_extendqisi2
 504:sdcard.c      ****     cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 21786              		.loc 1 504 0
 21787 00d4 0125     		movs	r5, #1
 21788 00d6 027A     		ldrb	r2, [r0, #8]	@ zero_extendqisi2
 502:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) ;
 21789              		.loc 1 502 0
 21790 00d8 6419     		adds	r4, r4, r5
 503:sdcard.c      ****     cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 21791              		.loc 1 503 0
 21792 00da 0231     		adds	r1, r1, #2
 504:sdcard.c      ****     cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 21793              		.loc 1 504 0
 21794 00dc 15FA02F2 		lsls	r2, r5, r2
 503:sdcard.c      ****     cardinfo->CardCapacity *= (1 << (cardinfo->SD_csd.DeviceSizeMul + 2));
 21795              		.loc 1 503 0
 21796 00e0 14FA01F5 		lsls	r5, r4, r1
 504:sdcard.c      ****     cardinfo->CardBlockSize = 1 << (cardinfo->SD_csd.RdBlockLen);
 21797              		.loc 1 504 0
 21798 00e4 8264     		str	r2, [r0, #72]
 505:sdcard.c      ****     cardinfo->CardCapacity *= cardinfo->CardBlockSize;
 21799              		.loc 1 505 0
 21800 00e6 6A43     		muls	r2, r5, r2
 21801 00e8 4264     		str	r2, [r0, #68]
 21802 00ea 1AE0     		b	.L151
 21803              	.L150:
 507:sdcard.c      ****   else if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 21804              		.loc 1 507 0
 21805 00ec 022C     		cmp	r4, #2
 21806 00ee 18D1     		bne	.L151
 21807              	.LVL187:
 511:sdcard.c      ****     cardinfo->SD_csd.DeviceSize = (tmp & 0x3F) << 16;
 21808              		.loc 1 511 0
 21809 00f0 02F03F05 		and	r5, r2, #63
 21810 00f4 2B04     		lsls	r3, r5, #16
 21811 00f6 0361     		str	r3, [r0, #16]
 514:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0xFF000000) >> 24);
 21812              		.loc 1 514 0
 21813 00f8 8B68     		ldr	r3, [r1, #8]
 21814              	.LVL188:
 516:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp << 8);
 21815              		.loc 1 516 0
 21816 00fa 0469     		ldr	r4, [r0, #16]
 21817 00fc 1A0E     		lsrs	r2, r3, #24
 21818 00fe 44EA0221 		orr	r1, r4, r2, lsl #8
 21819 0102 0161     		str	r1, [r0, #16]
 21820              	.LVL189:
 521:sdcard.c      ****     cardinfo->SD_csd.DeviceSize |= (tmp);
 21821              		.loc 1 521 0
 21822 0104 0569     		ldr	r5, [r0, #16]
 21823 0106 C3F3074C 		ubfx	ip, r3, #16, #8
 21824 010a 4CEA0502 		orr	r2, ip, r5
 21825 010e 0261     		str	r2, [r0, #16]
 526:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 21826              		.loc 1 526 0
 21827 0110 0469     		ldr	r4, [r0, #16]
 527:sdcard.c      ****     cardinfo->CardBlockSize = 512;    
 21828              		.loc 1 527 0
 21829 0112 4FF40072 		mov	r2, #512
 526:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 21830              		.loc 1 526 0
 21831 0116 651C     		adds	r5, r4, #1
 21832 0118 E904     		lsls	r1, r5, #19
 524:sdcard.c      ****     tmp = (uint8_t)((CSD_Tab[2] & 0x0000FF00) >> 8);
 21833              		.loc 1 524 0
 21834 011a C3F30723 		ubfx	r3, r3, #8, #8
 21835              	.LVL190:
 526:sdcard.c      ****     cardinfo->CardCapacity = (cardinfo->SD_csd.DeviceSize + 1) * 512 * 1024;
 21836              		.loc 1 526 0
 21837 011e 4164     		str	r1, [r0, #68]
 527:sdcard.c      ****     cardinfo->CardBlockSize = 512;    
 21838              		.loc 1 527 0
 21839 0120 8264     		str	r2, [r0, #72]
 21840              	.LVL191:
 21841              	.L151:
 531:sdcard.c      ****   cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 21842              		.loc 1 531 0
 21843 0122 C3F38012 		ubfx	r2, r3, #6, #1
 532:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 21844              		.loc 1 532 0
 21845 0126 03F03F03 		and	r3, r3, #63
 21846              	.LVL192:
 21847 012a 5900     		lsls	r1, r3, #1
 535:sdcard.c      ****   tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 21848              		.loc 1 535 0
 21849 012c 574B     		ldr	r3, .L152+8
 531:sdcard.c      ****   cardinfo->SD_csd.EraseGrSize = (tmp & 0x40) >> 6;
 21850              		.loc 1 531 0
 21851 012e 4276     		strb	r2, [r0, #25]
 532:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul = (tmp & 0x3F) << 1;
 21852              		.loc 1 532 0
 21853 0130 8176     		strb	r1, [r0, #26]
 536:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 21854              		.loc 1 536 0
 21855 0132 857E     		ldrb	r5, [r0, #26]	@ zero_extendqisi2
 535:sdcard.c      ****   tmp = (uint8_t)(CSD_Tab[2] & 0x000000FF);
 21856              		.loc 1 535 0
 21857 0134 1C7A     		ldrb	r4, [r3, #8]	@ zero_extendqisi2
 21858              	.LVL193:
 536:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 21859              		.loc 1 536 0
 21860 0136 45EAD41C 		orr	ip, r5, r4, lsr #7
 537:sdcard.c      ****   cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 21861              		.loc 1 537 0
 21862 013a 04F07F02 		and	r2, r4, #127
 536:sdcard.c      ****   cardinfo->SD_csd.EraseGrMul |= (tmp & 0x80) >> 7;
 21863              		.loc 1 536 0
 21864 013e 80F81AC0 		strb	ip, [r0, #26]
 537:sdcard.c      ****   cardinfo->SD_csd.WrProtectGrSize = (tmp & 0x7F);
 21865              		.loc 1 537 0
 21866 0142 C276     		strb	r2, [r0, #27]
 540:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[3] & 0xFF000000) >> 24);
 21867              		.loc 1 540 0
 21868 0144 DA68     		ldr	r2, [r3, #12]
 21869 0146 140E     		lsrs	r4, r2, #24
 21870              	.LVL194:
 541:sdcard.c      ****   cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 21871              		.loc 1 541 0
 21872 0148 E109     		lsrs	r1, r4, #7
 544:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 21873              		.loc 1 544 0
 21874 014a 04F00303 		and	r3, r4, #3
 541:sdcard.c      ****   cardinfo->SD_csd.WrProtectGrEnable = (tmp & 0x80) >> 7;
 21875              		.loc 1 541 0
 21876 014e 0177     		strb	r1, [r0, #28]
 542:sdcard.c      ****   cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 21877              		.loc 1 542 0
 21878 0150 C4F34115 		ubfx	r5, r4, #5, #2
 544:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 21879              		.loc 1 544 0
 21880 0154 9900     		lsls	r1, r3, #2
 543:sdcard.c      ****   cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 21881              		.loc 1 543 0
 21882 0156 C4F3820C 		ubfx	ip, r4, #2, #3
 542:sdcard.c      ****   cardinfo->SD_csd.ManDeflECC = (tmp & 0x60) >> 5;
 21883              		.loc 1 542 0
 21884 015a 4577     		strb	r5, [r0, #29]
 543:sdcard.c      ****   cardinfo->SD_csd.WrSpeedFact = (tmp & 0x1C) >> 2;
 21885              		.loc 1 543 0
 21886 015c 80F81EC0 		strb	ip, [r0, #30]
 544:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen = (tmp & 0x03) << 2;
 21887              		.loc 1 544 0
 21888 0160 C177     		strb	r1, [r0, #31]
 548:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 21889              		.loc 1 548 0
 21890 0162 C57F     		ldrb	r5, [r0, #31]	@ zero_extendqisi2
 547:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[3] & 0x00FF0000) >> 16);
 21891              		.loc 1 547 0
 21892 0164 C2F3074C 		ubfx	ip, r2, #16, #8
 21893              	.LVL195:
 548:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 21894              		.loc 1 548 0
 21895 0168 45EA9C14 		orr	r4, r5, ip, lsr #6
 549:sdcard.c      ****   cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 21896              		.loc 1 549 0
 21897 016c CCF34013 		ubfx	r3, ip, #5, #1
 550:sdcard.c      ****   cardinfo->SD_csd.Reserved3 = 0;
 21898              		.loc 1 550 0
 21899 0170 0021     		movs	r1, #0
 551:sdcard.c      ****   cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 21900              		.loc 1 551 0
 21901 0172 0CF00105 		and	r5, ip, #1
 548:sdcard.c      ****   cardinfo->SD_csd.MaxWrBlockLen |= (tmp & 0xC0) >> 6;
 21902              		.loc 1 548 0
 21903 0176 C477     		strb	r4, [r0, #31]
 549:sdcard.c      ****   cardinfo->SD_csd.WriteBlockPaPartial = (tmp & 0x20) >> 5;
 21904              		.loc 1 549 0
 21905 0178 80F82030 		strb	r3, [r0, #32]
 550:sdcard.c      ****   cardinfo->SD_csd.Reserved3 = 0;
 21906              		.loc 1 550 0
 21907 017c 80F82110 		strb	r1, [r0, #33]
 551:sdcard.c      ****   cardinfo->SD_csd.ContentProtectAppli = (tmp & 0x01);
 21908              		.loc 1 551 0
 21909 0180 80F82250 		strb	r5, [r0, #34]
 554:sdcard.c      ****   tmp = (uint8_t)((CSD_Tab[3] & 0x0000FF00) >> 8);
 21910              		.loc 1 554 0
 21911 0184 C2F30725 		ubfx	r5, r2, #8, #8
 21912              	.LVL196:
 555:sdcard.c      ****   cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 21913              		.loc 1 555 0
 21914 0188 EC09     		lsrs	r4, r5, #7
 556:sdcard.c      ****   cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 21915              		.loc 1 556 0
 21916 018a C5F38013 		ubfx	r3, r5, #6, #1
 555:sdcard.c      ****   cardinfo->SD_csd.FileFormatGrouop = (tmp & 0x80) >> 7;
 21917              		.loc 1 555 0
 21918 018e 80F82340 		strb	r4, [r0, #35]
 557:sdcard.c      ****   cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 21919              		.loc 1 557 0
 21920 0192 C5F34011 		ubfx	r1, r5, #5, #1
 556:sdcard.c      ****   cardinfo->SD_csd.CopyFlag = (tmp & 0x40) >> 6;
 21921              		.loc 1 556 0
 21922 0196 80F82430 		strb	r3, [r0, #36]
 558:sdcard.c      ****   cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 21923              		.loc 1 558 0
 21924 019a C5F30014 		ubfx	r4, r5, #4, #1
 559:sdcard.c      ****   cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 21925              		.loc 1 559 0
 21926 019e C5F3810C 		ubfx	ip, r5, #2, #2
 560:sdcard.c      ****   cardinfo->SD_csd.ECC = (tmp & 0x03);
 21927              		.loc 1 560 0
 21928 01a2 05F00303 		and	r3, r5, #3
 557:sdcard.c      ****   cardinfo->SD_csd.PermWrProtect = (tmp & 0x20) >> 5;
 21929              		.loc 1 557 0
 21930 01a6 80F82510 		strb	r1, [r0, #37]
 558:sdcard.c      ****   cardinfo->SD_csd.TempWrProtect = (tmp & 0x10) >> 4;
 21931              		.loc 1 558 0
 21932 01aa 80F82640 		strb	r4, [r0, #38]
 559:sdcard.c      ****   cardinfo->SD_csd.FileFormat = (tmp & 0x0C) >> 2;
 21933              		.loc 1 559 0
 21934 01ae 80F827C0 		strb	ip, [r0, #39]
 560:sdcard.c      ****   cardinfo->SD_csd.ECC = (tmp & 0x03);
 21935              		.loc 1 560 0
 21936 01b2 80F82830 		strb	r3, [r0, #40]
 21937              	.LVL197:
 569:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 21938              		.loc 1 569 0
 21939 01b6 364B     		ldr	r3, .L152+12
 564:sdcard.c      ****   cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 21940              		.loc 1 564 0
 21941 01b8 C2F34601 		ubfx	r1, r2, #1, #7
 569:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 21942              		.loc 1 569 0
 21943 01bc 1A68     		ldr	r2, [r3, #0]
 564:sdcard.c      ****   cardinfo->SD_csd.CSD_CRC = (tmp & 0xFE) >> 1;
 21944              		.loc 1 564 0
 21945 01be 80F82910 		strb	r1, [r0, #41]
 569:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[0] & 0xFF000000) >> 24);
 21946              		.loc 1 569 0
 21947 01c2 140E     		lsrs	r4, r2, #24
 21948              	.LVL198:
 565:sdcard.c      ****   cardinfo->SD_csd.Reserved4 = 1;
 21949              		.loc 1 565 0
 21950 01c4 0121     		movs	r1, #1
 574:sdcard.c      ****   cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 21951              		.loc 1 574 0
 21952 01c6 C2F30745 		ubfx	r5, r2, #16, #8
 565:sdcard.c      ****   cardinfo->SD_csd.Reserved4 = 1;
 21953              		.loc 1 565 0
 21954 01ca 80F82A10 		strb	r1, [r0, #42]
 570:sdcard.c      ****   cardinfo->SD_cid.ManufacturerID = tmp;
 21955              		.loc 1 570 0
 21956 01ce 80F82C40 		strb	r4, [r0, #44]
 21957              	.LVL199:
 574:sdcard.c      ****   cardinfo->SD_cid.OEM_AppliID = tmp << 8;
 21958              		.loc 1 574 0
 21959 01d2 2C02     		lsls	r4, r5, #8
 21960 01d4 C485     		strh	r4, [r0, #46]	@ movhi
 21961              	.LVL200:
 578:sdcard.c      ****   cardinfo->SD_cid.OEM_AppliID |= tmp;
 21962              		.loc 1 578 0
 21963 01d6 B0F82EC0 		ldrh	ip, [r0, #46]
 21964 01da C2F30725 		ubfx	r5, r2, #8, #8
 21965 01de 1FFA8CF4 		uxth	r4, ip
 21966 01e2 44EA050C 		orr	ip, r4, r5
 582:sdcard.c      ****   cardinfo->SD_cid.ProdName1 = tmp << 24;
 21967              		.loc 1 582 0
 21968 01e6 1206     		lsls	r2, r2, #24
 578:sdcard.c      ****   cardinfo->SD_cid.OEM_AppliID |= tmp;
 21969              		.loc 1 578 0
 21970 01e8 A0F82EC0 		strh	ip, [r0, #46]	@ movhi
 21971              	.LVL201:
 582:sdcard.c      ****   cardinfo->SD_cid.ProdName1 = tmp << 24;
 21972              		.loc 1 582 0
 21973 01ec 0263     		str	r2, [r0, #48]
 585:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[1] & 0xFF000000) >> 24);
 21974              		.loc 1 585 0
 21975 01ee 5A68     		ldr	r2, [r3, #4]
 21976              	.LVL202:
 586:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp << 16;
 21977              		.loc 1 586 0
 21978 01f0 046B     		ldr	r4, [r0, #48]
 21979 01f2 150E     		lsrs	r5, r2, #24
 21980 01f4 44EA0545 		orr	r5, r4, r5, lsl #16
 21981 01f8 0563     		str	r5, [r0, #48]
 21982              	.LVL203:
 590:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp << 8;
 21983              		.loc 1 590 0
 21984 01fa 046B     		ldr	r4, [r0, #48]
 21985 01fc C2F3074C 		ubfx	ip, r2, #16, #8
 21986 0200 44EA0C24 		orr	r4, r4, ip, lsl #8
 21987 0204 0463     		str	r4, [r0, #48]
 21988              	.LVL204:
 594:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp;
 21989              		.loc 1 594 0
 21990 0206 046B     		ldr	r4, [r0, #48]
 21991 0208 C2F30725 		ubfx	r5, r2, #8, #8
 597:sdcard.c      ****   tmp = (uint8_t)(CID_Tab[1] & 0x000000FF);
 21992              		.loc 1 597 0
 21993 020c 5FFA82FC 		uxtb	ip, r2
 21994              	.LVL205:
 601:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 21995              		.loc 1 601 0
 21996 0210 9A68     		ldr	r2, [r3, #8]
 594:sdcard.c      ****   cardinfo->SD_cid.ProdName1 |= tmp;
 21997              		.loc 1 594 0
 21998 0212 45EA0404 		orr	r4, r5, r4
 21999 0216 0463     		str	r4, [r0, #48]
 601:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[2] & 0xFF000000) >> 24);
 22000              		.loc 1 601 0
 22001 0218 150E     		lsrs	r5, r2, #24
 22002              	.LVL206:
 606:sdcard.c      ****   cardinfo->SD_cid.ProdSN = tmp << 24;
 22003              		.loc 1 606 0
 22004 021a C2F30744 		ubfx	r4, r2, #16, #8
 598:sdcard.c      ****   cardinfo->SD_cid.ProdName2 = tmp;
 22005              		.loc 1 598 0
 22006 021e 80F834C0 		strb	ip, [r0, #52]
 602:sdcard.c      ****   cardinfo->SD_cid.ProdRev = tmp;
 22007              		.loc 1 602 0
 22008 0222 80F83550 		strb	r5, [r0, #53]
 22009              	.LVL207:
 606:sdcard.c      ****   cardinfo->SD_cid.ProdSN = tmp << 24;
 22010              		.loc 1 606 0
 22011 0226 2506     		lsls	r5, r4, #24
 22012 0228 8563     		str	r5, [r0, #56]
 22013              	.LVL208:
 610:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp << 16;
 22014              		.loc 1 610 0
 22015 022a 846B     		ldr	r4, [r0, #56]
 22016 022c C2F30725 		ubfx	r5, r2, #8, #8
 22017 0230 44EA0544 		orr	r4, r4, r5, lsl #16
 22018 0234 8463     		str	r4, [r0, #56]
 22019              	.LVL209:
 614:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp << 8;
 22020              		.loc 1 614 0
 22021 0236 846B     		ldr	r4, [r0, #56]
 22022 0238 5FFA82FC 		uxtb	ip, r2
 22023 023c 44EA0C22 		orr	r2, r4, ip, lsl #8
 22024 0240 8263     		str	r2, [r0, #56]
 618:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp;
 22025              		.loc 1 618 0
 22026 0242 846B     		ldr	r4, [r0, #56]
 617:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[3] & 0xFF000000) >> 24);
 22027              		.loc 1 617 0
 22028 0244 DB68     		ldr	r3, [r3, #12]
 22029              	.LVL210:
 618:sdcard.c      ****   cardinfo->SD_cid.ProdSN |= tmp;
 22030              		.loc 1 618 0
 22031 0246 44EA1362 		orr	r2, r4, r3, lsr #24
 22032 024a 8263     		str	r2, [r0, #56]
 622:sdcard.c      ****   cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 22033              		.loc 1 622 0
 22034 024c 90F83C40 		ldrb	r4, [r0, #60]	@ zero_extendqisi2
 621:sdcard.c      ****   tmp = (uint8_t)((CID_Tab[3] & 0x00FF0000) >> 16);
 22035              		.loc 1 621 0
 22036 0250 C3F3074C 		ubfx	ip, r3, #16, #8
 22037              	.LVL211:
 622:sdcard.c      ****   cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 22038              		.loc 1 622 0
 22039 0254 44EA1C12 		orr	r2, r4, ip, lsr #4
 623:sdcard.c      ****   cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 22040              		.loc 1 623 0
 22041 0258 0CF00F04 		and	r4, ip, #15
 622:sdcard.c      ****   cardinfo->SD_cid.Reserved1 |= (tmp & 0xF0) >> 4;
 22042              		.loc 1 622 0
 22043 025c 80F83C20 		strb	r2, [r0, #60]
 623:sdcard.c      ****   cardinfo->SD_cid.ManufactDate = (tmp & 0x0F) << 8;
 22044              		.loc 1 623 0
 22045 0260 2202     		lsls	r2, r4, #8
 22046 0262 C287     		strh	r2, [r0, #62]	@ movhi
 22047              	.LVL212:
 627:sdcard.c      ****   cardinfo->SD_cid.ManufactDate |= tmp;
 22048              		.loc 1 627 0
 22049 0264 C48F     		ldrh	r4, [r0, #62]
 22050 0266 1FFA84FC 		uxth	ip, r4
 22051 026a C3F30724 		ubfx	r4, r3, #8, #8
 22052 026e 4CEA0402 		orr	r2, ip, r4
 631:sdcard.c      ****   cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 22053              		.loc 1 631 0
 22054 0272 C3F3460C 		ubfx	ip, r3, #1, #7
 627:sdcard.c      ****   cardinfo->SD_cid.ManufactDate |= tmp;
 22055              		.loc 1 627 0
 22056 0276 C287     		strh	r2, [r0, #62]	@ movhi
 22057              	.LVL213:
 631:sdcard.c      ****   cardinfo->SD_cid.CID_CRC = (tmp & 0xFE) >> 1;
 22058              		.loc 1 631 0
 22059 0278 80F840C0 		strb	ip, [r0, #64]
 632:sdcard.c      ****   cardinfo->SD_cid.Reserved2 = 1;
 22060              		.loc 1 632 0
 22061 027c 80F84110 		strb	r1, [r0, #65]
 635:sdcard.c      **** }
 22062              		.loc 1 635 0
 22063 0280 2A20     		movs	r0, #42
 22064              	.LVL214:
 22065 0282 30BD     		pop	{r4, r5, pc}
 22066              	.L153:
 22067              		.align	2
 22068              	.L152:
 22069 0284 00000000 		.word	.LANCHOR0
 22070 0288 00000000 		.word	.LANCHOR1
 22071 028c 00000000 		.word	.LANCHOR3
 22072 0290 00000000 		.word	.LANCHOR2
 22073              		.cfi_endproc
 22074              	.LFE33:
 22076              		.section	.text.SD_EnableWideBusOperation,"ax",%progbits
 22077              		.align	1
 22078              		.global	SD_EnableWideBusOperation
 22079              		.thumb
 22080              		.thumb_func
 22082              	SD_EnableWideBusOperation:
 22083              	.LFB34:
 648:sdcard.c      **** {
 22084              		.loc 1 648 0
 22085              		.cfi_startproc
 22086              		@ args = 0, pretend = 0, frame = 0
 22087              		@ frame_needed = 0, uses_anonymous_args = 0
 22088              	.LVL215:
 22089 0000 38B5     		push	{r3, r4, r5, lr}
 22090              	.LCFI14:
 22091              		.cfi_def_cfa_offset 16
 22092              		.cfi_offset 14, -4
 22093              		.cfi_offset 5, -8
 22094              		.cfi_offset 4, -12
 22095              		.cfi_offset 3, -16
 652:sdcard.c      ****   if (SDIO_MULTIMEDIA_CARD == CardType)
 22096              		.loc 1 652 0
 22097 0002 184B     		ldr	r3, .L161
 648:sdcard.c      **** {
 22098              		.loc 1 648 0
 22099 0004 0546     		mov	r5, r0
 652:sdcard.c      ****   if (SDIO_MULTIMEDIA_CARD == CardType)
 22100              		.loc 1 652 0
 22101 0006 1B68     		ldr	r3, [r3, #0]
 22102 0008 032B     		cmp	r3, #3
 22103 000a 28D0     		beq	.L159
 649:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 22104              		.loc 1 649 0
 22105 000c 2A24     		movs	r4, #42
 657:sdcard.c      ****   else if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardT
 22106              		.loc 1 657 0
 22107 000e 022B     		cmp	r3, #2
 22108 0010 26D8     		bhi	.L155
 659:sdcard.c      ****     if (SDIO_BusWide_8b == WideMode)
 22109              		.loc 1 659 0
 22110 0012 B0F5805F 		cmp	r0, #4096
 22111 0016 22D0     		beq	.L159
 664:sdcard.c      ****     else if (SDIO_BusWide_4b == WideMode)
 22112              		.loc 1 664 0
 22113 0018 B0F5006F 		cmp	r0, #2048
 22114 001c 124B     		ldr	r3, .L161+4
 22115 001e 0DD1     		bne	.L156
 666:sdcard.c      ****       errorstatus = SDEnWideBus(ENABLE);
 22116              		.loc 1 666 0
 22117 0020 0120     		movs	r0, #1
 22118              	.LVL216:
 22119 0022 9847     		blx	r3
 668:sdcard.c      ****       if (SD_OK == errorstatus)
 22120              		.loc 1 668 0
 22121 0024 2A28     		cmp	r0, #42
 666:sdcard.c      ****       errorstatus = SDEnWideBus(ENABLE);
 22122              		.loc 1 666 0
 22123 0026 0446     		mov	r4, r0
 22124              	.LVL217:
 668:sdcard.c      ****       if (SD_OK == errorstatus)
 22125              		.loc 1 668 0
 22126 0028 1AD1     		bne	.L155
 671:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 22127              		.loc 1 671 0
 22128 002a 1048     		ldr	r0, .L161+8
 22129              	.LVL218:
 672:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 22130              		.loc 1 672 0
 22131 002c 0023     		movs	r3, #0
 671:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 22132              		.loc 1 671 0
 22133 002e 0121     		movs	r1, #1
 22134 0030 0175     		strb	r1, [r0, #20]
 672:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 22135              		.loc 1 672 0
 22136 0032 0360     		str	r3, [r0, #0]
 673:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 22137              		.loc 1 673 0
 22138 0034 4360     		str	r3, [r0, #4]
 674:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 22139              		.loc 1 674 0
 22140 0036 8360     		str	r3, [r0, #8]
 675:sdcard.c      ****         SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_4b;
 22141              		.loc 1 675 0
 22142 0038 C560     		str	r5, [r0, #12]
 22143 003a 0CE0     		b	.L160
 22144              	.LVL219:
 22145              	.L156:
 682:sdcard.c      ****       errorstatus = SDEnWideBus(DISABLE);
 22146              		.loc 1 682 0
 22147 003c 0020     		movs	r0, #0
 22148 003e 9847     		blx	r3
 684:sdcard.c      ****       if (SD_OK == errorstatus)
 22149              		.loc 1 684 0
 22150 0040 2A28     		cmp	r0, #42
 682:sdcard.c      ****       errorstatus = SDEnWideBus(DISABLE);
 22151              		.loc 1 682 0
 22152 0042 0446     		mov	r4, r0
 22153              	.LVL220:
 684:sdcard.c      ****       if (SD_OK == errorstatus)
 22154              		.loc 1 684 0
 22155 0044 0CD1     		bne	.L155
 687:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 22156              		.loc 1 687 0
 22157 0046 0948     		ldr	r0, .L161+8
 22158              	.LVL221:
 688:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 22159              		.loc 1 688 0
 22160 0048 0023     		movs	r3, #0
 687:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockDiv = SDIO_TRANSFER_CLK_DIV; 
 22161              		.loc 1 687 0
 22162 004a 0122     		movs	r2, #1
 22163 004c 0275     		strb	r2, [r0, #20]
 688:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockEdge = SDIO_ClockEdge_Rising;
 22164              		.loc 1 688 0
 22165 004e 0360     		str	r3, [r0, #0]
 689:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockBypass = SDIO_ClockBypass_Disable;
 22166              		.loc 1 689 0
 22167 0050 4360     		str	r3, [r0, #4]
 690:sdcard.c      ****         SDIO_InitStructure.SDIO_ClockPowerSave = SDIO_ClockPowerSave_Disable;
 22168              		.loc 1 690 0
 22169 0052 8360     		str	r3, [r0, #8]
 691:sdcard.c      ****         SDIO_InitStructure.SDIO_BusWide = SDIO_BusWide_1b;
 22170              		.loc 1 691 0
 22171 0054 C360     		str	r3, [r0, #12]
 22172              	.LVL222:
 22173              	.L160:
 692:sdcard.c      ****         SDIO_InitStructure.SDIO_HardwareFlowControl = SDIO_HardwareFlowControl_Disable;
 22174              		.loc 1 692 0
 22175 0056 0361     		str	r3, [r0, #16]
 693:sdcard.c      ****         SDIO_Init(&SDIO_InitStructure);
 22176              		.loc 1 693 0
 22177 0058 054B     		ldr	r3, .L161+12
 22178 005a 9847     		blx	r3
 22179 005c 00E0     		b	.L155
 22180              	.LVL223:
 22181              	.L159:
 662:sdcard.c      ****       return(errorstatus);
 22182              		.loc 1 662 0
 22183 005e 2724     		movs	r4, #39
 22184              	.LVL224:
 22185              	.L155:
 699:sdcard.c      **** }
 22186              		.loc 1 699 0
 22187 0060 2046     		mov	r0, r4
 22188 0062 38BD     		pop	{r3, r4, r5, pc}
 22189              	.L162:
 22190              		.align	2
 22191              	.L161:
 22192 0064 00000000 		.word	.LANCHOR1
 22193 0068 00000000 		.word	SDEnWideBus
 22194 006c 00000000 		.word	SDIO_InitStructure
 22195 0070 00000000 		.word	SDIO_Init
 22196              		.cfi_endproc
 22197              	.LFE34:
 22199              		.section	.text.SD_SetDeviceMode,"ax",%progbits
 22200              		.align	1
 22201              		.global	SD_SetDeviceMode
 22202              		.thumb
 22203              		.thumb_func
 22205              	SD_SetDeviceMode:
 22206              	.LFB35:
 712:sdcard.c      **** {
 22207              		.loc 1 712 0
 22208              		.cfi_startproc
 22209              		@ args = 0, pretend = 0, frame = 0
 22210              		@ frame_needed = 0, uses_anonymous_args = 0
 22211              		@ link register save eliminated.
 22212              	.LVL225:
 715:sdcard.c      ****   if ((Mode == SD_DMA_MODE) || (Mode == SD_INTERRUPT_MODE) || (Mode == SD_POLLING_MODE))
 22213              		.loc 1 715 0
 22214 0000 0228     		cmp	r0, #2
 22215 0002 03D8     		bhi	.L165
 717:sdcard.c      ****     DeviceMode = Mode;
 22216              		.loc 1 717 0
 22217 0004 024B     		ldr	r3, .L166
 22218 0006 1860     		str	r0, [r3, #0]
 713:sdcard.c      ****   SD_Error errorstatus = SD_OK;
 22219              		.loc 1 713 0
 22220 0008 2A20     		movs	r0, #42
 22221              	.LVL226:
 22222 000a 7047     		bx	lr
 22223              	.LVL227:
 22224              	.L165:
 721:sdcard.c      ****     errorstatus = SD_INVALID_PARAMETER;
 22225              		.loc 1 721 0
 22226 000c 2620     		movs	r0, #38
 22227              	.LVL228:
 725:sdcard.c      **** }
 22228              		.loc 1 725 0
 22229 000e 7047     		bx	lr
 22230              	.L167:
 22231              		.align	2
 22232              	.L166:
 22233 0010 00000000 		.word	.LANCHOR4
 22234              		.cfi_endproc
 22235              	.LFE35:
 22237              		.section	.text.SD_SelectDeselect,"ax",%progbits
 22238              		.align	1
 22239              		.global	SD_SelectDeselect
 22240              		.thumb
 22241              		.thumb_func
 22243              	SD_SelectDeselect:
 22244              	.LFB36:
 733:sdcard.c      **** {
 22245              		.loc 1 733 0
 22246              		.cfi_startproc
 22247              		@ args = 0, pretend = 0, frame = 0
 22248              		@ frame_needed = 0, uses_anonymous_args = 0
 22249              	.LVL229:
 737:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument =  addr;
 22250              		.loc 1 737 0
 22251 0000 094B     		ldr	r3, .L169
 733:sdcard.c      **** {
 22252              		.loc 1 733 0
 22253 0002 10B5     		push	{r4, lr}
 22254              	.LCFI15:
 22255              		.cfi_def_cfa_offset 8
 22256              		.cfi_offset 14, -4
 22257              		.cfi_offset 4, -8
 739:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22258              		.loc 1 739 0
 22259 0004 4021     		movs	r1, #64
 737:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument =  addr;
 22260              		.loc 1 737 0
 22261 0006 1860     		str	r0, [r3, #0]
 738:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
 22262              		.loc 1 738 0
 22263 0008 0724     		movs	r4, #7
 740:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22264              		.loc 1 740 0
 22265 000a 0020     		movs	r0, #0
 22266              	.LVL230:
 741:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22267              		.loc 1 741 0
 22268 000c 4FF48062 		mov	r2, #1024
 738:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEL_DESEL_CARD;
 22269              		.loc 1 738 0
 22270 0010 5C60     		str	r4, [r3, #4]
 739:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22271              		.loc 1 739 0
 22272 0012 9960     		str	r1, [r3, #8]
 740:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22273              		.loc 1 740 0
 22274 0014 D860     		str	r0, [r3, #12]
 741:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22275              		.loc 1 741 0
 22276 0016 1A61     		str	r2, [r3, #16]
 742:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 22277              		.loc 1 742 0
 22278 0018 1846     		mov	r0, r3
 22279 001a 0449     		ldr	r1, .L169+4
 22280 001c 8847     		blx	r1
 22281              	.LVL231:
 744:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEL_DESEL_CARD);
 22282              		.loc 1 744 0
 22283 001e 2046     		mov	r0, r4
 22284 0020 034B     		ldr	r3, .L169+8
 22285 0022 9847     		blx	r3
 22286              	.LVL232:
 747:sdcard.c      **** }
 22287              		.loc 1 747 0
 22288 0024 10BD     		pop	{r4, pc}
 22289              	.L170:
 22290 0026 00BF     		.align	2
 22291              	.L169:
 22292 0028 00000000 		.word	SDIO_CmdInitStructure
 22293 002c 00000000 		.word	SDIO_SendCommand
 22294 0030 00000000 		.word	CmdResp1Error
 22295              		.cfi_endproc
 22296              	.LFE36:
 22298              		.section	.text.SD_ReadBlock,"ax",%progbits
 22299              		.align	1
 22300              		.global	SD_ReadBlock
 22301              		.thumb
 22302              		.thumb_func
 22304              	SD_ReadBlock:
 22305              	.LFB37:
 758:sdcard.c      **** {
 22306              		.loc 1 758 0
 22307              		.cfi_startproc
 22308              		@ args = 0, pretend = 0, frame = 0
 22309              		@ frame_needed = 0, uses_anonymous_args = 0
 22310              	.LVL233:
 22311 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 22312              	.LCFI16:
 22313              		.cfi_def_cfa_offset 40
 22314              		.cfi_offset 14, -4
 22315              		.cfi_offset 11, -8
 22316              		.cfi_offset 10, -12
 22317              		.cfi_offset 9, -16
 22318              		.cfi_offset 8, -20
 22319              		.cfi_offset 7, -24
 22320              		.cfi_offset 6, -28
 22321              		.cfi_offset 5, -32
 22322              		.cfi_offset 4, -36
 22323              		.cfi_offset 3, -40
 758:sdcard.c      **** {
 22324              		.loc 1 758 0
 22325 0004 0546     		mov	r5, r0
 22326 0006 0C46     		mov	r4, r1
 22327 0008 1746     		mov	r7, r2
 763:sdcard.c      ****   if (NULL == readbuff)
 22328              		.loc 1 763 0
 22329 000a 0029     		cmp	r1, #0
 22330 000c 00F0FB80 		beq	.L193
 769:sdcard.c      ****   TransferError = SD_OK;
 22331              		.loc 1 769 0
 22332 0010 7F49     		ldr	r1, .L203
 22333              	.LVL234:
 22334 0012 2A26     		movs	r6, #42
 770:sdcard.c      ****   TransferEnd = 0;
 22335              		.loc 1 770 0
 22336 0014 7F4B     		ldr	r3, .L203+4
 771:sdcard.c      ****   TotalNumberOfBytes = 0;
 22337              		.loc 1 771 0
 22338 0016 8048     		ldr	r0, .L203+8
 22339              	.LVL235:
 769:sdcard.c      ****   TransferError = SD_OK;
 22340              		.loc 1 769 0
 22341 0018 0E70     		strb	r6, [r1, #0]
 770:sdcard.c      ****   TransferEnd = 0;
 22342              		.loc 1 770 0
 22343 001a 0026     		movs	r6, #0
 771:sdcard.c      ****   TotalNumberOfBytes = 0;
 22344              		.loc 1 771 0
 22345 001c 0660     		str	r6, [r0, #0]
 770:sdcard.c      ****   TransferEnd = 0;
 22346              		.loc 1 770 0
 22347 001e 1E60     		str	r6, [r3, #0]
 774:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 22348              		.loc 1 774 0
 22349 0020 7E48     		ldr	r0, .L203+12
 22350 0022 7F4B     		ldr	r3, .L203+16
 776:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 22351              		.loc 1 776 0
 22352 0024 8660     		str	r6, [r0, #8]
 775:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
 22353              		.loc 1 775 0
 22354 0026 80E84800 		stmia	r0, {r3, r6}
 777:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 22355              		.loc 1 777 0
 22356 002a C660     		str	r6, [r0, #12]
 778:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 22357              		.loc 1 778 0
 22358 002c 0661     		str	r6, [r0, #16]
 779:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 22359              		.loc 1 779 0
 22360 002e 4661     		str	r6, [r0, #20]
 780:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 22361              		.loc 1 780 0
 22362 0030 7C4A     		ldr	r2, .L203+20
 22363              	.LVL236:
 22364 0032 9047     		blx	r2
 781:sdcard.c      ****   SDIO_DMACmd(DISABLE);
 22365              		.loc 1 781 0
 22366 0034 3046     		mov	r0, r6
 22367 0036 7C49     		ldr	r1, .L203+24
 22368 0038 8847     		blx	r1
 783:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 22369              		.loc 1 783 0
 22370 003a 3046     		mov	r0, r6
 22371 003c 7B4B     		ldr	r3, .L203+28
 22372 003e 9847     		blx	r3
 22373 0040 8601     		lsls	r6, r0, #6
 22374 0042 00F1DE80 		bmi	.L192
 789:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 22375              		.loc 1 789 0
 22376 0046 7A48     		ldr	r0, .L203+32
 22377 0048 0268     		ldr	r2, [r0, #0]
 22378 004a 022A     		cmp	r2, #2
 22379 004c 02D1     		bne	.L173
 22380              	.LVL237:
 792:sdcard.c      ****     addr /= 512;
 22381              		.loc 1 792 0
 22382 004e 6D0A     		lsrs	r5, r5, #9
 22383              	.LVL238:
 791:sdcard.c      ****     BlockSize = 512;
 22384              		.loc 1 791 0
 22385 0050 4FF40077 		mov	r7, #512
 22386              	.LVL239:
 22387              	.L173:
 794:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 22388              		.loc 1 794 0
 22389 0054 07F1FF3B 		add	fp, r7, #-1
 22390 0058 1FFA8BFC 		uxth	ip, fp
 22391 005c BCF5006F 		cmp	ip, #2048
 22392 0060 80F0D180 		bcs	.L193
 794:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 22393              		.loc 1 794 0 is_stmt 0 discriminator 1
 22394 0064 1BEA070B 		ands	fp, fp, r7
 22395 0068 08BF     		it	eq
 22396 006a B846     		moveq	r8, r7
 22397 006c 06D0     		beq	.L174
 22398 006e CAE0     		b	.L193
 22399              	.LVL240:
 22400              	.L175:
 22401              	.LBB48:
 22402              	.LBB49:
2802:sdcard.c      ****     count++;
 22403              		.loc 1 2802 0 is_stmt 1
 22404 0070 0BF1010B 		add	fp, fp, #1
 22405              	.LVL241:
2801:sdcard.c      ****     NumberOfBytes >>= 1;
 22406              		.loc 1 2801 0
 22407 0074 C8F34F08 		ubfx	r8, r8, #1, #16
 22408              	.LVL242:
2802:sdcard.c      ****     count++;
 22409              		.loc 1 2802 0
 22410 0078 5FFA8BFB 		uxtb	fp, fp
 22411              	.LVL243:
 22412              	.L174:
2799:sdcard.c      ****   while (NumberOfBytes != 1)
 22413              		.loc 1 2799 0
 22414 007c B8F1010F 		cmp	r8, #1
 22415 0080 F6D1     		bne	.L175
 22416              	.LVL244:
 22417              	.LBE49:
 22418              	.LBE48:
 799:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 22419              		.loc 1 799 0
 22420 0082 DFF8E091 		ldr	r9, .L203+84
 800:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 22421              		.loc 1 800 0
 22422 0086 1026     		movs	r6, #16
 801:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22423              		.loc 1 801 0
 22424 0088 4020     		movs	r0, #64
 803:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22425              		.loc 1 803 0
 22426 008a 4FF48062 		mov	r2, #1024
 802:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22427              		.loc 1 802 0
 22428 008e 4FF0000A 		mov	sl, #0
 800:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 22429              		.loc 1 800 0
 22430 0092 C9F80460 		str	r6, [r9, #4]
 801:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22431              		.loc 1 801 0
 22432 0096 C9F80800 		str	r0, [r9, #8]
 803:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22433              		.loc 1 803 0
 22434 009a C9F81020 		str	r2, [r9, #16]
 804:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 22435              		.loc 1 804 0
 22436 009e 4846     		mov	r0, r9
 22437 00a0 6449     		ldr	r1, .L203+36
 799:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 22438              		.loc 1 799 0
 22439 00a2 C9F80070 		str	r7, [r9, #0]
 802:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22440              		.loc 1 802 0
 22441 00a6 C9F80CA0 		str	sl, [r9, #12]
 804:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 22442              		.loc 1 804 0
 22443 00aa 8847     		blx	r1
 806:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 22444              		.loc 1 806 0
 22445 00ac 3046     		mov	r0, r6
 22446 00ae 624B     		ldr	r3, .L203+40
 22447 00b0 9847     		blx	r3
 808:sdcard.c      ****     if (SD_OK != errorstatus)
 22448              		.loc 1 808 0
 22449 00b2 2A28     		cmp	r0, #42
 806:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 22450              		.loc 1 806 0
 22451 00b4 0646     		mov	r6, r0
 22452              	.LVL245:
 808:sdcard.c      ****     if (SD_OK != errorstatus)
 22453              		.loc 1 808 0
 22454 00b6 40F0A780 		bne	.L172
 819:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 22455              		.loc 1 819 0
 22456 00ba 5848     		ldr	r0, .L203+12
 22457              	.LVL246:
 22458 00bc 584B     		ldr	r3, .L203+16
 822:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 22459              		.loc 1 822 0
 22460 00be 0222     		movs	r2, #2
 820:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 22461              		.loc 1 820 0
 22462 00c0 80E88800 		stmia	r0, {r3, r7}
 821:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 22463              		.loc 1 821 0
 22464 00c4 4FEA0B13 		lsl	r3, fp, #4
 22465 00c8 8360     		str	r3, [r0, #8]
 822:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 22466              		.loc 1 822 0
 22467 00ca C260     		str	r2, [r0, #12]
 823:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 22468              		.loc 1 823 0
 22469 00cc C0F810A0 		str	sl, [r0, #16]
 824:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 22470              		.loc 1 824 0
 22471 00d0 C0F81480 		str	r8, [r0, #20]
 825:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 22472              		.loc 1 825 0
 22473 00d4 5349     		ldr	r1, .L203+20
 22474 00d6 8847     		blx	r1
 827:sdcard.c      ****   TotalNumberOfBytes = BlockSize;
 22475              		.loc 1 827 0
 22476 00d8 4F4E     		ldr	r6, .L203+8
 22477              	.LVL247:
 828:sdcard.c      ****   StopCondition = 0;
 22478              		.loc 1 828 0
 22479 00da 584B     		ldr	r3, .L203+44
 829:sdcard.c      ****   DestBuffer = readbuff;
 22480              		.loc 1 829 0
 22481 00dc 5848     		ldr	r0, .L203+48
 834:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22482              		.loc 1 834 0
 22483 00de 4022     		movs	r2, #64
 836:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22484              		.loc 1 836 0
 22485 00e0 4FF48061 		mov	r1, #1024
 832:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 22486              		.loc 1 832 0
 22487 00e4 C9F80050 		str	r5, [r9, #0]
 833:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
 22488              		.loc 1 833 0
 22489 00e8 1125     		movs	r5, #17
 22490              	.LVL248:
 827:sdcard.c      ****   TotalNumberOfBytes = BlockSize;
 22491              		.loc 1 827 0
 22492 00ea 3760     		str	r7, [r6, #0]
 828:sdcard.c      ****   StopCondition = 0;
 22493              		.loc 1 828 0
 22494 00ec C3F800A0 		str	sl, [r3, #0]
 829:sdcard.c      ****   DestBuffer = readbuff;
 22495              		.loc 1 829 0
 22496 00f0 0460     		str	r4, [r0, #0]
 834:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22497              		.loc 1 834 0
 22498 00f2 C9F80820 		str	r2, [r9, #8]
 836:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22499              		.loc 1 836 0
 22500 00f6 C9F81010 		str	r1, [r9, #16]
 837:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 22501              		.loc 1 837 0
 22502 00fa 4846     		mov	r0, r9
 22503 00fc 4D4E     		ldr	r6, .L203+36
 833:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_SINGLE_BLOCK;
 22504              		.loc 1 833 0
 22505 00fe C9F80450 		str	r5, [r9, #4]
 835:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22506              		.loc 1 835 0
 22507 0102 C9F80CA0 		str	sl, [r9, #12]
 837:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 22508              		.loc 1 837 0
 22509 0106 B047     		blx	r6
 22510              	.LVL249:
 839:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
 22511              		.loc 1 839 0
 22512 0108 2846     		mov	r0, r5
 22513 010a 4B4B     		ldr	r3, .L203+40
 22514 010c 9847     		blx	r3
 841:sdcard.c      ****   if (errorstatus != SD_OK)
 22515              		.loc 1 841 0
 22516 010e 2A28     		cmp	r0, #42
 839:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_READ_SINGLE_BLOCK);
 22517              		.loc 1 839 0
 22518 0110 0646     		mov	r6, r0
 22519              	.LVL250:
 841:sdcard.c      ****   if (errorstatus != SD_OK)
 22520              		.loc 1 841 0
 22521 0112 79D1     		bne	.L172
 846:sdcard.c      ****   if (DeviceMode == SD_POLLING_MODE)
 22522              		.loc 1 846 0
 22523 0114 4B48     		ldr	r0, .L203+52
 22524              	.LVL251:
 22525 0116 0368     		ldr	r3, [r0, #0]
 22526 0118 022B     		cmp	r3, #2
 22527 011a 48D1     		bne	.L176
 849:sdcard.c      ****     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DB
 22528              		.loc 1 849 0 discriminator 1
 22529 011c DFF84891 		ldr	r9, .L203+88
 855:sdcard.c      ****           *(tempbuff + count) = SDIO_ReadData();
 22530              		.loc 1 855 0 discriminator 1
 22531 0120 DFF82C81 		ldr	r8, .L203+64
 22532              	.LVL252:
 22533 0124 09E0     		b	.L200
 22534              	.LVL253:
 22535              	.L180:
 851:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 22536              		.loc 1 851 0
 22537 0126 4FF40040 		mov	r0, #32768
 22538 012a A847     		blx	r5
 22539 012c 28B1     		cbz	r0, .L200
 22540              	.L179:
 855:sdcard.c      ****           *(tempbuff + count) = SDIO_ReadData();
 22541              		.loc 1 855 0 discriminator 2
 22542 012e C047     		blx	r8
 22543 0130 E051     		str	r0, [r4, r7]
 22544 0132 0437     		adds	r7, r7, #4
 853:sdcard.c      ****         for (count = 0; count < 8; count++)
 22545              		.loc 1 853 0 discriminator 2
 22546 0134 202F     		cmp	r7, #32
 22547 0136 FAD1     		bne	.L179
 857:sdcard.c      ****         tempbuff += 8;
 22548              		.loc 1 857 0
 22549 0138 2034     		adds	r4, r4, #32
 22550              	.LVL254:
 22551              	.L200:
 849:sdcard.c      ****     while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DB
 22552              		.loc 1 849 0 discriminator 1
 22553 013a D9F83450 		ldr	r5, [r9, #52]
 22554 013e 40F22A67 		movw	r7, #1578
 22555 0142 05EA0707 		and	r7, r5, r7
 22556 0146 404D     		ldr	r5, .L203+56
 22557 0148 002F     		cmp	r7, #0
 22558 014a ECD0     		beq	.L180
 861:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 22559              		.loc 1 861 0
 22560 014c 0820     		movs	r0, #8
 22561 014e A847     		blx	r5
 22562 0150 20B1     		cbz	r0, .L181
 863:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 22563              		.loc 1 863 0
 22564 0152 3E4E     		ldr	r6, .L203+60
 22565              	.LVL255:
 22566 0154 0820     		movs	r0, #8
 22567 0156 B047     		blx	r6
 22568              	.LVL256:
 865:sdcard.c      ****       return(errorstatus);
 22569              		.loc 1 865 0
 22570 0158 0426     		movs	r6, #4
 22571 015a 55E0     		b	.L172
 22572              	.LVL257:
 22573              	.L181:
 867:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 22574              		.loc 1 867 0
 22575 015c 0220     		movs	r0, #2
 22576 015e A847     		blx	r5
 22577 0160 20B1     		cbz	r0, .L182
 869:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 22578              		.loc 1 869 0
 22579 0162 0220     		movs	r0, #2
 22580 0164 3949     		ldr	r1, .L203+60
 22581 0166 8847     		blx	r1
 22582              	.LVL258:
 871:sdcard.c      ****       return(errorstatus);
 22583              		.loc 1 871 0
 22584 0168 0226     		movs	r6, #2
 22585 016a 4DE0     		b	.L172
 22586              	.LVL259:
 22587              	.L182:
 873:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 22588              		.loc 1 873 0
 22589 016c 2020     		movs	r0, #32
 22590 016e A847     		blx	r5
 22591 0170 20B1     		cbz	r0, .L183
 875:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 22592              		.loc 1 875 0
 22593 0172 2020     		movs	r0, #32
 22594 0174 354A     		ldr	r2, .L203+60
 22595 0176 9047     		blx	r2
 22596              	.LVL260:
 877:sdcard.c      ****       return(errorstatus);
 22597              		.loc 1 877 0
 22598 0178 0626     		movs	r6, #6
 22599 017a 45E0     		b	.L172
 22600              	.LVL261:
 22601              	.L183:
 879:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 22602              		.loc 1 879 0
 22603 017c 4FF40070 		mov	r0, #512
 22604 0180 A847     		blx	r5
 22605 0182 48B1     		cbz	r0, .L201
 881:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 22606              		.loc 1 881 0
 22607 0184 4FF40070 		mov	r0, #512
 22608 0188 304B     		ldr	r3, .L203+60
 22609 018a 9847     		blx	r3
 22610              	.LVL262:
 883:sdcard.c      ****       return(errorstatus);
 22611              		.loc 1 883 0
 22612 018c 0726     		movs	r6, #7
 22613 018e 3BE0     		b	.L172
 22614              	.LVL263:
 22615              	.L186:
 887:sdcard.c      ****       *tempbuff = SDIO_ReadData();
 22616              		.loc 1 887 0
 22617 0190 B847     		blx	r7
 22618 0192 44F8040B 		str	r0, [r4], #4
 22619              	.LVL264:
 22620 0196 00E0     		b	.L202
 22621              	.L201:
 887:sdcard.c      ****       *tempbuff = SDIO_ReadData();
 22622              		.loc 1 887 0 is_stmt 0 discriminator 1
 22623 0198 2D4F     		ldr	r7, .L203+64
 22624              	.L202:
 885:sdcard.c      ****     while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 22625              		.loc 1 885 0 is_stmt 1 discriminator 1
 22626 019a 4FF40010 		mov	r0, #2097152
 22627 019e A847     		blx	r5
 22628 01a0 0028     		cmp	r0, #0
 22629 01a2 F5D1     		bne	.L186
 892:sdcard.c      ****     SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 22630              		.loc 1 892 0
 22631 01a4 40F2FF50 		movw	r0, #1535
 22632 01a8 2849     		ldr	r1, .L203+60
 22633 01aa 8847     		blx	r1
 22634 01ac 2CE0     		b	.L172
 22635              	.LVL265:
 22636              	.L176:
 894:sdcard.c      ****   else if (DeviceMode == SD_INTERRUPT_MODE)
 22637              		.loc 1 894 0
 22638 01ae 012B     		cmp	r3, #1
 22639 01b0 14D1     		bne	.L187
 896:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT
 22640              		.loc 1 896 0
 22641 01b2 284A     		ldr	r2, .L203+68
 22642 01b4 48F22A30 		movw	r0, #33578
 22643 01b8 4146     		mov	r1, r8
 22644 01ba 9047     		blx	r2
 897:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 22645              		.loc 1 897 0
 22646 01bc 154A     		ldr	r2, .L203+4
 22647 01be 144B     		ldr	r3, .L203
 22648              	.L189:
 897:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 22649              		.loc 1 897 0 is_stmt 0 discriminator 1
 22650 01c0 1068     		ldr	r0, [r2, #0]
 22651 01c2 20B9     		cbnz	r0, .L188
 897:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 22652              		.loc 1 897 0 discriminator 2
 22653 01c4 93F800E0 		ldrb	lr, [r3, #0]	@ zero_extendqisi2
 22654 01c8 BEF12A0F 		cmp	lr, #42
 22655 01cc F8D0     		beq	.L189
 22656              	.L188:
 899:sdcard.c      ****     if (TransferError != SD_OK)
 22657              		.loc 1 899 0 is_stmt 1
 22658 01ce 1049     		ldr	r1, .L203
 22659 01d0 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 22660 01d2 2A2B     		cmp	r3, #42
 901:sdcard.c      ****       return(TransferError);
 22661              		.loc 1 901 0
 22662 01d4 1CBF     		itt	ne
 22663 01d6 0E4B     		ldrne	r3, .L203
 22664 01d8 1E78     		ldrbne	r6, [r3, #0]	@ zero_extendqisi2
 22665              	.LVL266:
 22666 01da 15E0     		b	.L172
 22667              	.LVL267:
 22668              	.L187:
 904:sdcard.c      ****   else if (DeviceMode == SD_DMA_MODE)
 22669              		.loc 1 904 0
 22670 01dc A3B9     		cbnz	r3, .L172
 906:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_IT
 22671              		.loc 1 906 0
 22672 01de 4146     		mov	r1, r8
 22673 01e0 1C4B     		ldr	r3, .L203+68
 22674 01e2 40F22A30 		movw	r0, #810
 22675 01e6 9847     		blx	r3
 907:sdcard.c      ****     SDIO_DMACmd(ENABLE);
 22676              		.loc 1 907 0
 22677 01e8 4046     		mov	r0, r8
 22678 01ea 0F4A     		ldr	r2, .L203+24
 22679 01ec 9047     		blx	r2
 908:sdcard.c      ****     DMA_RxConfiguration(readbuff, BlockSize);
 22680              		.loc 1 908 0
 22681 01ee 2046     		mov	r0, r4
 22682 01f0 3946     		mov	r1, r7
 22683 01f2 194C     		ldr	r4, .L203+72
 22684              	.LVL268:
 22685 01f4 A047     		blx	r4
 22686              	.LVL269:
 909:sdcard.c      ****     while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 22687              		.loc 1 909 0
 22688 01f6 194C     		ldr	r4, .L203+76
 22689              	.L190:
 909:sdcard.c      ****     while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 22690              		.loc 1 909 0 is_stmt 0 discriminator 1
 22691 01f8 1948     		ldr	r0, .L203+80
 22692 01fa A047     		blx	r4
 22693 01fc 0028     		cmp	r0, #0
 22694 01fe FBD0     		beq	.L190
 22695 0200 02E0     		b	.L172
 22696              	.LVL270:
 22697              	.L192:
 786:sdcard.c      ****     return(errorstatus);
 22698              		.loc 1 786 0 is_stmt 1
 22699 0202 0E26     		movs	r6, #14
 22700 0204 00E0     		b	.L172
 22701              	.L193:
 816:sdcard.c      ****     return(errorstatus);
 22702              		.loc 1 816 0
 22703 0206 2626     		movs	r6, #38
 22704              	.LVL271:
 22705              	.L172:
 913:sdcard.c      **** }
 22706              		.loc 1 913 0
 22707 0208 3046     		mov	r0, r6
 22708 020a BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 22709              	.L204:
 22710 020e 00BF     		.align	2
 22711              	.L203:
 22712 0210 00000000 		.word	.LANCHOR5
 22713 0214 00000000 		.word	.LANCHOR6
 22714 0218 00000000 		.word	.LANCHOR7
 22715 021c 00000000 		.word	SDIO_DataInitStructure
 22716 0220 FFFF0F00 		.word	1048575
 22717 0224 00000000 		.word	SDIO_DataConfig
 22718 0228 00000000 		.word	SDIO_DMACmd
 22719 022c 00000000 		.word	SDIO_GetResponse
 22720 0230 00000000 		.word	.LANCHOR1
 22721 0234 00000000 		.word	SDIO_SendCommand
 22722 0238 00000000 		.word	CmdResp1Error
 22723 023c 00000000 		.word	.LANCHOR8
 22724 0240 00000000 		.word	DestBuffer
 22725 0244 00000000 		.word	.LANCHOR4
 22726 0248 00000000 		.word	SDIO_GetFlagStatus
 22727 024c 00000000 		.word	SDIO_ClearFlag
 22728 0250 00000000 		.word	SDIO_ReadData
 22729 0254 00000000 		.word	SDIO_ITConfig
 22730 0258 00000000 		.word	DMA_RxConfiguration
 22731 025c 00000000 		.word	DMA_GetFlagStatus
 22732 0260 00200010 		.word	268443648
 22733 0264 00000000 		.word	SDIO_CmdInitStructure
 22734 0268 00800140 		.word	1073840128
 22735              		.cfi_endproc
 22736              	.LFE37:
 22738              		.section	.text.SD_ReadMultiBlocks,"ax",%progbits
 22739              		.align	1
 22740              		.global	SD_ReadMultiBlocks
 22741              		.thumb
 22742              		.thumb_func
 22744              	SD_ReadMultiBlocks:
 22745              	.LFB38:
 925:sdcard.c      **** {
 22746              		.loc 1 925 0
 22747              		.cfi_startproc
 22748              		@ args = 0, pretend = 0, frame = 8
 22749              		@ frame_needed = 0, uses_anonymous_args = 0
 22750              	.LVL272:
 22751 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 22752              	.LCFI17:
 22753              		.cfi_def_cfa_offset 48
 22754              		.cfi_offset 14, -4
 22755              		.cfi_offset 11, -8
 22756              		.cfi_offset 10, -12
 22757              		.cfi_offset 9, -16
 22758              		.cfi_offset 8, -20
 22759              		.cfi_offset 7, -24
 22760              		.cfi_offset 6, -28
 22761              		.cfi_offset 5, -32
 22762              		.cfi_offset 4, -36
 22763              		.cfi_offset 2, -40
 22764              		.cfi_offset 1, -44
 22765              		.cfi_offset 0, -48
 925:sdcard.c      **** {
 22766              		.loc 1 925 0
 22767 0004 0546     		mov	r5, r0
 22768 0006 0C46     		mov	r4, r1
 22769 0008 9046     		mov	r8, r2
 22770 000a 0193     		str	r3, [sp, #4]
 930:sdcard.c      ****   if (NULL == readbuff)
 22771              		.loc 1 930 0
 22772 000c 0029     		cmp	r1, #0
 22773 000e 00F06181 		beq	.L233
 22774              	.LVL273:
 936:sdcard.c      ****   TransferError = SD_OK;
 22775              		.loc 1 936 0
 22776 0012 9949     		ldr	r1, .L247
 22777              	.LVL274:
 22778 0014 2A26     		movs	r6, #42
 937:sdcard.c      ****   TransferEnd = 0;
 22779              		.loc 1 937 0
 22780 0016 994B     		ldr	r3, .L247+4
 22781              	.LVL275:
 938:sdcard.c      ****   TotalNumberOfBytes = 0;
 22782              		.loc 1 938 0
 22783 0018 9948     		ldr	r0, .L247+8
 22784              	.LVL276:
 936:sdcard.c      ****   TransferError = SD_OK;
 22785              		.loc 1 936 0
 22786 001a 0E70     		strb	r6, [r1, #0]
 937:sdcard.c      ****   TransferEnd = 0;
 22787              		.loc 1 937 0
 22788 001c 0026     		movs	r6, #0
 938:sdcard.c      ****   TotalNumberOfBytes = 0;
 22789              		.loc 1 938 0
 22790 001e 0660     		str	r6, [r0, #0]
 937:sdcard.c      ****   TransferEnd = 0;
 22791              		.loc 1 937 0
 22792 0020 1E60     		str	r6, [r3, #0]
 941:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 22793              		.loc 1 941 0
 22794 0022 9848     		ldr	r0, .L247+12
 22795 0024 984B     		ldr	r3, .L247+16
 943:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 22796              		.loc 1 943 0
 22797 0026 8660     		str	r6, [r0, #8]
 942:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
 22798              		.loc 1 942 0
 22799 0028 80E84800 		stmia	r0, {r3, r6}
 944:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 22800              		.loc 1 944 0
 22801 002c C660     		str	r6, [r0, #12]
 945:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 22802              		.loc 1 945 0
 22803 002e 0661     		str	r6, [r0, #16]
 946:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 22804              		.loc 1 946 0
 22805 0030 4661     		str	r6, [r0, #20]
 947:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 22806              		.loc 1 947 0
 22807 0032 964A     		ldr	r2, .L247+20
 22808              	.LVL277:
 22809 0034 9047     		blx	r2
 948:sdcard.c      ****   SDIO_DMACmd(DISABLE);
 22810              		.loc 1 948 0
 22811 0036 3046     		mov	r0, r6
 22812 0038 9549     		ldr	r1, .L247+24
 22813 003a 8847     		blx	r1
 950:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 22814              		.loc 1 950 0
 22815 003c 3046     		mov	r0, r6
 22816 003e 954B     		ldr	r3, .L247+28
 22817 0040 9847     		blx	r3
 953:sdcard.c      ****     return(errorstatus);
 22818              		.loc 1 953 0
 22819 0042 0E26     		movs	r6, #14
 950:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 22820              		.loc 1 950 0
 22821 0044 8301     		lsls	r3, r0, #6
 22822 0046 00F14681 		bmi	.L206
 956:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 22823              		.loc 1 956 0
 22824 004a 9348     		ldr	r0, .L247+32
 22825 004c 0268     		ldr	r2, [r0, #0]
 22826 004e 022A     		cmp	r2, #2
 22827 0050 02D1     		bne	.L207
 22828              	.LVL278:
 959:sdcard.c      ****     addr /= 512;
 22829              		.loc 1 959 0
 22830 0052 6D0A     		lsrs	r5, r5, #9
 22831              	.LVL279:
 958:sdcard.c      ****     BlockSize = 512;
 22832              		.loc 1 958 0
 22833 0054 4FF40078 		mov	r8, #512
 22834              	.LVL280:
 22835              	.L207:
 962:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
 22836              		.loc 1 962 0
 22837 0058 08F1FF3B 		add	fp, r8, #-1
 22838 005c 1FFA8BFC 		uxth	ip, fp
 22839 0060 BCF5006F 		cmp	ip, #2048
 22840 0064 80F03681 		bcs	.L233
 962:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && (0 == (BlockSize & (BlockSize - 1))))
 22841              		.loc 1 962 0 is_stmt 0 discriminator 1
 22842 0068 1BEA080B 		ands	fp, fp, r8
 22843 006c 08BF     		it	eq
 22844 006e 4746     		moveq	r7, r8
 22845 0070 06D0     		beq	.L208
 22846 0072 2FE1     		b	.L233
 22847              	.LVL281:
 22848              	.L209:
 22849              	.LBB50:
 22850              	.LBB51:
2802:sdcard.c      ****     count++;
 22851              		.loc 1 2802 0 is_stmt 1
 22852 0074 0BF1010B 		add	fp, fp, #1
 22853              	.LVL282:
2801:sdcard.c      ****     NumberOfBytes >>= 1;
 22854              		.loc 1 2801 0
 22855 0078 C7F34F07 		ubfx	r7, r7, #1, #16
 22856              	.LVL283:
2802:sdcard.c      ****     count++;
 22857              		.loc 1 2802 0
 22858 007c 5FFA8BFB 		uxtb	fp, fp
 22859              	.LVL284:
 22860              	.L208:
2799:sdcard.c      ****   while (NumberOfBytes != 1)
 22861              		.loc 1 2799 0
 22862 0080 012F     		cmp	r7, #1
 22863 0082 F7D1     		bne	.L209
 22864              	.LVL285:
 22865              	.LBE51:
 22866              	.LBE50:
 967:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 22867              		.loc 1 967 0
 22868 0084 DFF83492 		ldr	r9, .L247+68
 968:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 22869              		.loc 1 968 0
 22870 0088 1026     		movs	r6, #16
 969:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22871              		.loc 1 969 0
 22872 008a 4020     		movs	r0, #64
 971:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22873              		.loc 1 971 0
 22874 008c 4FF48062 		mov	r2, #1024
 970:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22875              		.loc 1 970 0
 22876 0090 4FF0000A 		mov	sl, #0
 968:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 22877              		.loc 1 968 0
 22878 0094 C9F80460 		str	r6, [r9, #4]
 969:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22879              		.loc 1 969 0
 22880 0098 C9F80800 		str	r0, [r9, #8]
 971:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22881              		.loc 1 971 0
 22882 009c C9F81020 		str	r2, [r9, #16]
 972:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 22883              		.loc 1 972 0
 22884 00a0 4846     		mov	r0, r9
 22885 00a2 7E49     		ldr	r1, .L247+36
 967:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 22886              		.loc 1 967 0
 22887 00a4 C9F80080 		str	r8, [r9, #0]
 970:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22888              		.loc 1 970 0
 22889 00a8 C9F80CA0 		str	sl, [r9, #12]
 972:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 22890              		.loc 1 972 0
 22891 00ac 8847     		blx	r1
 974:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 22892              		.loc 1 974 0
 22893 00ae 3046     		mov	r0, r6
 22894 00b0 7B4B     		ldr	r3, .L247+40
 22895 00b2 9847     		blx	r3
 976:sdcard.c      ****     if (SD_OK != errorstatus)
 22896              		.loc 1 976 0
 22897 00b4 2A28     		cmp	r0, #42
 974:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 22898              		.loc 1 974 0
 22899 00b6 0646     		mov	r6, r0
 22900              	.LVL286:
 976:sdcard.c      ****     if (SD_OK != errorstatus)
 22901              		.loc 1 976 0
 22902 00b8 40F00D81 		bne	.L206
 987:sdcard.c      ****   if (NumberOfBlocks > 1)
 22903              		.loc 1 987 0
 22904 00bc 019B     		ldr	r3, [sp, #4]
 22905 00be 012B     		cmp	r3, #1
 22906 00c0 40F20981 		bls	.L206
 990:sdcard.c      ****     if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
 22907              		.loc 1 990 0
 22908 00c4 03FB08F8 		mul	r8, r3, r8
 22909              	.LVL287:
 22910 00c8 B8F1007F 		cmp	r8, #33554432
 22911 00cc 80F00281 		bcs	.L233
 996:sdcard.c      ****     TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 22912              		.loc 1 996 0
 22913 00d0 6B4B     		ldr	r3, .L247+8
 998:sdcard.c      ****     DestBuffer = readbuff;
 22914              		.loc 1 998 0
 22915 00d2 7448     		ldr	r0, .L247+44
 22916              	.LVL288:
 997:sdcard.c      ****     StopCondition = 1;
 22917              		.loc 1 997 0
 22918 00d4 744A     		ldr	r2, .L247+48
 998:sdcard.c      ****     DestBuffer = readbuff;
 22919              		.loc 1 998 0
 22920 00d6 0460     		str	r4, [r0, #0]
 996:sdcard.c      ****     TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 22921              		.loc 1 996 0
 22922 00d8 C3F80080 		str	r8, [r3, #0]
1000:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 22923              		.loc 1 1000 0
 22924 00dc 6948     		ldr	r0, .L247+12
 22925 00de 6A4B     		ldr	r3, .L247+16
1002:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 22926              		.loc 1 1002 0
 22927 00e0 4FEA0B11 		lsl	r1, fp, #4
1003:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 22928              		.loc 1 1003 0
 22929 00e4 0226     		movs	r6, #2
 22930              	.LVL289:
1001:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 22931              		.loc 1 1001 0
 22932 00e6 80E80801 		stmia	r0, {r3, r8}
1002:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 22933              		.loc 1 1002 0
 22934 00ea 8160     		str	r1, [r0, #8]
1003:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 22935              		.loc 1 1003 0
 22936 00ec C660     		str	r6, [r0, #12]
1006:sdcard.c      ****     SDIO_DataConfig(&SDIO_DataInitStructure);
 22937              		.loc 1 1006 0
 22938 00ee 674B     		ldr	r3, .L247+20
 997:sdcard.c      ****     StopCondition = 1;
 22939              		.loc 1 997 0
 22940 00f0 1760     		str	r7, [r2, #0]
1004:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 22941              		.loc 1 1004 0
 22942 00f2 C0F810A0 		str	sl, [r0, #16]
1005:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 22943              		.loc 1 1005 0
 22944 00f6 4761     		str	r7, [r0, #20]
1006:sdcard.c      ****     SDIO_DataConfig(&SDIO_DataInitStructure);
 22945              		.loc 1 1006 0
 22946 00f8 9847     		blx	r3
1011:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22947              		.loc 1 1011 0
 22948 00fa 4022     		movs	r2, #64
1013:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22949              		.loc 1 1013 0
 22950 00fc 4FF48061 		mov	r1, #1024
1009:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 22951              		.loc 1 1009 0
 22952 0100 C9F80050 		str	r5, [r9, #0]
1010:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
 22953              		.loc 1 1010 0
 22954 0104 1225     		movs	r5, #18
 22955              	.LVL290:
1011:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 22956              		.loc 1 1011 0
 22957 0106 C9F80820 		str	r2, [r9, #8]
1013:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 22958              		.loc 1 1013 0
 22959 010a C9F81010 		str	r1, [r9, #16]
1014:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 22960              		.loc 1 1014 0
 22961 010e 4846     		mov	r0, r9
 22962 0110 624E     		ldr	r6, .L247+36
1010:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_READ_MULT_BLOCK;
 22963              		.loc 1 1010 0
 22964 0112 C9F80450 		str	r5, [r9, #4]
1012:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 22965              		.loc 1 1012 0
 22966 0116 C9F80CA0 		str	sl, [r9, #12]
1014:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 22967              		.loc 1 1014 0
 22968 011a B047     		blx	r6
 22969              	.LVL291:
1016:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
 22970              		.loc 1 1016 0
 22971 011c 2846     		mov	r0, r5
 22972 011e 604B     		ldr	r3, .L247+40
 22973 0120 9847     		blx	r3
1018:sdcard.c      ****     if (errorstatus != SD_OK)
 22974              		.loc 1 1018 0
 22975 0122 2A28     		cmp	r0, #42
1016:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_READ_MULT_BLOCK);
 22976              		.loc 1 1016 0
 22977 0124 0646     		mov	r6, r0
 22978              	.LVL292:
1018:sdcard.c      ****     if (errorstatus != SD_OK)
 22979              		.loc 1 1018 0
 22980 0126 40F0D680 		bne	.L206
1023:sdcard.c      ****     if (DeviceMode == SD_POLLING_MODE)
 22981              		.loc 1 1023 0
 22982 012a 6049     		ldr	r1, .L247+52
 22983 012c 0B68     		ldr	r3, [r1, #0]
 22984 012e 022B     		cmp	r3, #2
 22985 0130 6ED1     		bne	.L210
1026:sdcard.c      ****       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_D
 22986              		.loc 1 1026 0 discriminator 1
 22987 0132 DFF89C91 		ldr	r9, .L247+88
1032:sdcard.c      ****             *(tempbuff + count) = SDIO_ReadData();
 22988              		.loc 1 1032 0 discriminator 1
 22989 0136 DFF88081 		ldr	r8, .L247+64
 22990 013a 09E0     		b	.L242
 22991              	.LVL293:
 22992              	.L214:
1028:sdcard.c      ****         if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 22993              		.loc 1 1028 0
 22994 013c 4FF40040 		mov	r0, #32768
 22995 0140 A847     		blx	r5
 22996 0142 28B1     		cbz	r0, .L242
 22997              	.L213:
1032:sdcard.c      ****             *(tempbuff + count) = SDIO_ReadData();
 22998              		.loc 1 1032 0 discriminator 2
 22999 0144 C047     		blx	r8
 23000 0146 E051     		str	r0, [r4, r7]
 23001 0148 0437     		adds	r7, r7, #4
1030:sdcard.c      ****           for (count = 0; count < SD_HALFFIFO; count++)
 23002              		.loc 1 1030 0 discriminator 2
 23003 014a 202F     		cmp	r7, #32
 23004 014c FAD1     		bne	.L213
1034:sdcard.c      ****           tempbuff += SD_HALFFIFO;
 23005              		.loc 1 1034 0
 23006 014e 2034     		adds	r4, r4, #32
 23007              	.LVL294:
 23008              	.L242:
1026:sdcard.c      ****       while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG_D
 23009              		.loc 1 1026 0 discriminator 1
 23010 0150 D9F83450 		ldr	r5, [r9, #52]
 23011 0154 40F22A37 		movw	r7, #810
 23012 0158 05EA0707 		and	r7, r5, r7
 23013 015c 544D     		ldr	r5, .L247+56
 23014 015e 002F     		cmp	r7, #0
 23015 0160 ECD0     		beq	.L214
1038:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 23016              		.loc 1 1038 0
 23017 0162 0820     		movs	r0, #8
 23018 0164 A847     		blx	r5
 23019 0166 20B1     		cbz	r0, .L215
1040:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 23020              		.loc 1 1040 0
 23021 0168 524E     		ldr	r6, .L247+60
 23022              	.LVL295:
 23023 016a 0820     		movs	r0, #8
 23024 016c B047     		blx	r6
 23025              	.LVL296:
1042:sdcard.c      ****         return(errorstatus);
 23026              		.loc 1 1042 0
 23027 016e 0426     		movs	r6, #4
 23028 0170 B1E0     		b	.L206
 23029              	.LVL297:
 23030              	.L215:
1044:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 23031              		.loc 1 1044 0
 23032 0172 0220     		movs	r0, #2
 23033 0174 A847     		blx	r5
 23034 0176 20B1     		cbz	r0, .L216
1046:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 23035              		.loc 1 1046 0
 23036 0178 0220     		movs	r0, #2
 23037 017a 4E4A     		ldr	r2, .L247+60
 23038 017c 9047     		blx	r2
 23039              	.LVL298:
1048:sdcard.c      ****         return(errorstatus);
 23040              		.loc 1 1048 0
 23041 017e 0226     		movs	r6, #2
 23042 0180 A9E0     		b	.L206
 23043              	.LVL299:
 23044              	.L216:
1050:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 23045              		.loc 1 1050 0
 23046 0182 2020     		movs	r0, #32
 23047 0184 A847     		blx	r5
 23048 0186 20B1     		cbz	r0, .L217
1052:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 23049              		.loc 1 1052 0
 23050 0188 2020     		movs	r0, #32
 23051 018a 4A4B     		ldr	r3, .L247+60
 23052 018c 9847     		blx	r3
 23053              	.LVL300:
1054:sdcard.c      ****         return(errorstatus);
 23054              		.loc 1 1054 0
 23055 018e 0626     		movs	r6, #6
 23056 0190 A1E0     		b	.L206
 23057              	.LVL301:
 23058              	.L217:
1056:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 23059              		.loc 1 1056 0
 23060 0192 4FF40070 		mov	r0, #512
 23061 0196 A847     		blx	r5
 23062 0198 48B1     		cbz	r0, .L243
1058:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 23063              		.loc 1 1058 0
 23064 019a 4FF40070 		mov	r0, #512
 23065 019e 4549     		ldr	r1, .L247+60
 23066 01a0 8847     		blx	r1
 23067              	.LVL302:
1060:sdcard.c      ****         return(errorstatus);
 23068              		.loc 1 1060 0
 23069 01a2 0726     		movs	r6, #7
 23070 01a4 97E0     		b	.L206
 23071              	.LVL303:
 23072              	.L220:
1064:sdcard.c      ****         *tempbuff = SDIO_ReadData();
 23073              		.loc 1 1064 0
 23074 01a6 B847     		blx	r7
 23075 01a8 44F8040B 		str	r0, [r4], #4
 23076              	.LVL304:
 23077 01ac 00E0     		b	.L244
 23078              	.L243:
1064:sdcard.c      ****         *tempbuff = SDIO_ReadData();
 23079              		.loc 1 1064 0 is_stmt 0 discriminator 1
 23080 01ae 424F     		ldr	r7, .L247+64
 23081              	.L244:
1062:sdcard.c      ****       while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 23082              		.loc 1 1062 0 is_stmt 1 discriminator 1
 23083 01b0 4FF40010 		mov	r0, #2097152
 23084 01b4 A847     		blx	r5
 23085 01b6 0028     		cmp	r0, #0
 23086 01b8 F5D1     		bne	.L220
1068:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
 23087              		.loc 1 1068 0
 23088 01ba 4FF48070 		mov	r0, #256
 23089 01be 3C4A     		ldr	r2, .L247+56
 23090 01c0 9047     		blx	r2
 23091 01c2 00B3     		cbz	r0, .L221
1071:sdcard.c      ****         if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType
 23092              		.loc 1 1071 0
 23093 01c4 344B     		ldr	r3, .L247+32
 23094 01c6 1B68     		ldr	r3, [r3, #0]
 23095 01c8 D3F10100 		rsbs	r0, r3, #1
 23096 01cc 38BF     		it	cc
 23097 01ce 0020     		movcc	r0, #0
 23098 01d0 022B     		cmp	r3, #2
 23099 01d2 08BF     		it	eq
 23100 01d4 40F00100 		orreq	r0, r0, #1
 23101 01d8 08B9     		cbnz	r0, .L222
1071:sdcard.c      ****         if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_HIGH_CAPACITY_SD_CARD == CardType
 23102              		.loc 1 1071 0 is_stmt 0 discriminator 1
 23103 01da 012B     		cmp	r3, #1
 23104 01dc 13D1     		bne	.L221
 23105              	.L222:
1074:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 23106              		.loc 1 1074 0 is_stmt 1
 23107 01de 3748     		ldr	r0, .L247+68
1075:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 23108              		.loc 1 1075 0
 23109 01e0 0023     		movs	r3, #0
 23110 01e2 0C24     		movs	r4, #12
 23111              	.LVL305:
1076:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23112              		.loc 1 1076 0
 23113 01e4 4021     		movs	r1, #64
1075:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 23114              		.loc 1 1075 0
 23115 01e6 80E81800 		stmia	r0, {r3, r4}
1077:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23116              		.loc 1 1077 0
 23117 01ea C360     		str	r3, [r0, #12]
1078:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23118              		.loc 1 1078 0
 23119 01ec 4FF48063 		mov	r3, #1024
1076:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23120              		.loc 1 1076 0
 23121 01f0 8160     		str	r1, [r0, #8]
1078:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23122              		.loc 1 1078 0
 23123 01f2 0361     		str	r3, [r0, #16]
1079:sdcard.c      ****           SDIO_SendCommand(&SDIO_CmdInitStructure);
 23124              		.loc 1 1079 0
 23125 01f4 294A     		ldr	r2, .L247+36
 23126 01f6 9047     		blx	r2
1081:sdcard.c      ****           errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 23127              		.loc 1 1081 0
 23128 01f8 2046     		mov	r0, r4
 23129 01fa 2949     		ldr	r1, .L247+40
 23130 01fc 8847     		blx	r1
 23131              	.LVL306:
1083:sdcard.c      ****           if (errorstatus != SD_OK)
 23132              		.loc 1 1083 0
 23133 01fe 2A28     		cmp	r0, #42
 23134 0200 18BF     		it	ne
 23135 0202 0646     		movne	r6, r0
 23136 0204 67D1     		bne	.L206
 23137              	.LVL307:
 23138              	.L221:
1090:sdcard.c      ****       SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 23139              		.loc 1 1090 0
 23140 0206 40F2FF50 		movw	r0, #1535
 23141 020a 2A4A     		ldr	r2, .L247+60
 23142 020c 9047     		blx	r2
 23143 020e 62E0     		b	.L206
 23144              	.LVL308:
 23145              	.L210:
1092:sdcard.c      ****     else if (DeviceMode == SD_INTERRUPT_MODE)
 23146              		.loc 1 1092 0
 23147 0210 012B     		cmp	r3, #1
 23148 0212 0ED1     		bne	.L223
1094:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_
 23149              		.loc 1 1094 0
 23150 0214 2A4B     		ldr	r3, .L247+72
 23151 0216 48F22A30 		movw	r0, #33578
 23152              	.LVL309:
 23153 021a 3946     		mov	r1, r7
 23154 021c 9847     		blx	r3
1095:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 23155              		.loc 1 1095 0
 23156 021e 174A     		ldr	r2, .L247+4
 23157 0220 154B     		ldr	r3, .L247
 23158              	.L225:
1095:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 23159              		.loc 1 1095 0 is_stmt 0 discriminator 1
 23160 0222 1068     		ldr	r0, [r2, #0]
 23161 0224 08BB     		cbnz	r0, .L227
1095:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 23162              		.loc 1 1095 0 discriminator 2
 23163 0226 93F800E0 		ldrb	lr, [r3, #0]	@ zero_extendqisi2
 23164 022a BEF12A0F 		cmp	lr, #42
 23165 022e F8D0     		beq	.L225
 23166 0230 1BE0     		b	.L227
 23167              	.L223:
1102:sdcard.c      ****     else if (DeviceMode == SD_DMA_MODE)
 23168              		.loc 1 1102 0 is_stmt 1
 23169 0232 002B     		cmp	r3, #0
 23170 0234 4FD1     		bne	.L206
1104:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_RXOVERR | SDIO_
 23171              		.loc 1 1104 0
 23172 0236 224A     		ldr	r2, .L247+72
 23173 0238 40F22A30 		movw	r0, #810
 23174 023c 3946     		mov	r1, r7
 23175 023e 9047     		blx	r2
1105:sdcard.c      ****       SDIO_DMACmd(ENABLE);
 23176              		.loc 1 1105 0
 23177 0240 3846     		mov	r0, r7
 23178 0242 1349     		ldr	r1, .L247+24
 23179 0244 8847     		blx	r1
1106:sdcard.c      ****       DMA_RxConfiguration(readbuff, (NumberOfBlocks * BlockSize));
 23180              		.loc 1 1106 0
 23181 0246 2046     		mov	r0, r4
 23182 0248 4146     		mov	r1, r8
 23183 024a 1E4C     		ldr	r4, .L247+76
 23184              	.LVL310:
 23185 024c A047     		blx	r4
 23186              	.LVL311:
1107:sdcard.c      ****       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 23187              		.loc 1 1107 0
 23188 024e 1E4C     		ldr	r4, .L247+80
 23189              	.L226:
1107:sdcard.c      ****       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 23190              		.loc 1 1107 0 is_stmt 0 discriminator 1
 23191 0250 1E48     		ldr	r0, .L247+84
 23192 0252 A047     		blx	r4
 23193 0254 0028     		cmp	r0, #0
 23194 0256 FBD0     		beq	.L226
1109:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 23195              		.loc 1 1109 0 is_stmt 1 discriminator 1
 23196 0258 084A     		ldr	r2, .L247+4
 23197 025a 074B     		ldr	r3, .L247
 23198              	.L236:
 23199 025c 1068     		ldr	r0, [r2, #0]
 23200 025e 20B9     		cbnz	r0, .L227
1109:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 23201              		.loc 1 1109 0 is_stmt 0 discriminator 2
 23202 0260 93F800C0 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 23203 0264 BCF12A0F 		cmp	ip, #42
 23204 0268 F8D0     		beq	.L236
 23205              	.L227:
1111:sdcard.c      ****       if (TransferError != SD_OK)
 23206              		.loc 1 1111 0 is_stmt 1
 23207 026a 0349     		ldr	r1, .L247
 23208 026c 0B78     		ldrb	r3, [r1, #0]	@ zero_extendqisi2
 23209 026e 2A2B     		cmp	r3, #42
1113:sdcard.c      ****         return(TransferError);
 23210              		.loc 1 1113 0
 23211 0270 1CBF     		itt	ne
 23212 0272 014B     		ldrne	r3, .L247
 23213 0274 1E78     		ldrbne	r6, [r3, #0]	@ zero_extendqisi2
 23214              	.LVL312:
 23215 0276 2EE0     		b	.L206
 23216              	.L248:
 23217              		.align	2
 23218              	.L247:
 23219 0278 00000000 		.word	.LANCHOR5
 23220 027c 00000000 		.word	.LANCHOR6
 23221 0280 00000000 		.word	.LANCHOR7
 23222 0284 00000000 		.word	SDIO_DataInitStructure
 23223 0288 FFFF0F00 		.word	1048575
 23224 028c 00000000 		.word	SDIO_DataConfig
 23225 0290 00000000 		.word	SDIO_DMACmd
 23226 0294 00000000 		.word	SDIO_GetResponse
 23227 0298 00000000 		.word	.LANCHOR1
 23228 029c 00000000 		.word	SDIO_SendCommand
 23229 02a0 00000000 		.word	CmdResp1Error
 23230 02a4 00000000 		.word	DestBuffer
 23231 02a8 00000000 		.word	.LANCHOR8
 23232 02ac 00000000 		.word	.LANCHOR4
 23233 02b0 00000000 		.word	SDIO_GetFlagStatus
 23234 02b4 00000000 		.word	SDIO_ClearFlag
 23235 02b8 00000000 		.word	SDIO_ReadData
 23236 02bc 00000000 		.word	SDIO_CmdInitStructure
 23237 02c0 00000000 		.word	SDIO_ITConfig
 23238 02c4 00000000 		.word	DMA_RxConfiguration
 23239 02c8 00000000 		.word	DMA_GetFlagStatus
 23240 02cc 00200010 		.word	268443648
 23241 02d0 00800140 		.word	1073840128
 23242              	.LVL313:
 23243              	.L233:
 993:sdcard.c      ****       return(errorstatus);
 23244              		.loc 1 993 0
 23245 02d4 2626     		movs	r6, #38
 23246              	.LVL314:
 23247              	.L206:
1118:sdcard.c      **** }
 23248              		.loc 1 1118 0
 23249 02d6 3046     		mov	r0, r6
 23250 02d8 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23251              		.cfi_endproc
 23252              	.LFE38:
 23254              		.section	.text.SD_WriteBlock,"ax",%progbits
 23255              		.align	1
 23256              		.global	SD_WriteBlock
 23257              		.thumb
 23258              		.thumb_func
 23260              	SD_WriteBlock:
 23261              	.LFB39:
1130:sdcard.c      **** {
 23262              		.loc 1 1130 0
 23263              		.cfi_startproc
 23264              		@ args = 0, pretend = 0, frame = 16
 23265              		@ frame_needed = 0, uses_anonymous_args = 0
 23266              	.LVL315:
 23267 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23268              	.LCFI18:
 23269              		.cfi_def_cfa_offset 36
 23270              		.cfi_offset 14, -4
 23271              		.cfi_offset 11, -8
 23272              		.cfi_offset 10, -12
 23273              		.cfi_offset 9, -16
 23274              		.cfi_offset 8, -20
 23275              		.cfi_offset 7, -24
 23276              		.cfi_offset 6, -28
 23277              		.cfi_offset 5, -32
 23278              		.cfi_offset 4, -36
1132:sdcard.c      ****   uint8_t  power = 0, cardstate = 0;
 23279              		.loc 1 1132 0
 23280 0004 0027     		movs	r7, #0
1130:sdcard.c      **** {
 23281              		.loc 1 1130 0
 23282 0006 85B0     		sub	sp, sp, #20
 23283              	.LCFI19:
 23284              		.cfi_def_cfa_offset 56
1130:sdcard.c      **** {
 23285              		.loc 1 1130 0
 23286 0008 0546     		mov	r5, r0
 23287 000a 0C46     		mov	r4, r1
 23288 000c 1646     		mov	r6, r2
1132:sdcard.c      ****   uint8_t  power = 0, cardstate = 0;
 23289              		.loc 1 1132 0
 23290 000e 8DF80F70 		strb	r7, [sp, #15]
 23291              	.LVL316:
1137:sdcard.c      ****   if (writebuff == NULL)
 23292              		.loc 1 1137 0
 23293 0012 0029     		cmp	r1, #0
 23294 0014 00F09281 		beq	.L280
1143:sdcard.c      ****   TransferError = SD_OK;
 23295              		.loc 1 1143 0
 23296 0018 964A     		ldr	r2, .L298
 23297              	.LVL317:
1144:sdcard.c      ****   TransferEnd = 0;
 23298              		.loc 1 1144 0
 23299 001a 974B     		ldr	r3, .L298+4
1145:sdcard.c      ****   TotalNumberOfBytes = 0;
 23300              		.loc 1 1145 0
 23301 001c 9748     		ldr	r0, .L298+8
 23302              	.LVL318:
1143:sdcard.c      ****   TransferError = SD_OK;
 23303              		.loc 1 1143 0
 23304 001e 2A21     		movs	r1, #42
 23305              	.LVL319:
 23306 0020 1170     		strb	r1, [r2, #0]
1145:sdcard.c      ****   TotalNumberOfBytes = 0;
 23307              		.loc 1 1145 0
 23308 0022 0760     		str	r7, [r0, #0]
1144:sdcard.c      ****   TransferEnd = 0;
 23309              		.loc 1 1144 0
 23310 0024 1F60     		str	r7, [r3, #0]
1147:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 23311              		.loc 1 1147 0
 23312 0026 9648     		ldr	r0, .L298+12
 23313 0028 964B     		ldr	r3, .L298+16
1153:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 23314              		.loc 1 1153 0
 23315 002a 974A     		ldr	r2, .L298+20
1148:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
 23316              		.loc 1 1148 0
 23317 002c 80E88800 		stmia	r0, {r3, r7}
1149:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 23318              		.loc 1 1149 0
 23319 0030 8760     		str	r7, [r0, #8]
1150:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 23320              		.loc 1 1150 0
 23321 0032 C760     		str	r7, [r0, #12]
1151:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 23322              		.loc 1 1151 0
 23323 0034 0761     		str	r7, [r0, #16]
1152:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 23324              		.loc 1 1152 0
 23325 0036 4761     		str	r7, [r0, #20]
1153:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 23326              		.loc 1 1153 0
 23327 0038 9047     		blx	r2
1154:sdcard.c      ****   SDIO_DMACmd(DISABLE);
 23328              		.loc 1 1154 0
 23329 003a 3846     		mov	r0, r7
 23330 003c 9349     		ldr	r1, .L298+24
 23331 003e 8847     		blx	r1
1156:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 23332              		.loc 1 1156 0
 23333 0040 3846     		mov	r0, r7
 23334 0042 934B     		ldr	r3, .L298+28
 23335 0044 9847     		blx	r3
 23336 0046 8201     		lsls	r2, r0, #6
 23337 0048 00F17681 		bmi	.L279
1162:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 23338              		.loc 1 1162 0
 23339 004c 914B     		ldr	r3, .L298+32
 23340 004e 1868     		ldr	r0, [r3, #0]
 23341 0050 0228     		cmp	r0, #2
 23342 0052 02D1     		bne	.L251
 23343              	.LVL320:
1165:sdcard.c      ****     addr /= 512;
 23344              		.loc 1 1165 0
 23345 0054 6D0A     		lsrs	r5, r5, #9
 23346              	.LVL321:
1164:sdcard.c      ****     BlockSize = 512;
 23347              		.loc 1 1164 0
 23348 0056 4FF40076 		mov	r6, #512
 23349              	.LVL322:
 23350              	.L251:
1169:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 23351              		.loc 1 1169 0
 23352 005a 06F1FF38 		add	r8, r6, #-1
 23353 005e 1FFA88F3 		uxth	r3, r8
 23354 0062 B3F5006F 		cmp	r3, #2048
 23355 0066 80F06981 		bcs	.L280
1169:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 23356              		.loc 1 1169 0 is_stmt 0 discriminator 1
 23357 006a 18EA0608 		ands	r8, r8, r6
 23358 006e 08BF     		it	eq
 23359 0070 3346     		moveq	r3, r6
 23360 0072 06D0     		beq	.L252
 23361 0074 62E1     		b	.L280
 23362              	.LVL323:
 23363              	.L253:
 23364              	.LBB52:
 23365              	.LBB53:
2802:sdcard.c      ****     count++;
 23366              		.loc 1 2802 0 is_stmt 1
 23367 0076 08F10108 		add	r8, r8, #1
 23368              	.LVL324:
2801:sdcard.c      ****     NumberOfBytes >>= 1;
 23369              		.loc 1 2801 0
 23370 007a C3F34F03 		ubfx	r3, r3, #1, #16
 23371              	.LVL325:
2802:sdcard.c      ****     count++;
 23372              		.loc 1 2802 0
 23373 007e 5FFA88F8 		uxtb	r8, r8
 23374              	.LVL326:
 23375              	.L252:
2799:sdcard.c      ****   while (NumberOfBytes != 1)
 23376              		.loc 1 2799 0
 23377 0082 012B     		cmp	r3, #1
 23378 0084 F7D1     		bne	.L253
 23379              	.LVL327:
 23380              	.LBE53:
 23381              	.LBE52:
1173:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 23382              		.loc 1 1173 0
 23383 0086 844F     		ldr	r7, .L298+36
1175:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23384              		.loc 1 1175 0
 23385 0088 4022     		movs	r2, #64
1177:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23386              		.loc 1 1177 0
 23387 008a 4FF48063 		mov	r3, #1024
 23388              	.LVL328:
1174:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 23389              		.loc 1 1174 0
 23390 008e 4FF0100B 		mov	fp, #16
1176:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23391              		.loc 1 1176 0
 23392 0092 4FF0000A 		mov	sl, #0
1175:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23393              		.loc 1 1175 0
 23394 0096 BA60     		str	r2, [r7, #8]
1177:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23395              		.loc 1 1177 0
 23396 0098 3B61     		str	r3, [r7, #16]
1173:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 23397              		.loc 1 1173 0
 23398 009a 3E60     		str	r6, [r7, #0]
1174:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 23399              		.loc 1 1174 0
 23400 009c C7F804B0 		str	fp, [r7, #4]
1176:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23401              		.loc 1 1176 0
 23402 00a0 C7F80CA0 		str	sl, [r7, #12]
1178:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 23403              		.loc 1 1178 0
 23404 00a4 3846     		mov	r0, r7
 23405 00a6 0192     		str	r2, [sp, #4]
 23406 00a8 0093     		str	r3, [sp, #0]
 23407 00aa DFF8F491 		ldr	r9, .L298+44
 23408 00ae C847     		blx	r9
1180:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 23409              		.loc 1 1180 0
 23410 00b0 5846     		mov	r0, fp
 23411 00b2 7A49     		ldr	r1, .L298+40
 23412 00b4 8847     		blx	r1
 23413              	.LVL329:
1182:sdcard.c      ****     if (errorstatus != SD_OK)
 23414              		.loc 1 1182 0
 23415 00b6 2A28     		cmp	r0, #42
 23416 00b8 019A     		ldr	r2, [sp, #4]
 23417 00ba 009B     		ldr	r3, [sp, #0]
 23418 00bc 40F03F81 		bne	.L250
1194:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23419              		.loc 1 1194 0
 23420 00c0 DFF8F8B1 		ldr	fp, .L298+72
1196:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23421              		.loc 1 1196 0
 23422 00c4 BA60     		str	r2, [r7, #8]
1194:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23423              		.loc 1 1194 0
 23424 00c6 DBF80010 		ldr	r1, [fp, #0]
1198:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23425              		.loc 1 1198 0
 23426 00ca 3B61     		str	r3, [r7, #16]
1194:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23427              		.loc 1 1194 0
 23428 00cc 0804     		lsls	r0, r1, #16
 23429              	.LVL330:
1195:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 23430              		.loc 1 1195 0
 23431 00ce 0D21     		movs	r1, #13
1194:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23432              		.loc 1 1194 0
 23433 00d0 3860     		str	r0, [r7, #0]
1195:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 23434              		.loc 1 1195 0
 23435 00d2 7960     		str	r1, [r7, #4]
1197:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23436              		.loc 1 1197 0
 23437 00d4 C7F80CA0 		str	sl, [r7, #12]
1199:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 23438              		.loc 1 1199 0
 23439 00d8 3846     		mov	r0, r7
 23440 00da 0191     		str	r1, [sp, #4]
 23441 00dc C847     		blx	r9
1201:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 23442              		.loc 1 1201 0
 23443 00de 0198     		ldr	r0, [sp, #4]
 23444 00e0 6E49     		ldr	r1, .L298+40
 23445 00e2 8847     		blx	r1
 23446              	.LVL331:
1203:sdcard.c      ****   if (errorstatus != SD_OK)
 23447              		.loc 1 1203 0
 23448 00e4 2A28     		cmp	r0, #42
 23449 00e6 40F02A81 		bne	.L250
1208:sdcard.c      ****   cardstatus = SDIO_GetResponse(SDIO_RESP1);
 23450              		.loc 1 1208 0
 23451 00ea 5046     		mov	r0, sl
 23452              	.LVL332:
 23453 00ec 684B     		ldr	r3, .L298+28
 23454 00ee 9847     		blx	r3
 23455              	.LVL333:
1210:sdcard.c      ****   timeout = SD_DATATIMEOUT;
 23456              		.loc 1 1210 0
 23457 00f0 DFF890A1 		ldr	sl, .L298+16
1215:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23458              		.loc 1 1215 0
 23459 00f4 3B46     		mov	r3, r7
1212:sdcard.c      ****   while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
 23460              		.loc 1 1212 0
 23461 00f6 1CE0     		b	.L254
 23462              	.LVL334:
 23463              	.L255:
1215:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23464              		.loc 1 1215 0
 23465 00f8 DBF80020 		ldr	r2, [fp, #0]
1217:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23466              		.loc 1 1217 0
 23467 00fc 4027     		movs	r7, #64
 23468 00fe 9F60     		str	r7, [r3, #8]
1215:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23469              		.loc 1 1215 0
 23470 0100 1004     		lsls	r0, r2, #16
 23471              	.LVL335:
1219:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23472              		.loc 1 1219 0
 23473 0102 4FF48061 		mov	r1, #1024
1216:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 23474              		.loc 1 1216 0
 23475 0106 0D22     		movs	r2, #13
1218:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23476              		.loc 1 1218 0
 23477 0108 0027     		movs	r7, #0
1215:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 23478              		.loc 1 1215 0
 23479 010a 1860     		str	r0, [r3, #0]
1216:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 23480              		.loc 1 1216 0
 23481 010c 5A60     		str	r2, [r3, #4]
1218:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23482              		.loc 1 1218 0
 23483 010e DF60     		str	r7, [r3, #12]
1219:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23484              		.loc 1 1219 0
 23485 0110 1961     		str	r1, [r3, #16]
1220:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 23486              		.loc 1 1220 0
 23487 0112 6148     		ldr	r0, .L298+36
 23488 0114 0192     		str	r2, [sp, #4]
 23489 0116 0093     		str	r3, [sp, #0]
 23490 0118 C847     		blx	r9
1222:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 23491              		.loc 1 1222 0
 23492 011a 0198     		ldr	r0, [sp, #4]
 23493 011c 5F4A     		ldr	r2, .L298+40
 23494 011e 9047     		blx	r2
 23495              	.LVL336:
1224:sdcard.c      ****     if (errorstatus != SD_OK)
 23496              		.loc 1 1224 0
 23497 0120 2A28     		cmp	r0, #42
 23498 0122 40F00C81 		bne	.L250
1228:sdcard.c      ****     cardstatus = SDIO_GetResponse(SDIO_RESP1);
 23499              		.loc 1 1228 0
 23500 0126 5A4B     		ldr	r3, .L298+28
 23501 0128 3846     		mov	r0, r7
 23502              	.LVL337:
 23503 012a 9847     		blx	r3
 23504              	.LVL338:
 23505 012c 009B     		ldr	r3, [sp, #0]
1214:sdcard.c      ****     timeout--;
 23506              		.loc 1 1214 0
 23507 012e 0AF1FF3A 		add	sl, sl, #-1
 23508              	.LVL339:
 23509              	.L254:
1212:sdcard.c      ****   while (((cardstatus & 0x00000100) == 0) && (timeout > 0))
 23510              		.loc 1 1212 0 discriminator 1
 23511 0132 10F4807F 		tst	r0, #256
 23512 0136 14BF     		ite	ne
 23513 0138 0027     		movne	r7, #0
 23514 013a 0127     		moveq	r7, #1
 23515 013c BAF1000F 		cmp	sl, #0
 23516 0140 0CBF     		ite	eq
 23517 0142 0027     		moveq	r7, #0
 23518 0144 07F00107 		andne	r7, r7, #1
 23519 0148 002F     		cmp	r7, #0
 23520 014a D5D1     		bne	.L255
1233:sdcard.c      ****     return(SD_ERROR);
 23521              		.loc 1 1233 0
 23522 014c 2920     		movs	r0, #41
 23523              	.LVL340:
1231:sdcard.c      ****   if (timeout == 0)
 23524              		.loc 1 1231 0
 23525 014e BAF1000F 		cmp	sl, #0
 23526 0152 00F0F480 		beq	.L250
1237:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = addr;
 23527              		.loc 1 1237 0
 23528 0156 5048     		ldr	r0, .L298+36
1239:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23529              		.loc 1 1239 0
 23530 0158 4021     		movs	r1, #64
1237:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = addr;
 23531              		.loc 1 1237 0
 23532 015a 0560     		str	r5, [r0, #0]
1241:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23533              		.loc 1 1241 0
 23534 015c 4FF48063 		mov	r3, #1024
1238:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
 23535              		.loc 1 1238 0
 23536 0160 1825     		movs	r5, #24
 23537              	.LVL341:
1239:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 23538              		.loc 1 1239 0
 23539 0162 8160     		str	r1, [r0, #8]
1241:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 23540              		.loc 1 1241 0
 23541 0164 0361     		str	r3, [r0, #16]
1238:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_SINGLE_BLOCK;
 23542              		.loc 1 1238 0
 23543 0166 4560     		str	r5, [r0, #4]
1240:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 23544              		.loc 1 1240 0
 23545 0168 C760     		str	r7, [r0, #12]
1242:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 23546              		.loc 1 1242 0
 23547 016a 4D4A     		ldr	r2, .L298+44
 23548 016c 9047     		blx	r2
 23549              	.LVL342:
1244:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_WRITE_SINGLE_BLOCK);
 23550              		.loc 1 1244 0
 23551 016e 2846     		mov	r0, r5
 23552 0170 4A49     		ldr	r1, .L298+40
 23553 0172 8847     		blx	r1
 23554              	.LVL343:
1246:sdcard.c      ****   if (errorstatus != SD_OK)
 23555              		.loc 1 1246 0
 23556 0174 2A28     		cmp	r0, #42
 23557 0176 40F0E280 		bne	.L250
1251:sdcard.c      ****   TotalNumberOfBytes = BlockSize;
 23558              		.loc 1 1251 0
 23559 017a 4048     		ldr	r0, .L298+8
 23560              	.LVL344:
1253:sdcard.c      ****   SrcBuffer = writebuff;
 23561              		.loc 1 1253 0
 23562 017c 494B     		ldr	r3, .L298+48
1251:sdcard.c      ****   TotalNumberOfBytes = BlockSize;
 23563              		.loc 1 1251 0
 23564 017e 0660     		str	r6, [r0, #0]
1255:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 23565              		.loc 1 1255 0
 23566 0180 3F48     		ldr	r0, .L298+12
1252:sdcard.c      ****   StopCondition = 0;
 23567              		.loc 1 1252 0
 23568 0182 4949     		ldr	r1, .L298+52
1253:sdcard.c      ****   SrcBuffer = writebuff;
 23569              		.loc 1 1253 0
 23570 0184 1C60     		str	r4, [r3, #0]
1257:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 23571              		.loc 1 1257 0
 23572 0186 4FEA0815 		lsl	r5, r8, #4
1255:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 23573              		.loc 1 1255 0
 23574 018a 3E4B     		ldr	r3, .L298+16
1257:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 23575              		.loc 1 1257 0
 23576 018c 8560     		str	r5, [r0, #8]
1260:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 23577              		.loc 1 1260 0
 23578 018e 0125     		movs	r5, #1
1252:sdcard.c      ****   StopCondition = 0;
 23579              		.loc 1 1252 0
 23580 0190 0F60     		str	r7, [r1, #0]
1256:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = BlockSize;
 23581              		.loc 1 1256 0
 23582 0192 80E84800 		stmia	r0, {r3, r6}
1258:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 23583              		.loc 1 1258 0
 23584 0196 C760     		str	r7, [r0, #12]
1259:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 23585              		.loc 1 1259 0
 23586 0198 0761     		str	r7, [r0, #16]
1260:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 23587              		.loc 1 1260 0
 23588 019a 4561     		str	r5, [r0, #20]
1261:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 23589              		.loc 1 1261 0
 23590 019c 3A4A     		ldr	r2, .L298+20
 23591 019e 9047     		blx	r2
1264:sdcard.c      ****   if (DeviceMode == SD_POLLING_MODE)
 23592              		.loc 1 1264 0
 23593 01a0 4248     		ldr	r0, .L298+56
 23594 01a2 0168     		ldr	r1, [r0, #0]
 23595 01a4 0229     		cmp	r1, #2
 23596 01a6 54D1     		bne	.L293
 23597 01a8 26E0     		b	.L297
 23598              	.LVL345:
 23599              	.L265:
1268:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
 23600              		.loc 1 1268 0
 23601 01aa 4FF48040 		mov	r0, #16384
 23602 01ae A847     		blx	r5
 23603 01b0 30B3     		cbz	r0, .L292
1270:sdcard.c      ****         if ((TotalNumberOfBytes - bytestransferred) < 32)
 23604              		.loc 1 1270 0
 23605 01b2 324D     		ldr	r5, .L298+8
 23606 01b4 2A68     		ldr	r2, [r5, #0]
 23607 01b6 C7EB0209 		rsb	r9, r7, r2
 23608 01ba B9F11F0F 		cmp	r9, #31
 23609 01be 13D8     		bhi	.L259
1272:sdcard.c      ****           restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes - b
 23610              		.loc 1 1272 0
 23611 01c0 19F0030F 		tst	r9, #3
 23612 01c4 4FEA9909 		lsr	r9, r9, #2
 23613 01c8 18BF     		it	ne
 23614 01ca 09F10109 		addne	r9, r9, #1
 23615              	.LVL346:
1274:sdcard.c      ****           for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 23616              		.loc 1 1274 0
 23617 01ce 2646     		mov	r6, r4
 23618 01d0 0025     		movs	r5, #0
 23619 01d2 03E0     		b	.L262
 23620              	.LVL347:
 23621              	.L263:
1276:sdcard.c      ****             SDIO_WriteData(*tempbuff);
 23622              		.loc 1 1276 0 discriminator 2
 23623 01d4 56F8040B 		ldr	r0, [r6], #4
 23624              	.LVL348:
 23625 01d8 C047     		blx	r8
1274:sdcard.c      ****           for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 23626              		.loc 1 1274 0 discriminator 2
 23627 01da 0135     		adds	r5, r5, #1
 23628              	.LVL349:
 23629              	.L262:
1274:sdcard.c      ****           for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 23630              		.loc 1 1274 0 is_stmt 0 discriminator 1
 23631 01dc 4D45     		cmp	r5, r9
 23632 01de F9D1     		bne	.L263
1129:sdcard.c      **** SD_Error SD_WriteBlock(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize)
 23633              		.loc 1 1129 0 is_stmt 1
 23634 01e0 AE00     		lsls	r6, r5, #2
 23635              	.LVL350:
 23636 01e2 BF19     		adds	r7, r7, r6
 23637 01e4 A419     		adds	r4, r4, r6
 23638 01e6 0BE0     		b	.L292
 23639              	.LVL351:
 23640              	.L259:
1283:sdcard.c      ****             SDIO_WriteData(*(tempbuff + count));
 23641              		.loc 1 1283 0 discriminator 2
 23642 01e8 A059     		ldr	r0, [r4, r6]
 23643 01ea 0436     		adds	r6, r6, #4
 23644 01ec C047     		blx	r8
1281:sdcard.c      ****           for (count = 0; count < 8; count++)
 23645              		.loc 1 1281 0 discriminator 2
 23646 01ee 202E     		cmp	r6, #32
 23647 01f0 FAD1     		bne	.L259
1285:sdcard.c      ****           tempbuff += 8;
 23648              		.loc 1 1285 0
 23649 01f2 2034     		adds	r4, r4, #32
 23650              	.LVL352:
1286:sdcard.c      ****           bytestransferred += 32;
 23651              		.loc 1 1286 0
 23652 01f4 2037     		adds	r7, r7, #32
 23653              	.LVL353:
 23654 01f6 03E0     		b	.L292
 23655              	.LVL354:
 23656              	.L297:
1266:sdcard.c      ****     while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_D
 23657              		.loc 1 1266 0
 23658 01f8 DFF8C4A0 		ldr	sl, .L298+76
 23659              	.LVL355:
1283:sdcard.c      ****             SDIO_WriteData(*(tempbuff + count));
 23660              		.loc 1 1283 0
 23661 01fc DFF8C480 		ldr	r8, .L298+80
 23662              	.LVL356:
 23663              	.L292:
1266:sdcard.c      ****     while (!(SDIO->STA & (SDIO_FLAG_DBCKEND | SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_D
 23664              		.loc 1 1266 0 discriminator 1
 23665 0200 DAF83430 		ldr	r3, [sl, #52]
 23666 0204 40F21A6C 		movw	ip, #1562
 23667 0208 03EA0C06 		and	r6, r3, ip
 23668 020c 284D     		ldr	r5, .L298+60
 23669 020e 002E     		cmp	r6, #0
 23670 0210 CBD0     		beq	.L265
1290:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 23671              		.loc 1 1290 0
 23672 0212 0820     		movs	r0, #8
 23673 0214 A847     		blx	r5
 23674 0216 274C     		ldr	r4, .L298+64
 23675              	.LVL357:
 23676 0218 18B1     		cbz	r0, .L266
1292:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 23677              		.loc 1 1292 0
 23678 021a 0820     		movs	r0, #8
 23679 021c A047     		blx	r4
 23680              	.LVL358:
1294:sdcard.c      ****       return(errorstatus);
 23681              		.loc 1 1294 0
 23682 021e 0420     		movs	r0, #4
 23683 0220 8DE0     		b	.L250
 23684              	.LVL359:
 23685              	.L266:
1296:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 23686              		.loc 1 1296 0
 23687 0222 0220     		movs	r0, #2
 23688 0224 A847     		blx	r5
 23689 0226 18B1     		cbz	r0, .L267
1298:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 23690              		.loc 1 1298 0
 23691 0228 0220     		movs	r0, #2
 23692 022a A047     		blx	r4
 23693              	.LVL360:
1300:sdcard.c      ****       return(errorstatus);
 23694              		.loc 1 1300 0
 23695 022c 0220     		movs	r0, #2
 23696 022e 86E0     		b	.L250
 23697              	.LVL361:
 23698              	.L267:
1302:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
 23699              		.loc 1 1302 0
 23700 0230 1020     		movs	r0, #16
 23701 0232 A847     		blx	r5
 23702 0234 18B1     		cbz	r0, .L268
1304:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
 23703              		.loc 1 1304 0
 23704 0236 1020     		movs	r0, #16
 23705 0238 A047     		blx	r4
 23706              	.LVL362:
1306:sdcard.c      ****       return(errorstatus);
 23707              		.loc 1 1306 0
 23708 023a 0520     		movs	r0, #5
 23709 023c 7FE0     		b	.L250
 23710              	.LVL363:
 23711              	.L268:
1308:sdcard.c      ****     else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 23712              		.loc 1 1308 0
 23713 023e 4FF40070 		mov	r0, #512
 23714 0242 A847     		blx	r5
 23715 0244 0028     		cmp	r0, #0
 23716 0246 61D0     		beq	.L269
1310:sdcard.c      ****       SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 23717              		.loc 1 1310 0
 23718 0248 4FF40070 		mov	r0, #512
 23719 024c A047     		blx	r4
 23720              	.LVL364:
1312:sdcard.c      ****       return(errorstatus);
 23721              		.loc 1 1312 0
 23722 024e 0720     		movs	r0, #7
 23723 0250 75E0     		b	.L250
 23724              	.LVL365:
 23725              	.L293:
1315:sdcard.c      ****   else if (DeviceMode == SD_INTERRUPT_MODE)
 23726              		.loc 1 1315 0
 23727 0252 0129     		cmp	r1, #1
 23728 0254 38D1     		bne	.L270
1317:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_FLAG_TXFIFOHE | SDIO
 23729              		.loc 1 1317 0
 23730 0256 184A     		ldr	r2, .L298+68
 23731 0258 44F21A30 		movw	r0, #17178
 23732 025c 9047     		blx	r2
1318:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 23733              		.loc 1 1318 0
 23734 025e 064A     		ldr	r2, .L298+4
 23735 0260 044B     		ldr	r3, .L298
 23736              	.L272:
1318:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 23737              		.loc 1 1318 0 is_stmt 0 discriminator 1
 23738 0262 1168     		ldr	r1, [r2, #0]
 23739 0264 0029     		cmp	r1, #0
 23740 0266 4AD1     		bne	.L274
1318:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 23741              		.loc 1 1318 0 discriminator 2
 23742 0268 93F800E0 		ldrb	lr, [r3, #0]	@ zero_extendqisi2
 23743 026c BEF12A0F 		cmp	lr, #42
 23744 0270 F7D0     		beq	.L272
 23745 0272 44E0     		b	.L274
 23746              	.L299:
 23747              		.align	2
 23748              	.L298:
 23749 0274 00000000 		.word	.LANCHOR5
 23750 0278 00000000 		.word	.LANCHOR6
 23751 027c 00000000 		.word	.LANCHOR7
 23752 0280 00000000 		.word	SDIO_DataInitStructure
 23753 0284 FFFF0F00 		.word	1048575
 23754 0288 00000000 		.word	SDIO_DataConfig
 23755 028c 00000000 		.word	SDIO_DMACmd
 23756 0290 00000000 		.word	SDIO_GetResponse
 23757 0294 00000000 		.word	.LANCHOR1
 23758 0298 00000000 		.word	SDIO_CmdInitStructure
 23759 029c 00000000 		.word	CmdResp1Error
 23760 02a0 00000000 		.word	SDIO_SendCommand
 23761 02a4 00000000 		.word	SrcBuffer
 23762 02a8 00000000 		.word	.LANCHOR8
 23763 02ac 00000000 		.word	.LANCHOR4
 23764 02b0 00000000 		.word	SDIO_GetFlagStatus
 23765 02b4 00000000 		.word	SDIO_ClearFlag
 23766 02b8 00000000 		.word	SDIO_ITConfig
 23767 02bc 00000000 		.word	.LANCHOR0
 23768 02c0 00800140 		.word	1073840128
 23769 02c4 00000000 		.word	SDIO_WriteData
 23770              	.L270:
1325:sdcard.c      ****   else if (DeviceMode == SD_DMA_MODE)
 23771              		.loc 1 1325 0 is_stmt 1
 23772 02c8 01BB     		cbnz	r1, .L269
1327:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO_I
 23773              		.loc 1 1327 0
 23774 02ca 1E4A     		ldr	r2, .L300
 23775 02cc 40F21A30 		movw	r0, #794
 23776 02d0 2946     		mov	r1, r5
 23777 02d2 9047     		blx	r2
1328:sdcard.c      ****     DMA_TxConfiguration(writebuff, BlockSize);
 23778              		.loc 1 1328 0
 23779 02d4 2046     		mov	r0, r4
 23780 02d6 3146     		mov	r1, r6
 23781 02d8 1B4B     		ldr	r3, .L300+4
 23782 02da 9847     		blx	r3
1329:sdcard.c      ****     SDIO_DMACmd(ENABLE);
 23783              		.loc 1 1329 0
 23784 02dc 1B4C     		ldr	r4, .L300+8
 23785              	.LVL366:
 23786 02de 2846     		mov	r0, r5
 23787 02e0 A047     		blx	r4
1330:sdcard.c      ****     while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 23788              		.loc 1 1330 0
 23789 02e2 1B4C     		ldr	r4, .L300+12
 23790              	.L273:
1330:sdcard.c      ****     while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 23791              		.loc 1 1330 0 is_stmt 0 discriminator 1
 23792 02e4 1B48     		ldr	r0, .L300+16
 23793 02e6 A047     		blx	r4
 23794 02e8 0028     		cmp	r0, #0
 23795 02ea FBD0     		beq	.L273
1332:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 23796              		.loc 1 1332 0 is_stmt 1 discriminator 1
 23797 02ec 1A4A     		ldr	r2, .L300+20
 23798 02ee 1B4B     		ldr	r3, .L300+24
 23799              	.L286:
 23800 02f0 1168     		ldr	r1, [r2, #0]
 23801 02f2 21B9     		cbnz	r1, .L274
1332:sdcard.c      ****     while ((TransferEnd == 0) && (TransferError == SD_OK))
 23802              		.loc 1 1332 0 is_stmt 0 discriminator 2
 23803 02f4 93F800C0 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 23804 02f8 BCF12A0F 		cmp	ip, #42
 23805 02fc F8D0     		beq	.L286
 23806              	.L274:
1334:sdcard.c      ****     if (TransferError != SD_OK)
 23807              		.loc 1 1334 0 is_stmt 1
 23808 02fe 174A     		ldr	r2, .L300+24
 23809 0300 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 23810 0302 2A2B     		cmp	r3, #42
1336:sdcard.c      ****       return(TransferError);
 23811              		.loc 1 1336 0
 23812 0304 1CBF     		itt	ne
 23813 0306 154B     		ldrne	r3, .L300+24
 23814 0308 1878     		ldrbne	r0, [r3, #0]	@ zero_extendqisi2
1334:sdcard.c      ****     if (TransferError != SD_OK)
 23815              		.loc 1 1334 0
 23816 030a 18D1     		bne	.L250
 23817              	.LVL367:
 23818              	.L269:
1341:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 23819              		.loc 1 1341 0
 23820 030c 40F2FF50 		movw	r0, #1535
 23821 0310 134D     		ldr	r5, .L300+28
 23822 0312 A847     		blx	r5
1344:sdcard.c      ****   errorstatus = IsCardProgramming(&cardstate);
 23823              		.loc 1 1344 0
 23824 0314 0DF10F05 		add	r5, sp, #15
 23825 0318 2846     		mov	r0, r5
 23826 031a 124C     		ldr	r4, .L300+32
 23827 031c 00E0     		b	.L294
 23828              	.LVL368:
 23829              	.L277:
1348:sdcard.c      ****     errorstatus = IsCardProgramming(&cardstate);
 23830              		.loc 1 1348 0
 23831 031e 2846     		mov	r0, r5
 23832              	.LVL369:
 23833              	.L294:
 23834 0320 A047     		blx	r4
 23835              	.LVL370:
1346:sdcard.c      ****   while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_REC
 23836              		.loc 1 1346 0
 23837 0322 2A28     		cmp	r0, #42
 23838 0324 0BD1     		bne	.L250
1346:sdcard.c      ****   while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_REC
 23839              		.loc 1 1346 0 is_stmt 0 discriminator 2
 23840 0326 9DF80F30 		ldrb	r3, [sp, #15]	@ zero_extendqisi2
 23841              	.LVL371:
 23842 032a 991F     		subs	r1, r3, #6
 23843              	.LVL372:
 23844 032c 5FFA81FE 		uxtb	lr, r1
 23845 0330 BEF1010F 		cmp	lr, #1
 23846 0334 F3D9     		bls	.L277
 23847 0336 02E0     		b	.L250
 23848              	.LVL373:
 23849              	.L279:
1159:sdcard.c      ****     return(errorstatus);
 23850              		.loc 1 1159 0 is_stmt 1
 23851 0338 0E20     		movs	r0, #14
 23852 033a 00E0     		b	.L250
 23853              	.L280:
1190:sdcard.c      ****     return(errorstatus);
 23854              		.loc 1 1190 0
 23855 033c 2620     		movs	r0, #38
 23856              	.LVL374:
 23857              	.L250:
1352:sdcard.c      **** }
 23858              		.loc 1 1352 0
 23859 033e 05B0     		add	sp, sp, #20
 23860 0340 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23861              	.L301:
 23862              		.align	2
 23863              	.L300:
 23864 0344 00000000 		.word	SDIO_ITConfig
 23865 0348 00000000 		.word	DMA_TxConfiguration
 23866 034c 00000000 		.word	SDIO_DMACmd
 23867 0350 00000000 		.word	DMA_GetFlagStatus
 23868 0354 00200010 		.word	268443648
 23869 0358 00000000 		.word	.LANCHOR6
 23870 035c 00000000 		.word	.LANCHOR5
 23871 0360 00000000 		.word	SDIO_ClearFlag
 23872 0364 00000000 		.word	IsCardProgramming
 23873              		.cfi_endproc
 23874              	.LFE39:
 23876              		.section	.text.SD_WriteMultiBlocks,"ax",%progbits
 23877              		.align	1
 23878              		.global	SD_WriteMultiBlocks
 23879              		.thumb
 23880              		.thumb_func
 23882              	SD_WriteMultiBlocks:
 23883              	.LFB40:
1365:sdcard.c      **** {
 23884              		.loc 1 1365 0
 23885              		.cfi_startproc
 23886              		@ args = 0, pretend = 0, frame = 32
 23887              		@ frame_needed = 0, uses_anonymous_args = 0
 23888              	.LVL375:
 23889 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23890              	.LCFI20:
 23891              		.cfi_def_cfa_offset 36
 23892              		.cfi_offset 14, -4
 23893              		.cfi_offset 11, -8
 23894              		.cfi_offset 10, -12
 23895              		.cfi_offset 9, -16
 23896              		.cfi_offset 8, -20
 23897              		.cfi_offset 7, -24
 23898              		.cfi_offset 6, -28
 23899              		.cfi_offset 5, -32
 23900              		.cfi_offset 4, -36
1367:sdcard.c      ****   uint8_t  power = 0, cardstate = 0;
 23901              		.loc 1 1367 0
 23902 0004 0026     		movs	r6, #0
1365:sdcard.c      **** {
 23903              		.loc 1 1365 0
 23904 0006 89B0     		sub	sp, sp, #36
 23905              	.LCFI21:
 23906              		.cfi_def_cfa_offset 72
1365:sdcard.c      **** {
 23907              		.loc 1 1365 0
 23908 0008 0490     		str	r0, [sp, #16]
 23909 000a 0C46     		mov	r4, r1
 23910 000c 1546     		mov	r5, r2
 23911 000e 0593     		str	r3, [sp, #20]
1367:sdcard.c      ****   uint8_t  power = 0, cardstate = 0;
 23912              		.loc 1 1367 0
 23913 0010 8DF81F60 		strb	r6, [sp, #31]
 23914              	.LVL376:
1372:sdcard.c      ****   if (writebuff == NULL)
 23915              		.loc 1 1372 0
 23916 0014 0029     		cmp	r1, #0
 23917 0016 00F0AD81 		beq	.L336
 23918              	.LVL377:
1378:sdcard.c      ****   TransferError = SD_OK;
 23919              		.loc 1 1378 0
 23920 001a 9D4A     		ldr	r2, .L352
 23921              	.LVL378:
1379:sdcard.c      ****   TransferEnd = 0;
 23922              		.loc 1 1379 0
 23923 001c 9D4B     		ldr	r3, .L352+4
 23924              	.LVL379:
1380:sdcard.c      ****   TotalNumberOfBytes = 0;
 23925              		.loc 1 1380 0
 23926 001e 9E48     		ldr	r0, .L352+8
 23927              	.LVL380:
1378:sdcard.c      ****   TransferError = SD_OK;
 23928              		.loc 1 1378 0
 23929 0020 2A21     		movs	r1, #42
 23930              	.LVL381:
 23931 0022 1170     		strb	r1, [r2, #0]
1380:sdcard.c      ****   TotalNumberOfBytes = 0;
 23932              		.loc 1 1380 0
 23933 0024 0660     		str	r6, [r0, #0]
1379:sdcard.c      ****   TransferEnd = 0;
 23934              		.loc 1 1379 0
 23935 0026 1E60     		str	r6, [r3, #0]
1382:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 23936              		.loc 1 1382 0
 23937 0028 9C48     		ldr	r0, .L352+12
 23938 002a 9D4B     		ldr	r3, .L352+16
1388:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 23939              		.loc 1 1388 0
 23940 002c 9D4A     		ldr	r2, .L352+20
1383:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 0;
 23941              		.loc 1 1383 0
 23942 002e 80E84800 		stmia	r0, {r3, r6}
1384:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_1b;
 23943              		.loc 1 1384 0
 23944 0032 8660     		str	r6, [r0, #8]
1385:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 23945              		.loc 1 1385 0
 23946 0034 C660     		str	r6, [r0, #12]
1386:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 23947              		.loc 1 1386 0
 23948 0036 0661     		str	r6, [r0, #16]
1387:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Disable;
 23949              		.loc 1 1387 0
 23950 0038 4661     		str	r6, [r0, #20]
1388:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 23951              		.loc 1 1388 0
 23952 003a 9047     		blx	r2
1389:sdcard.c      ****   SDIO_DMACmd(DISABLE);
 23953              		.loc 1 1389 0
 23954 003c 9A49     		ldr	r1, .L352+24
 23955 003e 3046     		mov	r0, r6
 23956 0040 8847     		blx	r1
1391:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 23957              		.loc 1 1391 0
 23958 0042 3046     		mov	r0, r6
 23959 0044 994B     		ldr	r3, .L352+28
 23960 0046 9847     		blx	r3
 23961 0048 8101     		lsls	r1, r0, #6
 23962 004a 00F19181 		bmi	.L333
1397:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 23963              		.loc 1 1397 0
 23964 004e 984B     		ldr	r3, .L352+32
 23965 0050 1868     		ldr	r0, [r3, #0]
 23966 0052 0228     		cmp	r0, #2
 23967 0054 04D1     		bne	.L304
 23968              	.LVL382:
1400:sdcard.c      ****     addr /= 512;
 23969              		.loc 1 1400 0
 23970 0056 0499     		ldr	r1, [sp, #16]
 23971 0058 4D0A     		lsrs	r5, r1, #9
 23972 005a 0495     		str	r5, [sp, #16]
 23973              	.LVL383:
1399:sdcard.c      ****     BlockSize = 512;
 23974              		.loc 1 1399 0
 23975 005c 4FF40075 		mov	r5, #512
 23976              	.LVL384:
 23977              	.L304:
1404:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 23978              		.loc 1 1404 0
 23979 0060 6B1E     		subs	r3, r5, #1
 23980 0062 9AB2     		uxth	r2, r3
 23981 0064 B2F5006F 		cmp	r2, #2048
 23982 0068 80F08481 		bcs	.L336
1404:sdcard.c      ****   if ((BlockSize > 0) && (BlockSize <= 2048) && ((BlockSize & (BlockSize - 1)) == 0))
 23983              		.loc 1 1404 0 is_stmt 0 discriminator 1
 23984 006c 2B40     		ands	r3, r3, r5
 23985 006e 04BF     		itt	eq
 23986 0070 2A46     		moveq	r2, r5
 23987 0072 0393     		streq	r3, [sp, #12]
 23988 0074 04D0     		beq	.L305
 23989 0076 7DE1     		b	.L336
 23990              	.LVL385:
 23991              	.L306:
 23992              	.LBB54:
 23993              	.LBB55:
2802:sdcard.c      ****     count++;
 23994              		.loc 1 2802 0 is_stmt 1
 23995 0078 5E1C     		adds	r6, r3, #1
2801:sdcard.c      ****     NumberOfBytes >>= 1;
 23996              		.loc 1 2801 0
 23997 007a C2F34F02 		ubfx	r2, r2, #1, #16
 23998              	.LVL386:
2802:sdcard.c      ****     count++;
 23999              		.loc 1 2802 0
 24000 007e F3B2     		uxtb	r3, r6
 24001              	.LVL387:
 24002              	.L305:
2799:sdcard.c      ****   while (NumberOfBytes != 1)
 24003              		.loc 1 2799 0
 24004 0080 012A     		cmp	r2, #1
 24005 0082 F9D1     		bne	.L306
 24006              	.LBE55:
 24007              	.LBE54:
1408:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 24008              		.loc 1 1408 0
 24009 0084 8B4E     		ldr	r6, .L352+36
1409:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 24010              		.loc 1 1409 0
 24011 0086 1027     		movs	r7, #16
1410:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24012              		.loc 1 1410 0
 24013 0088 4FF0400B 		mov	fp, #64
1411:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24014              		.loc 1 1411 0
 24015 008c 4FF0000A 		mov	sl, #0
1412:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24016              		.loc 1 1412 0
 24017 0090 4FF48069 		mov	r9, #1024
 24018 0094 0393     		str	r3, [sp, #12]
 24019              	.LVL388:
1409:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 24020              		.loc 1 1409 0
 24021 0096 7760     		str	r7, [r6, #4]
1413:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24022              		.loc 1 1413 0
 24023 0098 3046     		mov	r0, r6
1408:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) BlockSize;
 24024              		.loc 1 1408 0
 24025 009a 3560     		str	r5, [r6, #0]
1410:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24026              		.loc 1 1410 0
 24027 009c C6F808B0 		str	fp, [r6, #8]
1411:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24028              		.loc 1 1411 0
 24029 00a0 C6F80CA0 		str	sl, [r6, #12]
1412:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24030              		.loc 1 1412 0
 24031 00a4 C6F81090 		str	r9, [r6, #16]
1413:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24032              		.loc 1 1413 0
 24033 00a8 DFF81482 		ldr	r8, .L352+48
 24034 00ac C047     		blx	r8
 24035              	.LVL389:
1415:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 24036              		.loc 1 1415 0
 24037 00ae 3846     		mov	r0, r7
 24038 00b0 814F     		ldr	r7, .L352+40
 24039 00b2 B847     		blx	r7
 24040              	.LVL390:
1417:sdcard.c      ****     if (errorstatus != SD_OK)
 24041              		.loc 1 1417 0
 24042 00b4 2A28     		cmp	r0, #42
 24043 00b6 40F05E81 		bne	.L303
1429:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 24044              		.loc 1 1429 0
 24045 00ba 804B     		ldr	r3, .L352+44
1430:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 24046              		.loc 1 1430 0
 24047 00bc 0D21     		movs	r1, #13
1429:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 24048              		.loc 1 1429 0
 24049 00be 1A68     		ldr	r2, [r3, #0]
1430:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 24050              		.loc 1 1430 0
 24051 00c0 7160     		str	r1, [r6, #4]
1429:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 24052              		.loc 1 1429 0
 24053 00c2 1004     		lsls	r0, r2, #16
 24054              	.LVL391:
 24055 00c4 3060     		str	r0, [r6, #0]
1431:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24056              		.loc 1 1431 0
 24057 00c6 C6F808B0 		str	fp, [r6, #8]
1432:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24058              		.loc 1 1432 0
 24059 00ca C6F80CA0 		str	sl, [r6, #12]
1433:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24060              		.loc 1 1433 0
 24061 00ce C6F81090 		str	r9, [r6, #16]
1434:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 24062              		.loc 1 1434 0
 24063 00d2 3046     		mov	r0, r6
 24064 00d4 0193     		str	r3, [sp, #4]
 24065 00d6 0291     		str	r1, [sp, #8]
 24066 00d8 C047     		blx	r8
1436:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 24067              		.loc 1 1436 0
 24068 00da 029A     		ldr	r2, [sp, #8]
 24069 00dc 1046     		mov	r0, r2
 24070 00de B847     		blx	r7
 24071              	.LVL392:
1438:sdcard.c      ****   if (errorstatus != SD_OK)
 24072              		.loc 1 1438 0
 24073 00e0 2A28     		cmp	r0, #42
 24074 00e2 019B     		ldr	r3, [sp, #4]
 24075 00e4 40F04781 		bne	.L303
1443:sdcard.c      ****   if (NumberOfBlocks > 1)
 24076              		.loc 1 1443 0
 24077 00e8 059A     		ldr	r2, [sp, #20]
 24078 00ea 012A     		cmp	r2, #1
 24079 00ec 40F22A81 		bls	.L307
1446:sdcard.c      ****     if (NumberOfBlocks * BlockSize > SD_MAX_DATA_LENGTH)
 24080              		.loc 1 1446 0
 24081 00f0 5543     		muls	r5, r2, r5
 24082              	.LVL393:
 24083 00f2 B5F1007F 		cmp	r5, #33554432
 24084 00f6 80F03D81 		bcs	.L336
1452:sdcard.c      ****     if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType
 24085              		.loc 1 1452 0
 24086 00fa 6D48     		ldr	r0, .L352+32
 24087              	.LVL394:
 24088 00fc 0168     		ldr	r1, [r0, #0]
 24089 00fe 0229     		cmp	r1, #2
 24090 0100 26D8     		bhi	.L308
1455:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 24091              		.loc 1 1455 0
 24092 0102 1868     		ldr	r0, [r3, #0]
1456:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 24093              		.loc 1 1456 0
 24094 0104 3722     		movs	r2, #55
1455:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) (RCA << 16);
 24095              		.loc 1 1455 0
 24096 0106 0104     		lsls	r1, r0, #16
 24097 0108 3160     		str	r1, [r6, #0]
1456:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 24098              		.loc 1 1456 0
 24099 010a 7260     		str	r2, [r6, #4]
1457:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24100              		.loc 1 1457 0
 24101 010c C6F808B0 		str	fp, [r6, #8]
1458:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24102              		.loc 1 1458 0
 24103 0110 C6F80CA0 		str	sl, [r6, #12]
1459:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24104              		.loc 1 1459 0
 24105 0114 C6F81090 		str	r9, [r6, #16]
1460:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 24106              		.loc 1 1460 0
 24107 0118 3046     		mov	r0, r6
 24108 011a 0192     		str	r2, [sp, #4]
 24109 011c C047     		blx	r8
1463:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_APP_CMD);
 24110              		.loc 1 1463 0
 24111 011e 019B     		ldr	r3, [sp, #4]
 24112 0120 1846     		mov	r0, r3
 24113 0122 B847     		blx	r7
 24114              	.LVL395:
1465:sdcard.c      ****       if (errorstatus != SD_OK)
 24115              		.loc 1 1465 0
 24116 0124 2A28     		cmp	r0, #42
 24117 0126 40F02681 		bne	.L303
1470:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
 24118              		.loc 1 1470 0
 24119 012a 0599     		ldr	r1, [sp, #20]
1471:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
 24120              		.loc 1 1471 0
 24121 012c 1722     		movs	r2, #23
1470:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)NumberOfBlocks;
 24122              		.loc 1 1470 0
 24123 012e 3160     		str	r1, [r6, #0]
1471:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCK_COUNT;
 24124              		.loc 1 1471 0
 24125 0130 7260     		str	r2, [r6, #4]
1472:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24126              		.loc 1 1472 0
 24127 0132 C6F808B0 		str	fp, [r6, #8]
1473:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24128              		.loc 1 1473 0
 24129 0136 C6F80CA0 		str	sl, [r6, #12]
1474:sdcard.c      ****       SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24130              		.loc 1 1474 0
 24131 013a C6F81090 		str	r9, [r6, #16]
1475:sdcard.c      ****       SDIO_SendCommand(&SDIO_CmdInitStructure);
 24132              		.loc 1 1475 0
 24133 013e 3046     		mov	r0, r6
 24134              	.LVL396:
 24135 0140 0192     		str	r2, [sp, #4]
 24136 0142 C047     		blx	r8
1477:sdcard.c      ****       errorstatus = CmdResp1Error(SDIO_SET_BLOCK_COUNT);
 24137              		.loc 1 1477 0
 24138 0144 019B     		ldr	r3, [sp, #4]
 24139 0146 1846     		mov	r0, r3
 24140 0148 B847     		blx	r7
 24141              	.LVL397:
1479:sdcard.c      ****       if (errorstatus != SD_OK)
 24142              		.loc 1 1479 0
 24143 014a 2A28     		cmp	r0, #42
 24144 014c 40F01381 		bne	.L303
 24145              	.LVL398:
 24146              	.L308:
1486:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 24147              		.loc 1 1486 0
 24148 0150 5848     		ldr	r0, .L352+36
 24149 0152 049E     		ldr	r6, [sp, #16]
1488:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24150              		.loc 1 1488 0
 24151 0154 4027     		movs	r7, #64
1486:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = (uint32_t)addr;
 24152              		.loc 1 1486 0
 24153 0156 0660     		str	r6, [r0, #0]
1488:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24154              		.loc 1 1488 0
 24155 0158 8760     		str	r7, [r0, #8]
1487:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
 24156              		.loc 1 1487 0
 24157 015a 1926     		movs	r6, #25
1490:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24158              		.loc 1 1490 0
 24159 015c 4FF48061 		mov	r1, #1024
1489:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24160              		.loc 1 1489 0
 24161 0160 0027     		movs	r7, #0
1490:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24162              		.loc 1 1490 0
 24163 0162 0161     		str	r1, [r0, #16]
1487:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_WRITE_MULT_BLOCK;
 24164              		.loc 1 1487 0
 24165 0164 4660     		str	r6, [r0, #4]
1489:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24166              		.loc 1 1489 0
 24167 0166 C760     		str	r7, [r0, #12]
1491:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24168              		.loc 1 1491 0
 24169 0168 554A     		ldr	r2, .L352+48
 24170 016a 9047     		blx	r2
1493:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_WRITE_MULT_BLOCK);
 24171              		.loc 1 1493 0
 24172 016c 3046     		mov	r0, r6
 24173 016e 524B     		ldr	r3, .L352+40
 24174 0170 9847     		blx	r3
 24175              	.LVL399:
1495:sdcard.c      ****     if (SD_OK != errorstatus)
 24176              		.loc 1 1495 0
 24177 0172 2A28     		cmp	r0, #42
 24178 0174 40F0FF80 		bne	.L303
1500:sdcard.c      ****     TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 24179              		.loc 1 1500 0
 24180 0178 474E     		ldr	r6, .L352+8
1501:sdcard.c      ****     StopCondition = 1;
 24181              		.loc 1 1501 0
 24182 017a 524B     		ldr	r3, .L352+52
1502:sdcard.c      ****     SrcBuffer = writebuff;
 24183              		.loc 1 1502 0
 24184 017c 5248     		ldr	r0, .L352+56
 24185              	.LVL400:
1506:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 24186              		.loc 1 1506 0
 24187 017e 0399     		ldr	r1, [sp, #12]
1500:sdcard.c      ****     TotalNumberOfBytes = NumberOfBlocks * BlockSize;
 24188              		.loc 1 1500 0
 24189 0180 3560     		str	r5, [r6, #0]
1501:sdcard.c      ****     StopCondition = 1;
 24190              		.loc 1 1501 0
 24191 0182 0126     		movs	r6, #1
1502:sdcard.c      ****     SrcBuffer = writebuff;
 24192              		.loc 1 1502 0
 24193 0184 0460     		str	r4, [r0, #0]
1501:sdcard.c      ****     StopCondition = 1;
 24194              		.loc 1 1501 0
 24195 0186 1E60     		str	r6, [r3, #0]
1504:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 24196              		.loc 1 1504 0
 24197 0188 4448     		ldr	r0, .L352+12
 24198 018a 454B     		ldr	r3, .L352+16
1506:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 24199              		.loc 1 1506 0
 24200 018c 0A01     		lsls	r2, r1, #4
1505:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataLength = NumberOfBlocks * BlockSize;
 24201              		.loc 1 1505 0
 24202 018e 80E82800 		stmia	r0, {r3, r5}
1506:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DataBlockSize = (uint32_t) power << 4;
 24203              		.loc 1 1506 0
 24204 0192 8260     		str	r2, [r0, #8]
1507:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToCard;
 24205              		.loc 1 1507 0
 24206 0194 C760     		str	r7, [r0, #12]
1508:sdcard.c      ****     SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 24207              		.loc 1 1508 0
 24208 0196 0761     		str	r7, [r0, #16]
1509:sdcard.c      ****     SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 24209              		.loc 1 1509 0
 24210 0198 4661     		str	r6, [r0, #20]
1510:sdcard.c      ****     SDIO_DataConfig(&SDIO_DataInitStructure);
 24211              		.loc 1 1510 0
 24212 019a 424B     		ldr	r3, .L352+20
 24213 019c 9847     		blx	r3
1512:sdcard.c      ****     if (DeviceMode == SD_POLLING_MODE)
 24214              		.loc 1 1512 0
 24215 019e 4B48     		ldr	r0, .L352+60
 24216 01a0 0168     		ldr	r1, [r0, #0]
 24217 01a2 0229     		cmp	r1, #2
 24218 01a4 40F09C80 		bne	.L346
 24219 01a8 26E0     		b	.L351
 24220              	.LVL401:
 24221              	.L319:
1516:sdcard.c      ****         if (SDIO_GetFlagStatus(SDIO_FLAG_TXFIFOHE) != RESET)
 24222              		.loc 1 1516 0
 24223 01aa 4FF48040 		mov	r0, #16384
 24224 01ae A847     		blx	r5
 24225 01b0 38B3     		cbz	r0, .L345
1518:sdcard.c      ****           if (!((TotalNumberOfBytes - bytestransferred) < SD_HALFFIFOBYTES))
 24226              		.loc 1 1518 0
 24227 01b2 394A     		ldr	r2, .L352+8
 24228 01b4 1568     		ldr	r5, [r2, #0]
 24229 01b6 C6EB0509 		rsb	r9, r6, r5
 24230 01ba B9F11F0F 		cmp	r9, #31
 24231 01be 07D9     		bls	.L312
 24232              	.L313:
1522:sdcard.c      ****               SDIO_WriteData(*(tempbuff + count));
 24233              		.loc 1 1522 0 discriminator 2
 24234 01c0 E059     		ldr	r0, [r4, r7]
 24235 01c2 0437     		adds	r7, r7, #4
 24236 01c4 C047     		blx	r8
1520:sdcard.c      ****             for (count = 0; count < SD_HALFFIFO; count++)
 24237              		.loc 1 1520 0 discriminator 2
 24238 01c6 202F     		cmp	r7, #32
 24239 01c8 FAD1     		bne	.L313
1524:sdcard.c      ****             tempbuff += SD_HALFFIFO;
 24240              		.loc 1 1524 0
 24241 01ca 2034     		adds	r4, r4, #32
 24242              	.LVL402:
1525:sdcard.c      ****             bytestransferred += SD_HALFFIFOBYTES;
 24243              		.loc 1 1525 0
 24244 01cc 2036     		adds	r6, r6, #32
 24245              	.LVL403:
 24246 01ce 18E0     		b	.L345
 24247              	.L312:
1529:sdcard.c      ****             restwords = ((TotalNumberOfBytes - bytestransferred) % 4 == 0) ? ((TotalNumberOfBytes -
 24248              		.loc 1 1529 0
 24249 01d0 19F0030F 		tst	r9, #3
 24250 01d4 4FEA9909 		lsr	r9, r9, #2
 24251 01d8 18BF     		it	ne
 24252 01da 09F10109 		addne	r9, r9, #1
 24253              	.LVL404:
1532:sdcard.c      ****             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 24254              		.loc 1 1532 0
 24255 01de 2746     		mov	r7, r4
 24256 01e0 0025     		movs	r5, #0
 24257 01e2 03E0     		b	.L317
 24258              	.LVL405:
 24259              	.L318:
1534:sdcard.c      ****               SDIO_WriteData(*tempbuff);
 24260              		.loc 1 1534 0 discriminator 2
 24261 01e4 57F8040B 		ldr	r0, [r7], #4
 24262              	.LVL406:
 24263 01e8 C047     		blx	r8
1532:sdcard.c      ****             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 24264              		.loc 1 1532 0 discriminator 2
 24265 01ea 0135     		adds	r5, r5, #1
 24266              	.LVL407:
 24267              	.L317:
1532:sdcard.c      ****             for (count = 0; count < restwords; count++, tempbuff++, bytestransferred += 4)
 24268              		.loc 1 1532 0 is_stmt 0 discriminator 1
 24269 01ec 4D45     		cmp	r5, r9
 24270 01ee F9D1     		bne	.L318
1364:sdcard.c      **** SD_Error SD_WriteMultiBlocks(uint32_t addr, uint32_t *writebuff, uint16_t BlockSize, uint32_t Numbe
 24271              		.loc 1 1364 0 is_stmt 1
 24272 01f0 AF00     		lsls	r7, r5, #2
 24273              	.LVL408:
 24274 01f2 F619     		adds	r6, r6, r7
 24275 01f4 E419     		adds	r4, r4, r7
 24276 01f6 04E0     		b	.L345
 24277              	.LVL409:
 24278              	.L351:
1514:sdcard.c      ****       while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG
 24279              		.loc 1 1514 0
 24280 01f8 DFF8DCA0 		ldr	sl, .L352+72
1534:sdcard.c      ****               SDIO_WriteData(*tempbuff);
 24281              		.loc 1 1534 0
 24282 01fc DFF8DC80 		ldr	r8, .L352+76
1512:sdcard.c      ****     if (DeviceMode == SD_POLLING_MODE)
 24283              		.loc 1 1512 0
 24284 0200 3E46     		mov	r6, r7
 24285              	.LVL410:
 24286              	.L345:
1514:sdcard.c      ****       while (!(SDIO->STA & (SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DATAEND | SDIO_FLAG
 24287              		.loc 1 1514 0 discriminator 1
 24288 0202 DAF83410 		ldr	r1, [sl, #52]
 24289 0206 40F21A3C 		movw	ip, #794
 24290 020a 01EA0C07 		and	r7, r1, ip
 24291 020e 304D     		ldr	r5, .L352+64
 24292 0210 002F     		cmp	r7, #0
 24293 0212 CAD0     		beq	.L319
1540:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 24294              		.loc 1 1540 0
 24295 0214 0820     		movs	r0, #8
 24296 0216 A847     		blx	r5
 24297 0218 20B1     		cbz	r0, .L320
1542:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 24298              		.loc 1 1542 0
 24299 021a 0820     		movs	r0, #8
 24300 021c 2D4B     		ldr	r3, .L352+68
 24301 021e 9847     		blx	r3
 24302              	.LVL411:
1544:sdcard.c      ****         return(errorstatus);
 24303              		.loc 1 1544 0
 24304 0220 0420     		movs	r0, #4
 24305 0222 A8E0     		b	.L303
 24306              	.LVL412:
 24307              	.L320:
1546:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 24308              		.loc 1 1546 0
 24309 0224 0220     		movs	r0, #2
 24310 0226 A847     		blx	r5
 24311 0228 20B1     		cbz	r0, .L321
1548:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 24312              		.loc 1 1548 0
 24313 022a 0220     		movs	r0, #2
 24314 022c 294A     		ldr	r2, .L352+68
 24315 022e 9047     		blx	r2
 24316              	.LVL413:
1550:sdcard.c      ****         return(errorstatus);
 24317              		.loc 1 1550 0
 24318 0230 0220     		movs	r0, #2
 24319 0232 A0E0     		b	.L303
 24320              	.LVL414:
 24321              	.L321:
1552:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_TXUNDERR) != RESET)
 24322              		.loc 1 1552 0
 24323 0234 1020     		movs	r0, #16
 24324 0236 A847     		blx	r5
 24325 0238 20B1     		cbz	r0, .L322
1554:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_TXUNDERR);
 24326              		.loc 1 1554 0
 24327 023a 1020     		movs	r0, #16
 24328 023c 2549     		ldr	r1, .L352+68
 24329 023e 8847     		blx	r1
 24330              	.LVL415:
1556:sdcard.c      ****         return(errorstatus);
 24331              		.loc 1 1556 0
 24332 0240 0520     		movs	r0, #5
 24333 0242 98E0     		b	.L303
 24334              	.LVL416:
 24335              	.L322:
1558:sdcard.c      ****       else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 24336              		.loc 1 1558 0
 24337 0244 4FF40070 		mov	r0, #512
 24338 0248 A847     		blx	r5
 24339 024a 0446     		mov	r4, r0
 24340              	.LVL417:
 24341 024c 28B1     		cbz	r0, .L323
1560:sdcard.c      ****         SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 24342              		.loc 1 1560 0
 24343 024e 4FF40070 		mov	r0, #512
 24344 0252 204B     		ldr	r3, .L352+68
 24345 0254 9847     		blx	r3
 24346              	.LVL418:
1562:sdcard.c      ****         return(errorstatus);
 24347              		.loc 1 1562 0
 24348 0256 0720     		movs	r0, #7
 24349 0258 8DE0     		b	.L303
 24350              	.LVL419:
 24351              	.L323:
1565:sdcard.c      ****       if (SDIO_GetFlagStatus(SDIO_FLAG_DATAEND) != RESET)
 24352              		.loc 1 1565 0
 24353 025a 4FF48070 		mov	r0, #256
 24354 025e A847     		blx	r5
 24355 0260 0028     		cmp	r0, #0
 24356 0262 6FD0     		beq	.L307
1567:sdcard.c      ****        if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardT
 24357              		.loc 1 1567 0
 24358 0264 124D     		ldr	r5, .L352+32
 24359 0266 2868     		ldr	r0, [r5, #0]
 24360 0268 0228     		cmp	r0, #2
 24361 026a 6BD8     		bhi	.L307
1570:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 24362              		.loc 1 1570 0
 24363 026c 1148     		ldr	r0, .L352+36
1572:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24364              		.loc 1 1572 0
 24365 026e 4022     		movs	r2, #64
1571:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 24366              		.loc 1 1571 0
 24367 0270 0C25     		movs	r5, #12
1574:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24368              		.loc 1 1574 0
 24369 0272 4FF48063 		mov	r3, #1024
1572:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24370              		.loc 1 1572 0
 24371 0276 8260     		str	r2, [r0, #8]
1574:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24372              		.loc 1 1574 0
 24373 0278 0361     		str	r3, [r0, #16]
1570:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 24374              		.loc 1 1570 0
 24375 027a 0460     		str	r4, [r0, #0]
1571:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 24376              		.loc 1 1571 0
 24377 027c 4560     		str	r5, [r0, #4]
1573:sdcard.c      ****           SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24378              		.loc 1 1573 0
 24379 027e C460     		str	r4, [r0, #12]
1575:sdcard.c      ****           SDIO_SendCommand(&SDIO_CmdInitStructure);
 24380              		.loc 1 1575 0
 24381 0280 0F49     		ldr	r1, .L352+48
 24382 0282 8847     		blx	r1
1578:sdcard.c      ****           errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 24383              		.loc 1 1578 0
 24384 0284 2846     		mov	r0, r5
 24385 0286 0C4A     		ldr	r2, .L352+40
 24386 0288 9047     		blx	r2
 24387              	.LVL420:
1580:sdcard.c      ****           if (errorstatus != SD_OK)
 24388              		.loc 1 1580 0
 24389 028a 2A28     		cmp	r0, #42
 24390 028c 73D1     		bne	.L303
 24391 028e 59E0     		b	.L307
 24392              	.L353:
 24393              		.align	2
 24394              	.L352:
 24395 0290 00000000 		.word	.LANCHOR5
 24396 0294 00000000 		.word	.LANCHOR6
 24397 0298 00000000 		.word	.LANCHOR7
 24398 029c 00000000 		.word	SDIO_DataInitStructure
 24399 02a0 FFFF0F00 		.word	1048575
 24400 02a4 00000000 		.word	SDIO_DataConfig
 24401 02a8 00000000 		.word	SDIO_DMACmd
 24402 02ac 00000000 		.word	SDIO_GetResponse
 24403 02b0 00000000 		.word	.LANCHOR1
 24404 02b4 00000000 		.word	SDIO_CmdInitStructure
 24405 02b8 00000000 		.word	CmdResp1Error
 24406 02bc 00000000 		.word	.LANCHOR0
 24407 02c0 00000000 		.word	SDIO_SendCommand
 24408 02c4 00000000 		.word	.LANCHOR8
 24409 02c8 00000000 		.word	SrcBuffer
 24410 02cc 00000000 		.word	.LANCHOR4
 24411 02d0 00000000 		.word	SDIO_GetFlagStatus
 24412 02d4 00000000 		.word	SDIO_ClearFlag
 24413 02d8 00800140 		.word	1073840128
 24414 02dc 00000000 		.word	SDIO_WriteData
 24415              	.LVL421:
 24416              	.L346:
1587:sdcard.c      ****     else if (DeviceMode == SD_INTERRUPT_MODE)
 24417              		.loc 1 1587 0
 24418 02e0 0129     		cmp	r1, #1
 24419 02e2 0DD1     		bne	.L324
1589:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXFIFOHE | SDIO
 24420              		.loc 1 1589 0
 24421 02e4 254B     		ldr	r3, .L354
 24422 02e6 44F21A30 		movw	r0, #17178
 24423 02ea 9847     		blx	r3
1590:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 24424              		.loc 1 1590 0
 24425 02ec 244A     		ldr	r2, .L354+4
 24426 02ee 254B     		ldr	r3, .L354+8
 24427              	.L326:
1590:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 24428              		.loc 1 1590 0 is_stmt 0 discriminator 1
 24429 02f0 1168     		ldr	r1, [r2, #0]
 24430 02f2 01BB     		cbnz	r1, .L328
1590:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 24431              		.loc 1 1590 0 discriminator 2
 24432 02f4 93F800E0 		ldrb	lr, [r3, #0]	@ zero_extendqisi2
 24433 02f8 BEF12A0F 		cmp	lr, #42
 24434 02fc F8D0     		beq	.L326
 24435 02fe 1AE0     		b	.L328
 24436              	.L324:
1597:sdcard.c      ****     else if (DeviceMode == SD_DMA_MODE)
 24437              		.loc 1 1597 0 is_stmt 1
 24438 0300 01BB     		cbnz	r1, .L307
1599:sdcard.c      ****       SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND | SDIO_IT_TXUNDERR | SDIO
 24439              		.loc 1 1599 0
 24440 0302 3146     		mov	r1, r6
 24441 0304 1D4B     		ldr	r3, .L354
 24442 0306 40F21A30 		movw	r0, #794
 24443 030a 9847     		blx	r3
1600:sdcard.c      ****       SDIO_DMACmd(ENABLE);
 24444              		.loc 1 1600 0
 24445 030c 3046     		mov	r0, r6
 24446 030e 1E4A     		ldr	r2, .L354+12
 24447 0310 9047     		blx	r2
1601:sdcard.c      ****       DMA_TxConfiguration(writebuff, (NumberOfBlocks * BlockSize));
 24448              		.loc 1 1601 0
 24449 0312 2046     		mov	r0, r4
 24450 0314 2946     		mov	r1, r5
 24451 0316 1D4C     		ldr	r4, .L354+16
 24452              	.LVL422:
 24453 0318 A047     		blx	r4
 24454              	.LVL423:
1602:sdcard.c      ****       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 24455              		.loc 1 1602 0
 24456 031a 1D4C     		ldr	r4, .L354+20
 24457              	.L327:
1602:sdcard.c      ****       while (DMA_GetFlagStatus(DMA2_FLAG_TC4) == RESET)
 24458              		.loc 1 1602 0 is_stmt 0 discriminator 1
 24459 031c 1D48     		ldr	r0, .L354+24
 24460 031e A047     		blx	r4
 24461 0320 0028     		cmp	r0, #0
 24462 0322 FBD0     		beq	.L327
1604:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 24463              		.loc 1 1604 0 is_stmt 1 discriminator 1
 24464 0324 164A     		ldr	r2, .L354+4
 24465 0326 174B     		ldr	r3, .L354+8
 24466              	.L339:
 24467 0328 1168     		ldr	r1, [r2, #0]
 24468 032a 21B9     		cbnz	r1, .L328
1604:sdcard.c      ****       while ((TransferEnd == 0) && (TransferError == SD_OK))
 24469              		.loc 1 1604 0 is_stmt 0 discriminator 2
 24470 032c 93F800C0 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 24471 0330 BCF12A0F 		cmp	ip, #42
 24472 0334 F8D0     		beq	.L339
 24473              	.L328:
1606:sdcard.c      ****       if (TransferError != SD_OK)
 24474              		.loc 1 1606 0 is_stmt 1
 24475 0336 134B     		ldr	r3, .L354+8
 24476 0338 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 24477 033a 2A2A     		cmp	r2, #42
1608:sdcard.c      ****         return(TransferError);
 24478              		.loc 1 1608 0
 24479 033c 1CBF     		itt	ne
 24480 033e 114A     		ldrne	r2, .L354+8
 24481 0340 1078     		ldrbne	r0, [r2, #0]	@ zero_extendqisi2
1606:sdcard.c      ****       if (TransferError != SD_OK)
 24482              		.loc 1 1606 0
 24483 0342 18D1     		bne	.L303
 24484              	.LVL424:
 24485              	.L307:
1613:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 24486              		.loc 1 1613 0
 24487 0344 40F2FF50 		movw	r0, #1535
 24488 0348 134D     		ldr	r5, .L354+28
 24489 034a A847     		blx	r5
1616:sdcard.c      ****   errorstatus = IsCardProgramming(&cardstate);
 24490              		.loc 1 1616 0
 24491 034c 0DF11F05 		add	r5, sp, #31
 24492 0350 2846     		mov	r0, r5
 24493 0352 124C     		ldr	r4, .L354+32
 24494 0354 00E0     		b	.L348
 24495              	.LVL425:
 24496              	.L331:
1620:sdcard.c      ****     errorstatus = IsCardProgramming(&cardstate);
 24497              		.loc 1 1620 0
 24498 0356 2846     		mov	r0, r5
 24499              	.LVL426:
 24500              	.L348:
 24501 0358 A047     		blx	r4
 24502              	.LVL427:
1618:sdcard.c      ****   while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_REC
 24503              		.loc 1 1618 0
 24504 035a 2A28     		cmp	r0, #42
 24505 035c 0BD1     		bne	.L303
1618:sdcard.c      ****   while ((errorstatus == SD_OK) && ((cardstate == SD_CARD_PROGRAMMING) || (cardstate == SD_CARD_REC
 24506              		.loc 1 1618 0 is_stmt 0 discriminator 2
 24507 035e 9DF81F20 		ldrb	r2, [sp, #31]	@ zero_extendqisi2
 24508              	.LVL428:
 24509 0362 911F     		subs	r1, r2, #6
 24510              	.LVL429:
 24511 0364 5FFA81FE 		uxtb	lr, r1
 24512 0368 BEF1010F 		cmp	lr, #1
 24513 036c F3D9     		bls	.L331
 24514 036e 02E0     		b	.L303
 24515              	.LVL430:
 24516              	.L333:
1394:sdcard.c      ****     return(errorstatus);
 24517              		.loc 1 1394 0 is_stmt 1
 24518 0370 0E20     		movs	r0, #14
 24519 0372 00E0     		b	.L303
 24520              	.LVL431:
 24521              	.L336:
1449:sdcard.c      ****       return(errorstatus);
 24522              		.loc 1 1449 0
 24523 0374 2620     		movs	r0, #38
 24524              	.LVL432:
 24525              	.L303:
1624:sdcard.c      **** }
 24526              		.loc 1 1624 0
 24527 0376 09B0     		add	sp, sp, #36
 24528 0378 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 24529              	.L355:
 24530              		.align	2
 24531              	.L354:
 24532 037c 00000000 		.word	SDIO_ITConfig
 24533 0380 00000000 		.word	.LANCHOR6
 24534 0384 00000000 		.word	.LANCHOR5
 24535 0388 00000000 		.word	SDIO_DMACmd
 24536 038c 00000000 		.word	DMA_TxConfiguration
 24537 0390 00000000 		.word	DMA_GetFlagStatus
 24538 0394 00200010 		.word	268443648
 24539 0398 00000000 		.word	SDIO_ClearFlag
 24540 039c 00000000 		.word	IsCardProgramming
 24541              		.cfi_endproc
 24542              	.LFE40:
 24544              		.section	.text.SD_GetTransferState,"ax",%progbits
 24545              		.align	1
 24546              		.global	SD_GetTransferState
 24547              		.thumb
 24548              		.thumb_func
 24550              	SD_GetTransferState:
 24551              	.LFB41:
1635:sdcard.c      **** {
 24552              		.loc 1 1635 0
 24553              		.cfi_startproc
 24554              		@ args = 0, pretend = 0, frame = 0
 24555              		@ frame_needed = 0, uses_anonymous_args = 0
 24556              		@ link register save eliminated.
1636:sdcard.c      ****   if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
 24557              		.loc 1 1636 0
 24558 0000 0348     		ldr	r0, .L357
 24559 0002 436B     		ldr	r3, [r0, #52]
1638:sdcard.c      ****     return(SD_TRANSFER_IN_PROGRESS);
 24560              		.loc 1 1638 0
 24561 0004 13F4405F 		tst	r3, #12288
1636:sdcard.c      ****   if (SDIO->STA & (SDIO_FLAG_TXACT | SDIO_FLAG_RXACT))
 24562              		.loc 1 1636 0
 24563 0008 0CBF     		ite	eq
 24564 000a 0020     		moveq	r0, #0
 24565 000c 0120     		movne	r0, #1
1644:sdcard.c      **** }
 24566              		.loc 1 1644 0
 24567 000e 7047     		bx	lr
 24568              	.L358:
 24569              		.align	2
 24570              	.L357:
 24571 0010 00800140 		.word	1073840128
 24572              		.cfi_endproc
 24573              	.LFE41:
 24575              		.section	.text.SD_StopTransfer,"ax",%progbits
 24576              		.align	1
 24577              		.global	SD_StopTransfer
 24578              		.thumb
 24579              		.thumb_func
 24581              	SD_StopTransfer:
 24582              	.LFB42:
1652:sdcard.c      **** {
 24583              		.loc 1 1652 0
 24584              		.cfi_startproc
 24585              		@ args = 0, pretend = 0, frame = 0
 24586              		@ frame_needed = 0, uses_anonymous_args = 0
 24587              	.LVL433:
1656:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0x0;
 24588              		.loc 1 1656 0
 24589 0000 0848     		ldr	r0, .L360
1652:sdcard.c      **** {
 24590              		.loc 1 1652 0
 24591 0002 10B5     		push	{r4, lr}
 24592              	.LCFI22:
 24593              		.cfi_def_cfa_offset 8
 24594              		.cfi_offset 14, -4
 24595              		.cfi_offset 4, -8
1657:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 24596              		.loc 1 1657 0
 24597 0004 0023     		movs	r3, #0
 24598 0006 0C24     		movs	r4, #12
1658:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24599              		.loc 1 1658 0
 24600 0008 4021     		movs	r1, #64
1660:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24601              		.loc 1 1660 0
 24602 000a 4FF48062 		mov	r2, #1024
1657:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_STOP_TRANSMISSION;
 24603              		.loc 1 1657 0
 24604 000e 80E81800 		stmia	r0, {r3, r4}
1658:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24605              		.loc 1 1658 0
 24606 0012 8160     		str	r1, [r0, #8]
1659:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24607              		.loc 1 1659 0
 24608 0014 C360     		str	r3, [r0, #12]
1660:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24609              		.loc 1 1660 0
 24610 0016 0261     		str	r2, [r0, #16]
1661:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 24611              		.loc 1 1661 0
 24612 0018 0349     		ldr	r1, .L360+4
 24613 001a 8847     		blx	r1
1663:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_STOP_TRANSMISSION);
 24614              		.loc 1 1663 0
 24615 001c 2046     		mov	r0, r4
 24616 001e 034B     		ldr	r3, .L360+8
 24617 0020 9847     		blx	r3
 24618              	.LVL434:
1666:sdcard.c      **** }
 24619              		.loc 1 1666 0
 24620 0022 10BD     		pop	{r4, pc}
 24621              	.L361:
 24622              		.align	2
 24623              	.L360:
 24624 0024 00000000 		.word	SDIO_CmdInitStructure
 24625 0028 00000000 		.word	SDIO_SendCommand
 24626 002c 00000000 		.word	CmdResp1Error
 24627              		.cfi_endproc
 24628              	.LFE42:
 24630              		.section	.text.SD_Erase,"ax",%progbits
 24631              		.align	1
 24632              		.global	SD_Erase
 24633              		.thumb
 24634              		.thumb_func
 24636              	SD_Erase:
 24637              	.LFB43:
1675:sdcard.c      **** {
 24638              		.loc 1 1675 0
 24639              		.cfi_startproc
 24640              		@ args = 0, pretend = 0, frame = 8
 24641              		@ frame_needed = 0, uses_anonymous_args = 0
 24642              	.LVL435:
 24643 0000 2DE9F347 		push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 24644              	.LCFI23:
 24645              		.cfi_def_cfa_offset 40
 24646              		.cfi_offset 14, -4
 24647              		.cfi_offset 10, -8
 24648              		.cfi_offset 9, -12
 24649              		.cfi_offset 8, -16
 24650              		.cfi_offset 7, -20
 24651              		.cfi_offset 6, -24
 24652              		.cfi_offset 5, -28
 24653              		.cfi_offset 4, -32
 24654              		.cfi_offset 1, -36
 24655              		.cfi_offset 0, -40
1675:sdcard.c      **** {
 24656              		.loc 1 1675 0
 24657 0004 0E46     		mov	r6, r1
1682:sdcard.c      ****   if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 24658              		.loc 1 1682 0
 24659 0006 3949     		ldr	r1, .L374
 24660              	.LVL436:
1675:sdcard.c      **** {
 24661              		.loc 1 1675 0
 24662 0008 0446     		mov	r4, r0
1682:sdcard.c      ****   if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 24663              		.loc 1 1682 0
 24664 000a 4B68     		ldr	r3, [r1, #4]
1678:sdcard.c      ****   __IO uint32_t maxdelay = 0;
 24665              		.loc 1 1678 0
 24666 000c 0020     		movs	r0, #0
 24667              	.LVL437:
1682:sdcard.c      ****   if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 24668              		.loc 1 1682 0
 24669 000e 9B01     		lsls	r3, r3, #6
1678:sdcard.c      ****   __IO uint32_t maxdelay = 0;
 24670              		.loc 1 1678 0
 24671 0010 0090     		str	r0, [sp, #0]
 24672              	.LVL438:
1679:sdcard.c      ****   uint8_t cardstate = 0;
 24673              		.loc 1 1679 0
 24674 0012 8DF80700 		strb	r0, [sp, #7]
 24675              	.LVL439:
1682:sdcard.c      ****   if (((CSD_Tab[1] >> 20) & SD_CCCC_ERASE) == 0)
 24676              		.loc 1 1682 0
 24677 0016 63D5     		bpl	.L371
1688:sdcard.c      ****   maxdelay = 72000 / ((SDIO->CLKCR & 0xFF) + 2);
 24678              		.loc 1 1688 0
 24679 0018 354A     		ldr	r2, .L374+4
 24680 001a 5168     		ldr	r1, [r2, #4]
 24681 001c 354A     		ldr	r2, .L374+8
 24682 001e CBB2     		uxtb	r3, r1
 24683 0020 991C     		adds	r1, r3, #2
 24684 0022 B2FBF1F3 		udiv	r3, r2, r1
 24685              	.LVL440:
 24686 0026 0093     		str	r3, [sp, #0]
 24687              	.LVL441:
1690:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 24688              		.loc 1 1690 0
 24689 0028 334A     		ldr	r2, .L374+12
 24690 002a 9047     		blx	r2
 24691              	.LVL442:
 24692 002c 8001     		lsls	r0, r0, #6
 24693 002e 59D4     		bmi	.L372
1696:sdcard.c      ****   if (CardType == SDIO_HIGH_CAPACITY_SD_CARD)
 24694              		.loc 1 1696 0
 24695 0030 324D     		ldr	r5, .L374+16
 24696 0032 2868     		ldr	r0, [r5, #0]
 24697 0034 0228     		cmp	r0, #2
 24698 0036 02D1     		bne	.L364
1698:sdcard.c      ****     startaddr /= 512;
 24699              		.loc 1 1698 0
 24700 0038 640A     		lsrs	r4, r4, #9
 24701              	.LVL443:
1699:sdcard.c      ****     endaddr /= 512;
 24702              		.loc 1 1699 0
 24703 003a 760A     		lsrs	r6, r6, #9
 24704              	.LVL444:
 24705 003c 00E0     		b	.L365
 24706              	.L364:
1703:sdcard.c      ****   if ((SDIO_STD_CAPACITY_SD_CARD_V1_1 == CardType) || (SDIO_STD_CAPACITY_SD_CARD_V2_0 == CardType) 
 24707              		.loc 1 1703 0
 24708 003e 26D8     		bhi	.L366
 24709              	.L365:
1706:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = startaddr;
 24710              		.loc 1 1706 0
 24711 0040 2F4D     		ldr	r5, .L374+20
1708:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24712              		.loc 1 1708 0
 24713 0042 4FF0400A 		mov	sl, #64
1706:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = startaddr;
 24714              		.loc 1 1706 0
 24715 0046 2C60     		str	r4, [r5, #0]
1709:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24716              		.loc 1 1709 0
 24717 0048 4FF00009 		mov	r9, #0
1707:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
 24718              		.loc 1 1707 0
 24719 004c 2024     		movs	r4, #32
 24720              	.LVL445:
1710:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24721              		.loc 1 1710 0
 24722 004e 4FF48068 		mov	r8, #1024
1707:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_START;
 24723              		.loc 1 1707 0
 24724 0052 6C60     		str	r4, [r5, #4]
1711:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24725              		.loc 1 1711 0
 24726 0054 2846     		mov	r0, r5
1708:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24727              		.loc 1 1708 0
 24728 0056 C5F808A0 		str	sl, [r5, #8]
1709:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24729              		.loc 1 1709 0
 24730 005a C5F80C90 		str	r9, [r5, #12]
1710:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24731              		.loc 1 1710 0
 24732 005e C5F81080 		str	r8, [r5, #16]
1711:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24733              		.loc 1 1711 0
 24734 0062 284F     		ldr	r7, .L374+24
 24735 0064 B847     		blx	r7
 24736              	.LVL446:
1713:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_START);
 24737              		.loc 1 1713 0
 24738 0066 2046     		mov	r0, r4
 24739 0068 274C     		ldr	r4, .L374+28
 24740 006a A047     		blx	r4
 24741              	.LVL447:
1714:sdcard.c      ****     if (errorstatus != SD_OK)
 24742              		.loc 1 1714 0
 24743 006c 2A28     		cmp	r0, #42
 24744 006e 3AD1     		bne	.L363
1720:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Argument = endaddr;
 24745              		.loc 1 1720 0
 24746 0070 2E60     		str	r6, [r5, #0]
1721:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
 24747              		.loc 1 1721 0
 24748 0072 2126     		movs	r6, #33
 24749              	.LVL448:
1725:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24750              		.loc 1 1725 0
 24751 0074 2846     		mov	r0, r5
 24752              	.LVL449:
1721:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_ERASE_GRP_END;
 24753              		.loc 1 1721 0
 24754 0076 6E60     		str	r6, [r5, #4]
1722:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24755              		.loc 1 1722 0
 24756 0078 C5F808A0 		str	sl, [r5, #8]
1723:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24757              		.loc 1 1723 0
 24758 007c C5F80C90 		str	r9, [r5, #12]
1724:sdcard.c      ****     SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24759              		.loc 1 1724 0
 24760 0080 C5F81080 		str	r8, [r5, #16]
1725:sdcard.c      ****     SDIO_SendCommand(&SDIO_CmdInitStructure);
 24761              		.loc 1 1725 0
 24762 0084 B847     		blx	r7
 24763              	.LVL450:
1727:sdcard.c      ****     errorstatus = CmdResp1Error(SDIO_SD_ERASE_GRP_END);
 24764              		.loc 1 1727 0
 24765 0086 3046     		mov	r0, r6
 24766 0088 A047     		blx	r4
 24767              	.LVL451:
1728:sdcard.c      ****     if (errorstatus != SD_OK)
 24768              		.loc 1 1728 0
 24769 008a 2A28     		cmp	r0, #42
 24770 008c 2BD1     		bne	.L363
 24771              	.LVL452:
 24772              	.L366:
1735:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0;
 24773              		.loc 1 1735 0
 24774 008e 1C48     		ldr	r0, .L374+20
1737:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24775              		.loc 1 1737 0
 24776 0090 4023     		movs	r3, #64
1736:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
 24777              		.loc 1 1736 0
 24778 0092 0024     		movs	r4, #0
 24779 0094 2625     		movs	r5, #38
1739:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24780              		.loc 1 1739 0
 24781 0096 4FF48062 		mov	r2, #1024
1737:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24782              		.loc 1 1737 0
 24783 009a 8360     		str	r3, [r0, #8]
1739:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24784              		.loc 1 1739 0
 24785 009c 0261     		str	r2, [r0, #16]
1736:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_ERASE;
 24786              		.loc 1 1736 0
 24787 009e 80E83000 		stmia	r0, {r4, r5}
1738:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24788              		.loc 1 1738 0
 24789 00a2 C460     		str	r4, [r0, #12]
1740:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 24790              		.loc 1 1740 0
 24791 00a4 1749     		ldr	r1, .L374+24
 24792 00a6 8847     		blx	r1
1742:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_ERASE);
 24793              		.loc 1 1742 0
 24794 00a8 2846     		mov	r0, r5
 24795 00aa 174B     		ldr	r3, .L374+28
 24796 00ac 9847     		blx	r3
 24797              	.LVL453:
1744:sdcard.c      ****   if (errorstatus != SD_OK)
 24798              		.loc 1 1744 0
 24799 00ae 2A28     		cmp	r0, #42
 24800 00b0 19D1     		bne	.L363
 24801 00b2 00E0     		b	.L367
 24802              	.LVL454:
 24803              	.L368:
1749:sdcard.c      ****   for (delay = 0; delay < maxdelay; delay++)
 24804              		.loc 1 1749 0 discriminator 2
 24805 00b4 0134     		adds	r4, r4, #1
 24806              	.LVL455:
 24807              	.L367:
1749:sdcard.c      ****   for (delay = 0; delay < maxdelay; delay++)
 24808              		.loc 1 1749 0 is_stmt 0 discriminator 1
 24809 00b6 0098     		ldr	r0, [sp, #0]
 24810 00b8 8442     		cmp	r4, r0
 24811 00ba FBD3     		bcc	.L368
1753:sdcard.c      ****   errorstatus = IsCardProgramming(&cardstate);
 24812              		.loc 1 1753 0 is_stmt 1
 24813 00bc 0DF10705 		add	r5, sp, #7
 24814 00c0 2846     		mov	r0, r5
 24815 00c2 124C     		ldr	r4, .L374+32
 24816              	.LVL456:
 24817 00c4 00E0     		b	.L373
 24818              	.LVL457:
 24819              	.L370:
1757:sdcard.c      ****     errorstatus = IsCardProgramming(&cardstate);
 24820              		.loc 1 1757 0
 24821 00c6 2846     		mov	r0, r5
 24822              	.LVL458:
 24823              	.L373:
 24824 00c8 A047     		blx	r4
 24825              	.LVL459:
1755:sdcard.c      ****   while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == car
 24826              		.loc 1 1755 0
 24827 00ca 2A28     		cmp	r0, #42
 24828 00cc 0BD1     		bne	.L363
1755:sdcard.c      ****   while ((errorstatus == SD_OK) && ((SD_CARD_PROGRAMMING == cardstate) || (SD_CARD_RECEIVING == car
 24829              		.loc 1 1755 0 is_stmt 0 discriminator 2
 24830 00ce 9DF80720 		ldrb	r2, [sp, #7]	@ zero_extendqisi2
 24831              	.LVL460:
 24832 00d2 911F     		subs	r1, r2, #6
 24833              	.LVL461:
 24834 00d4 5FFA81FC 		uxtb	ip, r1
 24835 00d8 BCF1010F 		cmp	ip, #1
 24836 00dc F3D9     		bls	.L370
 24837 00de 02E0     		b	.L363
 24838              	.LVL462:
 24839              	.L371:
1685:sdcard.c      ****     return(errorstatus);
 24840              		.loc 1 1685 0 is_stmt 1
 24841 00e0 2520     		movs	r0, #37
 24842 00e2 00E0     		b	.L363
 24843              	.L372:
1693:sdcard.c      ****     return(errorstatus);
 24844              		.loc 1 1693 0
 24845 00e4 0E20     		movs	r0, #14
 24846              	.LVL463:
 24847              	.L363:
1761:sdcard.c      **** }
 24848              		.loc 1 1761 0
 24849 00e6 BDE8FC87 		pop	{r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
 24850              	.L375:
 24851 00ea 00BF     		.align	2
 24852              	.L374:
 24853 00ec 00000000 		.word	.LANCHOR3
 24854 00f0 00800140 		.word	1073840128
 24855 00f4 40190100 		.word	72000
 24856 00f8 00000000 		.word	SDIO_GetResponse
 24857 00fc 00000000 		.word	.LANCHOR1
 24858 0100 00000000 		.word	SDIO_CmdInitStructure
 24859 0104 00000000 		.word	SDIO_SendCommand
 24860 0108 00000000 		.word	CmdResp1Error
 24861 010c 00000000 		.word	IsCardProgramming
 24862              		.cfi_endproc
 24863              	.LFE43:
 24865              		.section	.text.SD_SendStatus,"ax",%progbits
 24866              		.align	1
 24867              		.global	SD_SendStatus
 24868              		.thumb
 24869              		.thumb_func
 24871              	SD_SendStatus:
 24872              	.LFB44:
1770:sdcard.c      **** {
 24873              		.loc 1 1770 0
 24874              		.cfi_startproc
 24875              		@ args = 0, pretend = 0, frame = 0
 24876              		@ frame_needed = 0, uses_anonymous_args = 0
 24877              	.LVL464:
 24878 0000 70B5     		push	{r4, r5, r6, lr}
 24879              	.LCFI24:
 24880              		.cfi_def_cfa_offset 16
 24881              		.cfi_offset 14, -4
 24882              		.cfi_offset 6, -8
 24883              		.cfi_offset 5, -12
 24884              		.cfi_offset 4, -16
1770:sdcard.c      **** {
 24885              		.loc 1 1770 0
 24886 0002 0546     		mov	r5, r0
1776:sdcard.c      ****     return(errorstatus);
 24887              		.loc 1 1776 0
 24888 0004 2624     		movs	r4, #38
1773:sdcard.c      ****   if (pcardstatus == NULL)
 24889              		.loc 1 1773 0
 24890 0006 C8B1     		cbz	r0, .L377
1779:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 24891              		.loc 1 1779 0
 24892 0008 0D49     		ldr	r1, .L379
 24893 000a 0E48     		ldr	r0, .L379+4
 24894              	.LVL465:
 24895 000c 0C68     		ldr	r4, [r1, #0]
1781:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24896              		.loc 1 1781 0
 24897 000e 4026     		movs	r6, #64
1779:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 24898              		.loc 1 1779 0
 24899 0010 2304     		lsls	r3, r4, #16
1781:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 24900              		.loc 1 1781 0
 24901 0012 8660     		str	r6, [r0, #8]
1780:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 24902              		.loc 1 1780 0
 24903 0014 0D24     		movs	r4, #13
1783:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24904              		.loc 1 1783 0
 24905 0016 4FF48062 		mov	r2, #1024
1782:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24906              		.loc 1 1782 0
 24907 001a 0026     		movs	r6, #0
1779:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 24908              		.loc 1 1779 0
 24909 001c 0360     		str	r3, [r0, #0]
1780:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SEND_STATUS;
 24910              		.loc 1 1780 0
 24911 001e 4460     		str	r4, [r0, #4]
1783:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24912              		.loc 1 1783 0
 24913 0020 0261     		str	r2, [r0, #16]
1782:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 24914              		.loc 1 1782 0
 24915 0022 C660     		str	r6, [r0, #12]
1784:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 24916              		.loc 1 1784 0
 24917 0024 0849     		ldr	r1, .L379+8
 24918 0026 8847     		blx	r1
1787:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 24919              		.loc 1 1787 0
 24920 0028 2046     		mov	r0, r4
 24921 002a 084B     		ldr	r3, .L379+12
 24922 002c 9847     		blx	r3
1789:sdcard.c      ****   if (errorstatus != SD_OK)
 24923              		.loc 1 1789 0
 24924 002e 2A28     		cmp	r0, #42
1787:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SEND_STATUS);
 24925              		.loc 1 1787 0
 24926 0030 0446     		mov	r4, r0
 24927              	.LVL466:
1789:sdcard.c      ****   if (errorstatus != SD_OK)
 24928              		.loc 1 1789 0
 24929 0032 03D1     		bne	.L377
1794:sdcard.c      ****   *pcardstatus = SDIO_GetResponse(SDIO_RESP1);
 24930              		.loc 1 1794 0
 24931 0034 3046     		mov	r0, r6
 24932              	.LVL467:
 24933 0036 064A     		ldr	r2, .L379+16
 24934 0038 9047     		blx	r2
 24935 003a 2860     		str	r0, [r5, #0]
 24936              	.LVL468:
 24937              	.L377:
1797:sdcard.c      **** }
 24938              		.loc 1 1797 0
 24939 003c 2046     		mov	r0, r4
 24940 003e 70BD     		pop	{r4, r5, r6, pc}
 24941              	.L380:
 24942              		.align	2
 24943              	.L379:
 24944 0040 00000000 		.word	.LANCHOR0
 24945 0044 00000000 		.word	SDIO_CmdInitStructure
 24946 0048 00000000 		.word	SDIO_SendCommand
 24947 004c 00000000 		.word	CmdResp1Error
 24948 0050 00000000 		.word	SDIO_GetResponse
 24949              		.cfi_endproc
 24950              	.LFE44:
 24952              		.section	.text.SD_SendSDStatus,"ax",%progbits
 24953              		.align	1
 24954              		.global	SD_SendSDStatus
 24955              		.thumb
 24956              		.thumb_func
 24958              	SD_SendSDStatus:
 24959              	.LFB45:
1806:sdcard.c      **** {
 24960              		.loc 1 1806 0
 24961              		.cfi_startproc
 24962              		@ args = 0, pretend = 0, frame = 0
 24963              		@ frame_needed = 0, uses_anonymous_args = 0
 24964              	.LVL469:
 24965 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 24966              	.LCFI25:
 24967              		.cfi_def_cfa_offset 40
 24968              		.cfi_offset 14, -4
 24969              		.cfi_offset 11, -8
 24970              		.cfi_offset 10, -12
 24971              		.cfi_offset 9, -16
 24972              		.cfi_offset 8, -20
 24973              		.cfi_offset 7, -24
 24974              		.cfi_offset 6, -28
 24975              		.cfi_offset 5, -32
 24976              		.cfi_offset 4, -36
 24977              		.cfi_offset 3, -40
1806:sdcard.c      **** {
 24978              		.loc 1 1806 0
 24979 0004 0646     		mov	r6, r0
1810:sdcard.c      ****   if (SDIO_GetResponse(SDIO_RESP1) & SD_CARD_LOCKED)
 24980              		.loc 1 1810 0
 24981 0006 524B     		ldr	r3, .L404
 24982 0008 0020     		movs	r0, #0
 24983              	.LVL470:
 24984 000a 9847     		blx	r3
 24985 000c 10F00077 		ands	r7, r0, #33554432
 24986 0010 40F09A80 		bne	.L394
1817:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 64;
 24987              		.loc 1 1817 0
 24988 0014 4F4C     		ldr	r4, .L404+4
1818:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 24989              		.loc 1 1818 0
 24990 0016 1025     		movs	r5, #16
1817:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 64;
 24991              		.loc 1 1817 0
 24992 0018 4FF04008 		mov	r8, #64
1821:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 24993              		.loc 1 1821 0
 24994 001c 4FF4806B 		mov	fp, #1024
1818:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SET_BLOCKLEN;
 24995              		.loc 1 1818 0
 24996 0020 6560     		str	r5, [r4, #4]
1822:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 24997              		.loc 1 1822 0
 24998 0022 2046     		mov	r0, r4
1817:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 64;
 24999              		.loc 1 1817 0
 25000 0024 C4F80080 		str	r8, [r4, #0]
1819:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 25001              		.loc 1 1819 0
 25002 0028 C4F80880 		str	r8, [r4, #8]
1820:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 25003              		.loc 1 1820 0
 25004 002c E760     		str	r7, [r4, #12]
1821:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 25005              		.loc 1 1821 0
 25006 002e C4F810B0 		str	fp, [r4, #16]
1822:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 25007              		.loc 1 1822 0
 25008 0032 DFF840A1 		ldr	sl, .L404+36
 25009 0036 D047     		blx	sl
1824:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 25010              		.loc 1 1824 0
 25011 0038 DFF83C91 		ldr	r9, .L404+40
 25012 003c 2846     		mov	r0, r5
 25013 003e C847     		blx	r9
1826:sdcard.c      ****   if (errorstatus != SD_OK)
 25014              		.loc 1 1826 0
 25015 0040 2A28     		cmp	r0, #42
1824:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SET_BLOCKLEN);
 25016              		.loc 1 1824 0
 25017 0042 0546     		mov	r5, r0
 25018              	.LVL471:
1826:sdcard.c      ****   if (errorstatus != SD_OK)
 25019              		.loc 1 1826 0
 25020 0044 40F08180 		bne	.L382
1832:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 25021              		.loc 1 1832 0
 25022 0048 434A     		ldr	r2, .L404+8
1833:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 25023              		.loc 1 1833 0
 25024 004a 3725     		movs	r5, #55
1832:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 25025              		.loc 1 1832 0
 25026 004c 1168     		ldr	r1, [r2, #0]
1833:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_APP_CMD;
 25027              		.loc 1 1833 0
 25028 004e 6560     		str	r5, [r4, #4]
1832:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = (uint32_t) RCA << 16;
 25029              		.loc 1 1832 0
 25030 0050 0804     		lsls	r0, r1, #16
 25031              	.LVL472:
 25032 0052 2060     		str	r0, [r4, #0]
1834:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 25033              		.loc 1 1834 0
 25034 0054 C4F80880 		str	r8, [r4, #8]
1837:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 25035              		.loc 1 1837 0
 25036 0058 2046     		mov	r0, r4
1835:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 25037              		.loc 1 1835 0
 25038 005a E760     		str	r7, [r4, #12]
1836:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 25039              		.loc 1 1836 0
 25040 005c C4F810B0 		str	fp, [r4, #16]
1837:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 25041              		.loc 1 1837 0
 25042 0060 D047     		blx	sl
1838:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
 25043              		.loc 1 1838 0
 25044 0062 2846     		mov	r0, r5
 25045 0064 C847     		blx	r9
1840:sdcard.c      ****   if (errorstatus != SD_OK)
 25046              		.loc 1 1840 0
 25047 0066 2A28     		cmp	r0, #42
1838:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_APP_CMD);
 25048              		.loc 1 1838 0
 25049 0068 0546     		mov	r5, r0
 25050              	.LVL473:
1840:sdcard.c      ****   if (errorstatus != SD_OK)
 25051              		.loc 1 1840 0
 25052 006a 6ED1     		bne	.L382
1845:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataTimeOut = SD_DATATIMEOUT;
 25053              		.loc 1 1845 0
 25054 006c 3B48     		ldr	r0, .L404+12
 25055              	.LVL474:
 25056 006e 3C4B     		ldr	r3, .L404+16
1848:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 25057              		.loc 1 1848 0
 25058 0070 0222     		movs	r2, #2
1850:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 25059              		.loc 1 1850 0
 25060 0072 0121     		movs	r1, #1
1847:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
 25061              		.loc 1 1847 0
 25062 0074 6025     		movs	r5, #96
 25063              	.LVL475:
1848:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferDir = SDIO_TransferDir_ToSDIO;
 25064              		.loc 1 1848 0
 25065 0076 C260     		str	r2, [r0, #12]
1850:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DPSM = SDIO_DPSM_Enable;
 25066              		.loc 1 1850 0
 25067 0078 4161     		str	r1, [r0, #20]
1846:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataLength = 64;
 25068              		.loc 1 1846 0
 25069 007a 80E80801 		stmia	r0, {r3, r8}
1847:sdcard.c      ****   SDIO_DataInitStructure.SDIO_DataBlockSize = SDIO_DataBlockSize_64b;
 25070              		.loc 1 1847 0
 25071 007e 8560     		str	r5, [r0, #8]
1851:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 25072              		.loc 1 1851 0
 25073 0080 384B     		ldr	r3, .L404+20
1855:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
 25074              		.loc 1 1855 0
 25075 0082 0D25     		movs	r5, #13
1849:sdcard.c      ****   SDIO_DataInitStructure.SDIO_TransferMode = SDIO_TransferMode_Block;
 25076              		.loc 1 1849 0
 25077 0084 0761     		str	r7, [r0, #16]
1851:sdcard.c      ****   SDIO_DataConfig(&SDIO_DataInitStructure);
 25078              		.loc 1 1851 0
 25079 0086 9847     		blx	r3
1855:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CmdIndex = SDIO_SD_APP_STAUS;
 25080              		.loc 1 1855 0
 25081 0088 6560     		str	r5, [r4, #4]
1859:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 25082              		.loc 1 1859 0
 25083 008a 2046     		mov	r0, r4
1854:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Argument = 0;
 25084              		.loc 1 1854 0
 25085 008c 2760     		str	r7, [r4, #0]
1856:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Response = SDIO_Response_Short;
 25086              		.loc 1 1856 0
 25087 008e C4F80880 		str	r8, [r4, #8]
1857:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_Wait = SDIO_Wait_No;
 25088              		.loc 1 1857 0
 25089 0092 E760     		str	r7, [r4, #12]
1858:sdcard.c      ****   SDIO_CmdInitStructure.SDIO_CPSM = SDIO_CPSM_Enable;
 25090              		.loc 1 1858 0
 25091 0094 C4F810B0 		str	fp, [r4, #16]
1859:sdcard.c      ****   SDIO_SendCommand(&SDIO_CmdInitStructure);
 25092              		.loc 1 1859 0
 25093 0098 D047     		blx	sl
1860:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
 25094              		.loc 1 1860 0
 25095 009a 2846     		mov	r0, r5
 25096 009c C847     		blx	r9
1862:sdcard.c      ****   if (errorstatus != SD_OK)
 25097              		.loc 1 1862 0
 25098 009e 2A28     		cmp	r0, #42
1860:sdcard.c      ****   errorstatus = CmdResp1Error(SDIO_SD_APP_STAUS);
 25099              		.loc 1 1860 0
 25100 00a0 0546     		mov	r5, r0
 25101              	.LVL476:
1862:sdcard.c      ****   if (errorstatus != SD_OK)
 25102              		.loc 1 1862 0
 25103 00a2 52D1     		bne	.L382
 25104 00a4 0AE0     		b	.L403
 25105              	.LVL477:
 25106              	.L386:
1869:sdcard.c      ****     if (SDIO_GetFlagStatus(SDIO_FLAG_RXFIFOHF) != RESET)
 25107              		.loc 1 1869 0
 25108 00a6 4FF40040 		mov	r0, #32768
 25109 00aa A047     		blx	r4
 25110 00ac 50B1     		cbz	r0, .L399
 25111              	.L385:
1873:sdcard.c      ****         *(psdstatus + count) = SDIO_ReadData();
 25112              		.loc 1 1873 0 discriminator 2
 25113 00ae C047     		blx	r8
 25114 00b0 F051     		str	r0, [r6, r7]
 25115 00b2 0437     		adds	r7, r7, #4
1871:sdcard.c      ****       for (count = 0; count < 8; count++)
 25116              		.loc 1 1871 0 discriminator 2
 25117 00b4 202F     		cmp	r7, #32
 25118 00b6 FAD1     		bne	.L385
1875:sdcard.c      ****       psdstatus += 8;
 25119              		.loc 1 1875 0
 25120 00b8 2036     		adds	r6, r6, #32
 25121              	.LVL478:
 25122 00ba 03E0     		b	.L399
 25123              	.LVL479:
 25124              	.L403:
1867:sdcard.c      ****   while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCK
 25125              		.loc 1 1867 0 discriminator 1
 25126 00bc DFF8BC90 		ldr	r9, .L404+44
1873:sdcard.c      ****         *(psdstatus + count) = SDIO_ReadData();
 25127              		.loc 1 1873 0 discriminator 1
 25128 00c0 DFF8AC80 		ldr	r8, .L404+32
 25129              	.LVL480:
 25130              	.L399:
1867:sdcard.c      ****   while (!(SDIO->STA &(SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCK
 25131              		.loc 1 1867 0 discriminator 1
 25132 00c4 D9F83440 		ldr	r4, [r9, #52]
 25133 00c8 40F22A67 		movw	r7, #1578
 25134 00cc 04EA0707 		and	r7, r4, r7
 25135 00d0 254C     		ldr	r4, .L404+24
 25136 00d2 002F     		cmp	r7, #0
 25137 00d4 E7D0     		beq	.L386
1879:sdcard.c      ****   if (SDIO_GetFlagStatus(SDIO_FLAG_DTIMEOUT) != RESET)
 25138              		.loc 1 1879 0
 25139 00d6 0820     		movs	r0, #8
 25140 00d8 A047     		blx	r4
 25141 00da 20B1     		cbz	r0, .L387
1881:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DTIMEOUT);
 25142              		.loc 1 1881 0
 25143 00dc 0820     		movs	r0, #8
 25144 00de 234B     		ldr	r3, .L404+28
 25145 00e0 9847     		blx	r3
 25146              	.LVL481:
1883:sdcard.c      ****     return(errorstatus);
 25147              		.loc 1 1883 0
 25148 00e2 0425     		movs	r5, #4
 25149 00e4 31E0     		b	.L382
 25150              	.LVL482:
 25151              	.L387:
1885:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_DCRCFAIL) != RESET)
 25152              		.loc 1 1885 0
 25153 00e6 0220     		movs	r0, #2
 25154 00e8 A047     		blx	r4
 25155 00ea 20B1     		cbz	r0, .L388
1887:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_DCRCFAIL);
 25156              		.loc 1 1887 0
 25157 00ec 0220     		movs	r0, #2
 25158 00ee 1F49     		ldr	r1, .L404+28
 25159 00f0 8847     		blx	r1
 25160              	.LVL483:
1889:sdcard.c      ****     return(errorstatus);
 25161              		.loc 1 1889 0
 25162 00f2 0225     		movs	r5, #2
 25163 00f4 29E0     		b	.L382
 25164              	.LVL484:
 25165              	.L388:
1891:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_RXOVERR) != RESET)
 25166              		.loc 1 1891 0
 25167 00f6 2020     		movs	r0, #32
 25168 00f8 A047     		blx	r4
 25169 00fa 20B1     		cbz	r0, .L389
1893:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_RXOVERR);
 25170              		.loc 1 1893 0
 25171 00fc 2020     		movs	r0, #32
 25172 00fe 1B4A     		ldr	r2, .L404+28
 25173 0100 9047     		blx	r2
 25174              	.LVL485:
1895:sdcard.c      ****     return(errorstatus);
 25175              		.loc 1 1895 0
 25176 0102 0625     		movs	r5, #6
 25177 0104 21E0     		b	.L382
 25178              	.LVL486:
 25179              	.L389:
1897:sdcard.c      ****   else if (SDIO_GetFlagStatus(SDIO_FLAG_STBITERR) != RESET)
 25180              		.loc 1 1897 0
 25181 0106 4FF40070 		mov	r0, #512
 25182 010a A047     		blx	r4
 25183 010c 48B1     		cbz	r0, .L401
1899:sdcard.c      ****     SDIO_ClearFlag(SDIO_FLAG_STBITERR);
 25184              		.loc 1 1899 0
 25185 010e 174D     		ldr	r5, .L404+28
 25186              	.LVL487:
 25187 0110 4FF40070 		mov	r0, #512
 25188 0114 A847     		blx	r5
 25189              	.LVL488:
1901:sdcard.c      ****     return(errorstatus);
 25190              		.loc 1 1901 0
 25191 0116 0725     		movs	r5, #7
 25192 0118 17E0     		b	.L382
 25193              	.LVL489:
 25194              	.L392:
1906:sdcard.c      ****     *psdstatus = SDIO_ReadData();
 25195              		.loc 1 1906 0
 25196 011a B847     		blx	r7
 25197 011c 46F8040B 		str	r0, [r6], #4
 25198              	.LVL490:
 25199 0120 00E0     		b	.L402
 25200              	.L401:
1906:sdcard.c      ****     *psdstatus = SDIO_ReadData();
 25201              		.loc 1 1906 0 is_stmt 0 discriminator 1
 25202 0122 134F     		ldr	r7, .L404+32
 25203              	.L402:
1904:sdcard.c      ****   while (SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)
 25204              		.loc 1 1904 0 is_stmt 1 discriminator 1
 25205 0124 4FF40010 		mov	r0, #2097152
 25206 0128 A047     		blx	r4
 25207 012a 0028     		cmp	r0, #0
 25208 012c F5D1     		bne	.L392
1911:sdcard.c      ****   SDIO_ClearFlag(SDIO_STATIC_FLAGS);
 25209              		.loc 1 1911 0
 25210 012e 0F4B     		ldr	r3, .L404+28
 25211 0130 40F2FF50 		movw	r0, #1535
 25212 0134 9847     		blx	r3
 25213              	.LVL491:
1912:sdcard.c      ****   psdstatus -= 16;
 25214              		.loc 1 1912 0
 25215 0136 A6F14003 		sub	r3, r6, #64
 25216              	.LVL492:
 25217              	.L393:
1915:sdcard.c      ****     psdstatus[count] = ((psdstatus[count] & SD_0TO7BITS) << 24) |((psdstatus[count] & SD_8TO15BITS)
 25218              		.loc 1 1915 0 discriminator 2
 25219 013a 1968     		ldr	r1, [r3, #0]
 25220 013c 08BA     		rev	r0, r1
 25221 013e 43F8040B 		str	r0, [r3], #4
1913:sdcard.c      ****   for (count = 0; count < 16; count++)
 25222              		.loc 1 1913 0 discriminator 2
 25223 0142 B342     		cmp	r3, r6
 25224 0144 F9D1     		bne	.L393
 25225 0146 00E0     		b	.L382
 25226              	.LVL493:
 25227              	.L394:
1813:sdcard.c      ****     return(errorstatus);
 25228              		.loc 1 1813 0
 25229 0148 0E25     		movs	r5, #14
 25230              	.LVL494:
 25231              	.L382:
1919:sdcard.c      **** }
 25232              		.loc 1 1919 0
 25233 014a 2846     		mov	r0, r5
 25234 014c BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 25235              	.L405:
 25236              		.align	2
 25237              	.L404:
 25238 0150 00000000 		.word	SDIO_GetResponse
 25239 0154 00000000 		.word	SDIO_CmdInitStructure
 25240 0158 00000000 		.word	.LANCHOR0
 25241 015c 00000000 		.word	SDIO_DataInitStructure
 25242 0160 FFFF0F00 		.word	1048575
 25243 0164 00000000 		.word	SDIO_DataConfig
 25244 0168 00000000 		.word	SDIO_GetFlagStatus
 25245 016c 00000000 		.word	SDIO_ClearFlag
 25246 0170 00000000 		.word	SDIO_ReadData
 25247 0174 00000000 		.word	SDIO_SendCommand
 25248 0178 00000000 		.word	CmdResp1Error
 25249 017c 00800140 		.word	1073840128
 25250              		.cfi_endproc
 25251              	.LFE45:
 25253              		.section	.text.SD_ProcessIRQSrc,"ax",%progbits
 25254              		.align	1
 25255              		.global	SD_ProcessIRQSrc
 25256              		.thumb
 25257              		.thumb_func
 25259              	SD_ProcessIRQSrc:
 25260              	.LFB46:
1927:sdcard.c      **** {
 25261              		.loc 1 1927 0
 25262              		.cfi_startproc
 25263              		@ args = 0, pretend = 0, frame = 0
 25264              		@ frame_needed = 0, uses_anonymous_args = 0
 25265              	.LVL495:
1930:sdcard.c      ****   if (DeviceMode == SD_INTERRUPT_MODE)
 25266              		.loc 1 1930 0
 25267 0000 7648     		ldr	r0, .L433
1927:sdcard.c      **** {
 25268              		.loc 1 1927 0
 25269 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25270              	.LCFI26:
 25271              		.cfi_def_cfa_offset 24
 25272              		.cfi_offset 14, -4
 25273              		.cfi_offset 8, -8
 25274              		.cfi_offset 7, -12
 25275              		.cfi_offset 6, -16
 25276              		.cfi_offset 5, -20
 25277              		.cfi_offset 4, -24
1930:sdcard.c      ****   if (DeviceMode == SD_INTERRUPT_MODE)
 25278              		.loc 1 1930 0
 25279 0006 0368     		ldr	r3, [r0, #0]
 25280 0008 012B     		cmp	r3, #1
 25281 000a 4DD1     		bne	.L407
1932:sdcard.c      ****     if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
 25282              		.loc 1 1932 0
 25283 000c 4FF40040 		mov	r0, #32768
 25284 0010 734D     		ldr	r5, .L433+4
 25285 0012 A847     		blx	r5
 25286 0014 0446     		mov	r4, r0
 25287 0016 60B1     		cbz	r0, .L408
1936:sdcard.c      ****         *(DestBuffer + count) = SDIO_ReadData();
 25288              		.loc 1 1936 0
 25289 0018 724F     		ldr	r7, .L433+8
 25290 001a 734E     		ldr	r6, .L433+12
1932:sdcard.c      ****     if (SDIO_GetITStatus(SDIO_IT_RXFIFOHF) != RESET)
 25291              		.loc 1 1932 0
 25292 001c 0024     		movs	r4, #0
 25293              	.LVL496:
 25294              	.L409:
1936:sdcard.c      ****         *(DestBuffer + count) = SDIO_ReadData();
 25295              		.loc 1 1936 0 discriminator 2
 25296 001e D7F80080 		ldr	r8, [r7, #0]
 25297 0022 B047     		blx	r6
 25298 0024 48F80400 		str	r0, [r8, r4]
 25299 0028 0434     		adds	r4, r4, #4
1934:sdcard.c      ****       for (count = 0; count < SD_HALFFIFO; count++)
 25300              		.loc 1 1934 0 discriminator 2
 25301 002a 202C     		cmp	r4, #32
1936:sdcard.c      ****         *(DestBuffer + count) = SDIO_ReadData();
 25302              		.loc 1 1936 0 discriminator 2
 25303 002c 6D4D     		ldr	r5, .L433+8
1934:sdcard.c      ****       for (count = 0; count < SD_HALFFIFO; count++)
 25304              		.loc 1 1934 0 discriminator 2
 25305 002e F6D1     		bne	.L409
 25306 0030 33E0     		b	.L431
 25307              	.LVL497:
 25308              	.L408:
1941:sdcard.c      ****     else if (SDIO_GetITStatus(SDIO_IT_TXFIFOHE) != RESET)
 25309              		.loc 1 1941 0
 25310 0032 4FF48040 		mov	r0, #16384
 25311 0036 A847     		blx	r5
 25312 0038 0028     		cmp	r0, #0
 25313 003a 35D0     		beq	.L407
1943:sdcard.c      ****       if ((TotalNumberOfBytes - NumberOfBytes) < SD_HALFFIFOBYTES)
 25314              		.loc 1 1943 0
 25315 003c 6B4A     		ldr	r2, .L433+16
 25316 003e 1368     		ldr	r3, [r2, #0]
 25317 0040 6B4A     		ldr	r2, .L433+20
 25318 0042 1568     		ldr	r5, [r2, #0]
 25319 0044 591B     		subs	r1, r3, r5
 25320 0046 1F29     		cmp	r1, #31
 25321 0048 1ED8     		bhi	.L426
1945:sdcard.c      ****         restwords = ((TotalNumberOfBytes - NumberOfBytes) %  4 == 0) ?
 25322              		.loc 1 1945 0
 25323 004a 1668     		ldr	r6, [r2, #0]
 25324 004c 9C1B     		subs	r4, r3, r6
1946:sdcard.c      ****                     ((TotalNumberOfBytes - NumberOfBytes) / 4) :
 25325              		.loc 1 1946 0
 25326 004e A107     		lsls	r1, r4, #30
 25327 0050 03D1     		bne	.L411
1946:sdcard.c      ****                     ((TotalNumberOfBytes - NumberOfBytes) / 4) :
 25328              		.loc 1 1946 0 is_stmt 0 discriminator 1
 25329 0052 1068     		ldr	r0, [r2, #0]
 25330 0054 1F1A     		subs	r7, r3, r0
 25331 0056 BF08     		lsrs	r7, r7, #2
 25332 0058 03E0     		b	.L412
 25333              	.L411:
1947:sdcard.c      ****                     ((TotalNumberOfBytes - NumberOfBytes) / 4 + 1);
 25334              		.loc 1 1947 0 is_stmt 1 discriminator 2
 25335 005a 1568     		ldr	r5, [r2, #0]
 25336 005c 591B     		subs	r1, r3, r5
 25337 005e 8B08     		lsrs	r3, r1, #2
1946:sdcard.c      ****                     ((TotalNumberOfBytes - NumberOfBytes) / 4) :
 25338              		.loc 1 1946 0 discriminator 2
 25339 0060 5F1C     		adds	r7, r3, #1
 25340              	.L412:
 25341              	.LVL498:
1949:sdcard.c      ****         for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 25342              		.loc 1 1949 0
 25343 0062 0025     		movs	r5, #0
1951:sdcard.c      ****           SDIO_WriteData(*SrcBuffer);
 25344              		.loc 1 1951 0
 25345 0064 634C     		ldr	r4, .L433+24
 25346 0066 DFF89081 		ldr	r8, .L433+28
1949:sdcard.c      ****         for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 25347              		.loc 1 1949 0
 25348 006a 614E     		ldr	r6, .L433+20
 25349 006c 09E0     		b	.L413
 25350              	.LVL499:
 25351              	.L414:
1951:sdcard.c      ****           SDIO_WriteData(*SrcBuffer);
 25352              		.loc 1 1951 0 discriminator 2
 25353 006e 2268     		ldr	r2, [r4, #0]
1949:sdcard.c      ****         for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 25354              		.loc 1 1949 0 discriminator 2
 25355 0070 0135     		adds	r5, r5, #1
 25356              	.LVL500:
1951:sdcard.c      ****           SDIO_WriteData(*SrcBuffer);
 25357              		.loc 1 1951 0 discriminator 2
 25358 0072 1068     		ldr	r0, [r2, #0]
 25359 0074 C047     		blx	r8
 25360              	.LVL501:
1949:sdcard.c      ****         for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 25361              		.loc 1 1949 0 discriminator 2
 25362 0076 2168     		ldr	r1, [r4, #0]
 25363 0078 3068     		ldr	r0, [r6, #0]
 25364 007a 0B1D     		adds	r3, r1, #4
 25365 007c 021D     		adds	r2, r0, #4
 25366 007e 2360     		str	r3, [r4, #0]
 25367 0080 3260     		str	r2, [r6, #0]
 25368              	.LVL502:
 25369              	.L413:
1949:sdcard.c      ****         for (count = 0; count < restwords;  count++, SrcBuffer++, NumberOfBytes += 4)
 25370              		.loc 1 1949 0 is_stmt 0 discriminator 1
 25371 0082 BD42     		cmp	r5, r7
 25372 0084 F3D1     		bne	.L414
 25373 0086 0FE0     		b	.L407
 25374              	.LVL503:
 25375              	.L426:
1958:sdcard.c      ****           SDIO_WriteData(*(SrcBuffer + count));
 25376              		.loc 1 1958 0 is_stmt 1
 25377 0088 5A4F     		ldr	r7, .L433+24
 25378 008a 5B4E     		ldr	r6, .L433+28
 25379              	.LVL504:
 25380              	.L410:
1958:sdcard.c      ****           SDIO_WriteData(*(SrcBuffer + count));
 25381              		.loc 1 1958 0 is_stmt 0 discriminator 2
 25382 008c 3868     		ldr	r0, [r7, #0]
 25383 008e 594D     		ldr	r5, .L433+24
 25384 0090 0059     		ldr	r0, [r0, r4]
 25385 0092 0434     		adds	r4, r4, #4
 25386 0094 B047     		blx	r6
1956:sdcard.c      ****         for (count = 0; count < SD_HALFFIFO; count++)
 25387              		.loc 1 1956 0 is_stmt 1 discriminator 2
 25388 0096 202C     		cmp	r4, #32
 25389 0098 F8D1     		bne	.L410
 25390              	.L431:
1962:sdcard.c      ****         NumberOfBytes += SD_HALFFIFOBYTES;
 25391              		.loc 1 1962 0
 25392 009a 554E     		ldr	r6, .L433+20
1961:sdcard.c      ****         SrcBuffer += SD_HALFFIFO;
 25393              		.loc 1 1961 0
 25394 009c 2B68     		ldr	r3, [r5, #0]
1962:sdcard.c      ****         NumberOfBytes += SD_HALFFIFOBYTES;
 25395              		.loc 1 1962 0
 25396 009e 3468     		ldr	r4, [r6, #0]
1961:sdcard.c      ****         SrcBuffer += SD_HALFFIFO;
 25397              		.loc 1 1961 0
 25398 00a0 2033     		adds	r3, r3, #32
1962:sdcard.c      ****         NumberOfBytes += SD_HALFFIFOBYTES;
 25399              		.loc 1 1962 0
 25400 00a2 2034     		adds	r4, r4, #32
1961:sdcard.c      ****         SrcBuffer += SD_HALFFIFO;
 25401              		.loc 1 1961 0
 25402 00a4 2B60     		str	r3, [r5, #0]
1962:sdcard.c      ****         NumberOfBytes += SD_HALFFIFOBYTES;
 25403              		.loc 1 1962 0
 25404 00a6 3460     		str	r4, [r6, #0]
 25405              	.LVL505:
 25406              	.L407:
1967:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_DATAEND) != RESET)
 25407              		.loc 1 1967 0
 25408 00a8 4FF48070 		mov	r0, #256
 25409 00ac 4C4E     		ldr	r6, .L433+4
 25410 00ae B047     		blx	r6
 25411 00b0 0446     		mov	r4, r0
 25412 00b2 0028     		cmp	r0, #0
 25413 00b4 3AD0     		beq	.L415
1969:sdcard.c      ****     if (DeviceMode != SD_DMA_MODE)
 25414              		.loc 1 1969 0
 25415 00b6 494A     		ldr	r2, .L433
 25416 00b8 1168     		ldr	r1, [r2, #0]
 25417 00ba 71B9     		cbnz	r1, .L416
 25418 00bc 18E0     		b	.L417
 25419              	.L418:
1973:sdcard.c      ****         *DestBuffer = SDIO_ReadData();
 25420              		.loc 1 1973 0
 25421 00be 494D     		ldr	r5, .L433+8
 25422 00c0 4948     		ldr	r0, .L433+12
 25423 00c2 D5F80080 		ldr	r8, [r5, #0]
 25424 00c6 8047     		blx	r0
 25425 00c8 C8F80000 		str	r0, [r8, #0]
1974:sdcard.c      ****         DestBuffer++;
 25426              		.loc 1 1974 0
 25427 00cc 2A68     		ldr	r2, [r5, #0]
1975:sdcard.c      ****         NumberOfBytes += 4;
 25428              		.loc 1 1975 0
 25429 00ce 2368     		ldr	r3, [r4, #0]
1974:sdcard.c      ****         DestBuffer++;
 25430              		.loc 1 1974 0
 25431 00d0 111D     		adds	r1, r2, #4
1975:sdcard.c      ****         NumberOfBytes += 4;
 25432              		.loc 1 1975 0
 25433 00d2 181D     		adds	r0, r3, #4
1974:sdcard.c      ****         DestBuffer++;
 25434              		.loc 1 1974 0
 25435 00d4 2960     		str	r1, [r5, #0]
1975:sdcard.c      ****         NumberOfBytes += 4;
 25436              		.loc 1 1975 0
 25437 00d6 2060     		str	r0, [r4, #0]
 25438 00d8 02E0     		b	.L430
 25439              	.L416:
1971:sdcard.c      ****       while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfByt
 25440              		.loc 1 1971 0 discriminator 1
 25441 00da 484F     		ldr	r7, .L433+32
 25442 00dc 444C     		ldr	r4, .L433+20
 25443 00de 434E     		ldr	r6, .L433+16
 25444              	.L430:
 25445 00e0 4FF40010 		mov	r0, #2097152
 25446 00e4 B847     		blx	r7
 25447 00e6 18B1     		cbz	r0, .L417
1971:sdcard.c      ****       while ((SDIO_GetFlagStatus(SDIO_FLAG_RXDAVL) != RESET)  &&  (NumberOfBytes < TotalNumberOfByt
 25448              		.loc 1 1971 0 is_stmt 0 discriminator 2
 25449 00e8 2168     		ldr	r1, [r4, #0]
 25450 00ea 3368     		ldr	r3, [r6, #0]
 25451 00ec 9942     		cmp	r1, r3
 25452 00ee E6D3     		bcc	.L418
 25453              	.L417:
1979:sdcard.c      ****     if (StopCondition == 1)
 25454              		.loc 1 1979 0 is_stmt 1
 25455 00f0 434A     		ldr	r2, .L433+36
 25456 00f2 1468     		ldr	r4, [r2, #0]
 25457 00f4 012C     		cmp	r4, #1
 25458 00f6 434C     		ldr	r4, .L433+40
 25459 00f8 03D1     		bne	.L419
1981:sdcard.c      ****       TransferError = SD_StopTransfer();
 25460              		.loc 1 1981 0
 25461 00fa 4348     		ldr	r0, .L433+44
 25462 00fc 8047     		blx	r0
 25463 00fe 2070     		strb	r0, [r4, #0]
 25464 0100 01E0     		b	.L420
 25465              	.L419:
1985:sdcard.c      ****       TransferError = SD_OK;
 25466              		.loc 1 1985 0
 25467 0102 2A21     		movs	r1, #42
 25468 0104 2170     		strb	r1, [r4, #0]
 25469              	.L420:
1987:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_DATAEND);
 25470              		.loc 1 1987 0
 25471 0106 4FF48070 		mov	r0, #256
 25472 010a 4049     		ldr	r1, .L433+48
 25473 010c 8847     		blx	r1
1988:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 25474              		.loc 1 1988 0
 25475 010e 4CF23A30 		movw	r0, #49978
 25476 0112 0021     		movs	r1, #0
 25477 0114 3E4A     		ldr	r2, .L433+52
 25478 0116 9047     		blx	r2
1991:sdcard.c      ****     TransferEnd = 1;
 25479              		.loc 1 1991 0
 25480 0118 3E4B     		ldr	r3, .L433+56
1992:sdcard.c      ****     NumberOfBytes = 0;
 25481              		.loc 1 1992 0
 25482 011a 3548     		ldr	r0, .L433+20
1991:sdcard.c      ****     TransferEnd = 1;
 25483              		.loc 1 1991 0
 25484 011c 0121     		movs	r1, #1
 25485 011e 1960     		str	r1, [r3, #0]
1992:sdcard.c      ****     NumberOfBytes = 0;
 25486              		.loc 1 1992 0
 25487 0120 0022     		movs	r2, #0
1993:sdcard.c      ****     return(TransferError);
 25488              		.loc 1 1993 0
 25489 0122 384B     		ldr	r3, .L433+40
1992:sdcard.c      ****     NumberOfBytes = 0;
 25490              		.loc 1 1992 0
 25491 0124 0260     		str	r2, [r0, #0]
1993:sdcard.c      ****     return(TransferError);
 25492              		.loc 1 1993 0
 25493 0126 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 25494 0128 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25495              	.L415:
1996:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_DCRCFAIL) != RESET)
 25496              		.loc 1 1996 0
 25497 012c 0220     		movs	r0, #2
 25498 012e B047     		blx	r6
 25499 0130 0546     		mov	r5, r0
 25500 0132 58B1     		cbz	r0, .L422
1998:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_DCRCFAIL);
 25501              		.loc 1 1998 0
 25502 0134 0220     		movs	r0, #2
 25503 0136 354A     		ldr	r2, .L433+48
 25504 0138 9047     		blx	r2
1999:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 25505              		.loc 1 1999 0
 25506 013a 4CF23A30 		movw	r0, #49978
 25507 013e 2146     		mov	r1, r4
 25508 0140 334B     		ldr	r3, .L433+52
 25509 0142 9847     		blx	r3
2002:sdcard.c      ****     NumberOfBytes = 0;
 25510              		.loc 1 2002 0
 25511 0144 2A48     		ldr	r0, .L433+20
 25512 0146 0460     		str	r4, [r0, #0]
2003:sdcard.c      ****     TransferError = SD_DATA_CRC_FAIL;
 25513              		.loc 1 2003 0
 25514 0148 0220     		movs	r0, #2
 25515 014a 3FE0     		b	.L432
 25516              	.L422:
2007:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_DTIMEOUT) != RESET)
 25517              		.loc 1 2007 0
 25518 014c 0820     		movs	r0, #8
 25519 014e B047     		blx	r6
 25520 0150 0446     		mov	r4, r0
 25521 0152 58B1     		cbz	r0, .L423
2009:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_DTIMEOUT);
 25522              		.loc 1 2009 0
 25523 0154 0820     		movs	r0, #8
 25524 0156 2D4A     		ldr	r2, .L433+48
 25525 0158 9047     		blx	r2
2010:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 25526              		.loc 1 2010 0
 25527 015a 4CF23A30 		movw	r0, #49978
 25528 015e 2946     		mov	r1, r5
 25529 0160 2B4B     		ldr	r3, .L433+52
 25530 0162 9847     		blx	r3
2013:sdcard.c      ****     NumberOfBytes = 0;
 25531              		.loc 1 2013 0
 25532 0164 2249     		ldr	r1, .L433+20
2014:sdcard.c      ****     TransferError = SD_DATA_TIMEOUT;
 25533              		.loc 1 2014 0
 25534 0166 0420     		movs	r0, #4
2013:sdcard.c      ****     NumberOfBytes = 0;
 25535              		.loc 1 2013 0
 25536 0168 0D60     		str	r5, [r1, #0]
 25537 016a 2FE0     		b	.L432
 25538              	.L423:
2018:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_RXOVERR) != RESET)
 25539              		.loc 1 2018 0
 25540 016c 2020     		movs	r0, #32
 25541 016e B047     		blx	r6
 25542 0170 0546     		mov	r5, r0
 25543 0172 58B1     		cbz	r0, .L424
2020:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_RXOVERR);
 25544              		.loc 1 2020 0
 25545 0174 2020     		movs	r0, #32
 25546 0176 2549     		ldr	r1, .L433+48
 25547 0178 8847     		blx	r1
2021:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 25548              		.loc 1 2021 0
 25549 017a 4CF23A30 		movw	r0, #49978
 25550 017e 2146     		mov	r1, r4
 25551 0180 234B     		ldr	r3, .L433+52
 25552 0182 9847     		blx	r3
2024:sdcard.c      ****     NumberOfBytes = 0;
 25553              		.loc 1 2024 0
 25554 0184 1A48     		ldr	r0, .L433+20
 25555 0186 0460     		str	r4, [r0, #0]
2025:sdcard.c      ****     TransferError = SD_RX_OVERRUN;
 25556              		.loc 1 2025 0
 25557 0188 0620     		movs	r0, #6
 25558 018a 1FE0     		b	.L432
 25559              	.L424:
2029:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_TXUNDERR) != RESET)
 25560              		.loc 1 2029 0
 25561 018c 1020     		movs	r0, #16
 25562 018e B047     		blx	r6
 25563 0190 0446     		mov	r4, r0
 25564 0192 58B1     		cbz	r0, .L425
2031:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_TXUNDERR);
 25565              		.loc 1 2031 0
 25566 0194 1020     		movs	r0, #16
 25567 0196 1D49     		ldr	r1, .L433+48
 25568 0198 8847     		blx	r1
2032:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 25569              		.loc 1 2032 0
 25570 019a 4CF23A30 		movw	r0, #49978
 25571 019e 2946     		mov	r1, r5
 25572 01a0 1B4B     		ldr	r3, .L433+52
 25573 01a2 9847     		blx	r3
2035:sdcard.c      ****     NumberOfBytes = 0;
 25574              		.loc 1 2035 0
 25575 01a4 124A     		ldr	r2, .L433+20
2036:sdcard.c      ****     TransferError = SD_TX_UNDERRUN;
 25576              		.loc 1 2036 0
 25577 01a6 0520     		movs	r0, #5
2035:sdcard.c      ****     NumberOfBytes = 0;
 25578              		.loc 1 2035 0
 25579 01a8 1560     		str	r5, [r2, #0]
 25580 01aa 0FE0     		b	.L432
 25581              	.L425:
2040:sdcard.c      ****   if (SDIO_GetITStatus(SDIO_IT_STBITERR) != RESET)
 25582              		.loc 1 2040 0
 25583 01ac 4FF40070 		mov	r0, #512
 25584 01b0 B047     		blx	r6
 25585 01b2 78B1     		cbz	r0, .L427
2042:sdcard.c      ****     SDIO_ClearITPendingBit(SDIO_IT_STBITERR);
 25586              		.loc 1 2042 0
 25587 01b4 4FF40070 		mov	r0, #512
 25588 01b8 144B     		ldr	r3, .L433+48
 25589 01ba 9847     		blx	r3
2043:sdcard.c      ****     SDIO_ITConfig(SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_DATAEND |
 25590              		.loc 1 2043 0
 25591 01bc 4CF23A30 		movw	r0, #49978
 25592 01c0 2146     		mov	r1, r4
 25593 01c2 134A     		ldr	r2, .L433+52
 25594 01c4 9047     		blx	r2
2046:sdcard.c      ****     NumberOfBytes = 0;
 25595              		.loc 1 2046 0
 25596 01c6 0A48     		ldr	r0, .L433+20
 25597 01c8 0460     		str	r4, [r0, #0]
2047:sdcard.c      ****     TransferError = SD_START_BIT_ERR;
 25598              		.loc 1 2047 0
 25599 01ca 0720     		movs	r0, #7
 25600              	.L432:
 25601 01cc 0D49     		ldr	r1, .L433+40
 25602 01ce 0870     		strb	r0, [r1, #0]
2048:sdcard.c      ****     return(SD_START_BIT_ERR);
 25603              		.loc 1 2048 0
 25604 01d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25605              	.L427:
2051:sdcard.c      ****   return(SD_OK);
 25606              		.loc 1 2051 0
 25607 01d4 2A20     		movs	r0, #42
2052:sdcard.c      **** }
 25608              		.loc 1 2052 0
 25609 01d6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25610              	.L434:
 25611 01da 00BF     		.align	2
 25612              	.L433:
 25613 01dc 00000000 		.word	.LANCHOR4
 25614 01e0 00000000 		.word	SDIO_GetITStatus
 25615 01e4 00000000 		.word	DestBuffer
 25616 01e8 00000000 		.word	SDIO_ReadData
 25617 01ec 00000000 		.word	.LANCHOR7
 25618 01f0 00000000 		.word	.LANCHOR9
 25619 01f4 00000000 		.word	SrcBuffer
 25620 01f8 00000000 		.word	SDIO_WriteData
 25621 01fc 00000000 		.word	SDIO_GetFlagStatus
 25622 0200 00000000 		.word	.LANCHOR8
 25623 0204 00000000 		.word	.LANCHOR5
 25624 0208 00000000 		.word	SD_StopTransfer
 25625 020c 00000000 		.word	SDIO_ClearITPendingBit
 25626 0210 00000000 		.word	SDIO_ITConfig
 25627 0214 00000000 		.word	.LANCHOR6
 25628              		.cfi_endproc
 25629              	.LFE46:
 25631              		.comm	SDIO_DataInitStructure,24,4
 25632              		.comm	SDIO_CmdInitStructure,20,4
 25633              		.comm	SDIO_InitStructure,24,4
 25634              		.global	NumberOfBytes
 25635              		.global	TransferEnd
 25636              		.global	TransferError
 25637              		.comm	DestBuffer,4,4
 25638              		.comm	SrcBuffer,4,4
 25639              		.section	.bss.CSD_Tab,"aw",%nobits
 25640              		.align	2
 25641              		.set	.LANCHOR3,. + 0
 25644              	CSD_Tab:
 25645 0000 00000000 		.space	16
 25645      00000000 
 25645      00000000 
 25645      00000000 
 25646              		.section	.bss.NumberOfBytes,"aw",%nobits
 25647              		.align	2
 25648              		.set	.LANCHOR9,. + 0
 25651              	NumberOfBytes:
 25652 0000 00000000 		.space	4
 25653              		.section	.bss.CardType,"aw",%nobits
 25654              		.align	2
 25655              		.set	.LANCHOR1,. + 0
 25658              	CardType:
 25659 0000 00000000 		.space	4
 25660              		.section	.bss.CID_Tab,"aw",%nobits
 25661              		.align	2
 25662              		.set	.LANCHOR2,. + 0
 25665              	CID_Tab:
 25666 0000 00000000 		.space	16
 25666      00000000 
 25666      00000000 
 25666      00000000 
 25667              		.section	.bss.RCA,"aw",%nobits
 25668              		.align	2
 25669              		.set	.LANCHOR0,. + 0
 25672              	RCA:
 25673 0000 00000000 		.space	4
 25674              		.section	.data.TransferError,"aw",%progbits
 25675              		.set	.LANCHOR5,. + 0
 25678              	TransferError:
 25679 0000 2A       		.byte	42
 25680              		.section	.bss.TotalNumberOfBytes,"aw",%nobits
 25681              		.align	2
 25682              		.set	.LANCHOR7,. + 0
 25685              	TotalNumberOfBytes:
 25686 0000 00000000 		.space	4
 25687              		.section	.bss.TransferEnd,"aw",%nobits
 25688              		.align	2
 25689              		.set	.LANCHOR6,. + 0
 25692              	TransferEnd:
 25693 0000 00000000 		.space	4
 25694              		.section	.data.DeviceMode,"aw",%progbits
 25695              		.align	2
 25696              		.set	.LANCHOR4,. + 0
 25699              	DeviceMode:
 25700 0000 02000000 		.word	2
 25701              		.section	.bss.StopCondition,"aw",%nobits
 25702              		.align	2
 25703              		.set	.LANCHOR8,. + 0
 25706              	StopCondition:
 25707 0000 00000000 		.space	4
 25708              		.text
 25709              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 sdcard.c
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19503  .text.CmdResp2Error:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19507  .text.CmdResp2Error:00000000 CmdResp2Error
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19565  .text.CmdResp2Error:00000034 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19571  .text.IsCardProgramming:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19575  .text.IsCardProgramming:00000000 IsCardProgramming
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19847  .text.IsCardProgramming:0000013c $d
                            *COM*:00000014 SDIO_CmdInitStructure
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19859  .text.DMA_TxConfiguration:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19863  .text.DMA_TxConfiguration:00000000 DMA_TxConfiguration
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19952  .text.DMA_TxConfiguration:00000058 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19962  .text.DMA_RxConfiguration:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:19966  .text.DMA_RxConfiguration:00000000 DMA_RxConfiguration
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20053  .text.DMA_RxConfiguration:00000054 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20063  .text.CmdResp1Error:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20067  .text.CmdResp1Error:00000000 CmdResp1Error
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20328  .text.CmdResp1Error:000000f0 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20337  .text.SDEnWideBus:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20341  .text.SDEnWideBus:00000000 SDEnWideBus
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20707  .text.SDEnWideBus:000001c0 $d
                            *COM*:00000018 SDIO_DataInitStructure
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20723  .text.SD_PowerON:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:20728  .text.SD_PowerON:00000000 SD_PowerON
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21138  .text.SD_PowerON:000001c4 $d
                            *COM*:00000018 SDIO_InitStructure
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21154  .text.SD_PowerOFF:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21159  .text.SD_PowerOFF:00000000 SD_PowerOFF
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21181  .text.SD_PowerOFF:0000000c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21186  .text.SD_InitializeCards:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21191  .text.SD_InitializeCards:00000000 SD_InitializeCards
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21471  .text.SD_InitializeCards:0000013c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21487  .text.SD_Init:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21492  .text.SD_Init:00000000 SD_Init
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21600  .text.SD_Init:00000074 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21614  .text.SD_GetCardInfo:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:21619  .text.SD_GetCardInfo:00000000 SD_GetCardInfo
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22069  .text.SD_GetCardInfo:00000284 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22077  .text.SD_EnableWideBusOperation:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22082  .text.SD_EnableWideBusOperation:00000000 SD_EnableWideBusOperation
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22192  .text.SD_EnableWideBusOperation:00000064 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22200  .text.SD_SetDeviceMode:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22205  .text.SD_SetDeviceMode:00000000 SD_SetDeviceMode
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22233  .text.SD_SetDeviceMode:00000010 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22238  .text.SD_SelectDeselect:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22243  .text.SD_SelectDeselect:00000000 SD_SelectDeselect
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22292  .text.SD_SelectDeselect:00000028 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22299  .text.SD_ReadBlock:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22304  .text.SD_ReadBlock:00000000 SD_ReadBlock
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22712  .text.SD_ReadBlock:00000210 $d
                            *COM*:00000004 DestBuffer
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22739  .text.SD_ReadMultiBlocks:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:22744  .text.SD_ReadMultiBlocks:00000000 SD_ReadMultiBlocks
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23219  .text.SD_ReadMultiBlocks:00000278 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23245  .text.SD_ReadMultiBlocks:000002d4 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23255  .text.SD_WriteBlock:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23260  .text.SD_WriteBlock:00000000 SD_WriteBlock
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23749  .text.SD_WriteBlock:00000274 $d
                            *COM*:00000004 SrcBuffer
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23772  .text.SD_WriteBlock:000002c8 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23864  .text.SD_WriteBlock:00000344 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23877  .text.SD_WriteMultiBlocks:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:23882  .text.SD_WriteMultiBlocks:00000000 SD_WriteMultiBlocks
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24395  .text.SD_WriteMultiBlocks:00000290 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24418  .text.SD_WriteMultiBlocks:000002e0 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24532  .text.SD_WriteMultiBlocks:0000037c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24545  .text.SD_GetTransferState:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24550  .text.SD_GetTransferState:00000000 SD_GetTransferState
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24571  .text.SD_GetTransferState:00000010 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24576  .text.SD_StopTransfer:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24581  .text.SD_StopTransfer:00000000 SD_StopTransfer
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24624  .text.SD_StopTransfer:00000024 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24631  .text.SD_Erase:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24636  .text.SD_Erase:00000000 SD_Erase
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24853  .text.SD_Erase:000000ec $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24866  .text.SD_SendStatus:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24871  .text.SD_SendStatus:00000000 SD_SendStatus
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24944  .text.SD_SendStatus:00000040 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24953  .text.SD_SendSDStatus:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:24958  .text.SD_SendSDStatus:00000000 SD_SendSDStatus
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25238  .text.SD_SendSDStatus:00000150 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25254  .text.SD_ProcessIRQSrc:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25259  .text.SD_ProcessIRQSrc:00000000 SD_ProcessIRQSrc
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25613  .text.SD_ProcessIRQSrc:000001dc $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25651  .bss.NumberOfBytes:00000000 NumberOfBytes
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25692  .bss.TransferEnd:00000000 TransferEnd
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25678  .data.TransferError:00000000 TransferError
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25640  .bss.CSD_Tab:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25644  .bss.CSD_Tab:00000000 CSD_Tab
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25647  .bss.NumberOfBytes:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25654  .bss.CardType:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25658  .bss.CardType:00000000 CardType
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25661  .bss.CID_Tab:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25665  .bss.CID_Tab:00000000 CID_Tab
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25668  .bss.RCA:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25672  .bss.RCA:00000000 RCA
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25681  .bss.TotalNumberOfBytes:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25685  .bss.TotalNumberOfBytes:00000000 TotalNumberOfBytes
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25688  .bss.TransferEnd:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25695  .data.DeviceMode:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25699  .data.DeviceMode:00000000 DeviceMode
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25702  .bss.StopCondition:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\cc5UQY3i.s:25706  .bss.StopCondition:00000000 StopCondition
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SDIO_ClearFlag
SDIO_SendCommand
SDIO_GetCommandResponse
SDIO_GetResponse
DMA_ClearFlag
DMA_Cmd
DMA_Init
SDIO_DataConfig
SDIO_GetFlagStatus
SDIO_ReadData
SDIO_Init
SDIO_SetPowerState
SDIO_ClockCmd
SDIO_GetPowerState
RCC_APB2PeriphClockCmd
GPIO_Init
RCC_AHBPeriphClockCmd
SDIO_DeInit
SDIO_DMACmd
SDIO_ITConfig
DMA_GetFlagStatus
SDIO_WriteData
SDIO_GetITStatus
SDIO_ClearITPendingBit
