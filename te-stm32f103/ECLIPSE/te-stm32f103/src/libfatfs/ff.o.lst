   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"ff.c"
  23              	.Ltext0:
 1165              		.align	1
 1166              		.thumb
 1167              		.thumb_func
 1169              	mem_cpy:
 1170              	.LFB0:
   1:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*----------------------------------------------------------------------------/
   2:../../../SDK_embedded/libs/fatfs/src/ff.c **** /  FatFs - FAT file system module  R0.08a                 (C)ChaN, 2010
   3:../../../SDK_embedded/libs/fatfs/src/ff.c **** /-----------------------------------------------------------------------------/
   4:../../../SDK_embedded/libs/fatfs/src/ff.c **** / FatFs module is a generic FAT file system module for small embedded systems.
   5:../../../SDK_embedded/libs/fatfs/src/ff.c **** / This is a free software that opened for education, research and commercial
   6:../../../SDK_embedded/libs/fatfs/src/ff.c **** / developments under license policy of following terms.
   7:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
   8:../../../SDK_embedded/libs/fatfs/src/ff.c **** /  Copyright (C) 2010, ChaN, all right reserved.
   9:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  10:../../../SDK_embedded/libs/fatfs/src/ff.c **** / * The FatFs module is a free software and there is NO WARRANTY.
  11:../../../SDK_embedded/libs/fatfs/src/ff.c **** / * No restriction on use. You can use, modify and redistribute it for
  12:../../../SDK_embedded/libs/fatfs/src/ff.c **** /   personal, non-profit or commercial products UNDER YOUR RESPONSIBILITY.
  13:../../../SDK_embedded/libs/fatfs/src/ff.c **** / * Redistributions of source code must retain the above copyright notice.
  14:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  15:../../../SDK_embedded/libs/fatfs/src/ff.c **** /-----------------------------------------------------------------------------/
  16:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Feb 26,'06 R0.00  Prototype.
  17:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  18:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Apr 29,'06 R0.01  First stable version.
  19:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  20:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Jun 01,'06 R0.02  Added FAT12 support.
  21:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Removed unbuffered mode.
  22:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed a problem on small (<32M) partition.
  23:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Jun 10,'06 R0.02a Added a configuration option (_FS_MINIMUM).
  24:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  25:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Sep 22,'06 R0.03  Added f_rename().
  26:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed option _FS_MINIMUM to _FS_MINIMIZE.
  27:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Dec 11,'06 R0.03a Improved cluster scan algorithm to write files fast.
  28:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed f_mkdir() creates incorrect directory on FAT32.
  29:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  30:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Feb 04,'07 R0.04  Supported multiple drive system.
  31:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed some interfaces for multiple drive system.
  32:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed f_mountdrv() to f_mount().
  33:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added f_mkfs().
  34:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Apr 01,'07 R0.04a Supported multiple partitions on a physical drive.
  35:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added a capability of extending file size to f_lseek().
  36:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added minimization level 3.
  37:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed an endian sensitive code in f_mkfs().
  38:../../../SDK_embedded/libs/fatfs/src/ff.c **** / May 05,'07 R0.04b Added a configuration option _USE_NTFLAG.
  39:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added FSInfo support.
  40:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed DBCS name can result FR_INVALID_NAME.
  41:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed short seek (<= csize) collapses the file object.
  42:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  43:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Aug 25,'07 R0.05  Changed arguments of f_read(), f_write() and f_mkfs().
  44:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed f_mkfs() on FAT32 creates incorrect FSInfo.
  45:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed f_mkdir() on FAT32 creates incorrect directory.
  46:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Feb 03,'08 R0.05a Added f_truncate() and f_utime().
  47:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed off by one error at FAT sub-type determination.
  48:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed btr in f_read() can be mistruncated.
  49:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed cached sector is not flushed when create and close without write.
  50:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  51:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Apr 01,'08 R0.06  Added fputc(), fputs(), fprintf() and fgets().
  52:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Improved performance of f_lseek() on moving to the same or following cluster.
  53:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  54:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Apr 01,'09 R0.07  Merged Tiny-FatFs as a buffer configuration option. (_FS_TINY)
  55:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added long file name support.
  56:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added multiple code page support.
  57:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added re-entrancy for multitask operation.
  58:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added auto cluster size selection to f_mkfs().
  59:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added rewind option to f_readdir().
  60:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed result code of critical errors.
  61:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Renamed string functions to avoid name collision.
  62:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Apr 14,'09 R0.07a Separated out OS dependent code on reentrant cfg.
  63:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added multiple sector size support.
  64:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Jun 21,'09 R0.07c Fixed f_unlink() can return FR_OK on error.
  65:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed wrong cache control in f_lseek().
  66:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added relative path feature.
  67:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added f_chdir() and f_chdrive().
  68:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added proper case conversion to extended char.
  69:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Nov 03,'09 R0.07e Separated out configuration options from ff.h to ffconf.h.
  70:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed f_unlink() fails to remove a sub-dir on _FS_RPATH.
  71:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed name matching error on the 13 char boundary.
  72:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added a configuration option, _LFN_UNICODE.
  73:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed f_readdir() to return the SFN with always upper case on non-LFN cfg.
  74:../../../SDK_embedded/libs/fatfs/src/ff.c **** /
  75:../../../SDK_embedded/libs/fatfs/src/ff.c **** / May 15,'10 R0.08  Added a memory configuration option. (_USE_LFN = 3)
  76:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added file lock feature. (_FS_SHARE)
  77:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added fast seek feature. (_USE_FASTSEEK)
  78:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed some types on the API, XCHAR->TCHAR.
  79:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Changed fname member in the FILINFO structure on Unicode cfg.
  80:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   String functions support UTF-8 encoding files on Unicode cfg.
  81:../../../SDK_embedded/libs/fatfs/src/ff.c **** / Aug 16,'10 R0.08a Added f_getcwd(). (_FS_RPATH = 2)
  82:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Added sector erase feature. (_USE_ERASE)
  83:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Moved file lock semaphore table from fs object to the bss.
  84:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed a wrong directory entry is created on non-LFN cfg when the given name con
  85:../../../SDK_embedded/libs/fatfs/src/ff.c **** /                   Fixed f_mkfs() creates wrong FAT32 volume.
  86:../../../SDK_embedded/libs/fatfs/src/ff.c **** /---------------------------------------------------------------------------*/
  87:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
  88:../../../SDK_embedded/libs/fatfs/src/ff.c **** #include "ff.h"			/* FatFs configurations and declarations */
  89:../../../SDK_embedded/libs/fatfs/src/ff.c **** #include "diskio.h"		/* Declarations of low level disk I/O functions */
  90:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
  91:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
  92:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*--------------------------------------------------------------------------
  93:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
  94:../../../SDK_embedded/libs/fatfs/src/ff.c ****    Module Private Definitions
  95:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
  96:../../../SDK_embedded/libs/fatfs/src/ff.c **** ---------------------------------------------------------------------------*/
  97:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
  98:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FATFS != 8255
  99:../../../SDK_embedded/libs/fatfs/src/ff.c **** #error Wrong include file (ff.h).
 100:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 101:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 102:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 103:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Definitions on sector size */
 104:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _MAX_SS != 512 && _MAX_SS != 1024 && _MAX_SS != 2048 && _MAX_SS != 4096
 105:../../../SDK_embedded/libs/fatfs/src/ff.c **** #error Wrong sector size.
 106:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 107:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _MAX_SS != 512
 108:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	SS(fs)	((fs)->ssize)	/* Multiple sector size */
 109:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
 110:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	SS(fs)	512U			/* Fixed sector size */
 111:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 112:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 113:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 114:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Reentrancy related */
 115:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_REENTRANT
 116:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN == 1
 117:../../../SDK_embedded/libs/fatfs/src/ff.c **** #error Static LFN work area must not be used in re-entrant configuration.
 118:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 119:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	ENTER_FF(fs)		{ if (!lock_fs(fs)) return FR_TIMEOUT; }
 120:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 121:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
 122:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	ENTER_FF(fs)
 123:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define LEAVE_FF(fs, res)	return res
 124:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 125:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 126:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	ABORT(fs, res)		{ fp->flag |= FA__ERROR; LEAVE_FF(fs, res); }
 127:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 128:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 129:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* File shareing feature */
 130:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
 131:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_READONLY
 132:../../../SDK_embedded/libs/fatfs/src/ff.c **** #error _FS_SHARE must be 0 on read-only cfg.
 133:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 134:../../../SDK_embedded/libs/fatfs/src/ff.c **** typedef struct {
 135:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs;				/* File ID 1, volume (NULL:blank entry) */
 136:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clu;				/* File ID 2, directory */
 137:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD idx;				/* File ID 3, directory index */
 138:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD ctr;				/* File open counter, 0:none, 0x01..0xFF:read open count, 0x100:write mode */
 139:../../../SDK_embedded/libs/fatfs/src/ff.c **** } FILESEM;
 140:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 141:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 142:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 143:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Misc definitions */
 144:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define LD_CLUST(dir)	(((DWORD)LD_WORD(dir+DIR_FstClusHI)<<16) | LD_WORD(dir+DIR_FstClusLO))
 145:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define ST_CLUST(dir,cl) {ST_WORD(dir+DIR_FstClusLO, cl); ST_WORD(dir+DIR_FstClusHI, (DWORD)cl>>16)
 146:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 147:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 148:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Character code support macros */
 149:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsUpper(c)	(((c)>='A')&&((c)<='Z'))
 150:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsLower(c)	(((c)>='a')&&((c)<='z'))
 151:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDigit(c)	(((c)>='0')&&((c)<='9'))
 152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 153:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _DF1S		/* Code page is DBCS */
 154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 155:../../../SDK_embedded/libs/fatfs/src/ff.c **** #ifdef _DF2S	/* Two 1st byte areas */
 156:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDBCS1(c)	(((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E) || ((BYTE)(c) >= _DF2S && (BYTE)(c) 
 157:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else			/* One 1st byte area */
 158:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDBCS1(c)	((BYTE)(c) >= _DF1S && (BYTE)(c) <= _DF1E)
 159:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 160:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 161:../../../SDK_embedded/libs/fatfs/src/ff.c **** #ifdef _DS3S	/* Three 2nd byte areas */
 162:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 163:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else			/* Two 2nd byte areas */
 164:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDBCS2(c)	(((BYTE)(c) >= _DS1S && (BYTE)(c) <= _DS1E) || ((BYTE)(c) >= _DS2S && (BYTE)(c) 
 165:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 166:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 167:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else			/* Code page is SBCS */
 168:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 169:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDBCS1(c)	0
 170:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define IsDBCS2(c)	0
 171:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 172:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* _DF1S */
 173:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 174:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 175:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Name status flags */
 176:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS			11		/* Offset of name status byte */
 177:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
 178:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
 179:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS_LAST		0x04	/* Last segment */
 180:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
 181:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
 182:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
 183:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 185:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* FAT sub-type boundaries */
 186:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Note that the FAT spec by Microsoft says 4085 but Windows works with 4087! */
 187:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define MIN_FAT16	4086	/* Minimum number of clusters for FAT16 */
 188:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	MIN_FAT32	65526	/* Minimum number of clusters for FAT32 */
 189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 190:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 191:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* FatFs refers the members in the FAT structures as byte array instead of
 192:../../../SDK_embedded/libs/fatfs/src/ff.c **** / structure member because there are incompatibility of the packing option
 193:../../../SDK_embedded/libs/fatfs/src/ff.c **** / between compilers. */
 194:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 195:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_jmpBoot			0
 196:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_OEMName			3
 197:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_BytsPerSec		11
 198:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_SecPerClus		13
 199:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_RsvdSecCnt		14
 200:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_NumFATs			16
 201:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_RootEntCnt		17
 202:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_TotSec16		19
 203:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_Media			21
 204:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_FATSz16			22
 205:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_SecPerTrk		24
 206:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_NumHeads		26
 207:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_HiddSec			28
 208:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_TotSec32		32
 209:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_DrvNum			36
 210:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_BootSig			38
 211:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_VolID			39
 212:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_VolLab			43
 213:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_FilSysType		54
 214:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_FATSz32			36
 215:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_ExtFlags		40
 216:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_FSVer			42
 217:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_RootClus		44
 218:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_FSInfo			48
 219:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BPB_BkBootSec		50
 220:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_DrvNum32			64
 221:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_BootSig32		66
 222:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_VolID32			67
 223:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_VolLab32			71
 224:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_FilSysType32		82
 225:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FSI_LeadSig			0
 226:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FSI_StrucSig		484
 227:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FSI_Free_Count		488
 228:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FSI_Nxt_Free		492
 229:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define MBR_Table			446
 230:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define BS_55AA				510
 231:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 232:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_Name			0
 233:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_Attr			11
 234:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_NTres			12
 235:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_CrtTime			14
 236:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_CrtDate			16
 237:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_FstClusHI		20
 238:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_WrtTime			22
 239:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_WrtDate			24
 240:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_FstClusLO		26
 241:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DIR_FileSize		28
 242:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	LDIR_Ord			0
 243:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	LDIR_Attr			11
 244:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	LDIR_Type			12
 245:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	LDIR_Chksum			13
 246:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	LDIR_FstClusLO		26
 247:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 248:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 249:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 250:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*------------------------------------------------------------*/
 251:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Work area                                                  */
 252:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 253:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _VOLUMES
 254:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 255:../../../SDK_embedded/libs/fatfs/src/ff.c **** FATFS *FatFs[_VOLUMES];	/* Pointer to the file system objects (logical drives) */
 256:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
 257:../../../SDK_embedded/libs/fatfs/src/ff.c **** #error Number of drives must not be 0.
 258:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 259:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 260:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 261:../../../SDK_embedded/libs/fatfs/src/ff.c **** WORD Fsid;				/* File system mount ID */
 262:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 263:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
 264:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 265:../../../SDK_embedded/libs/fatfs/src/ff.c **** BYTE CurrVol;			/* Current drive */
 266:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 267:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 268:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
 269:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 270:../../../SDK_embedded/libs/fatfs/src/ff.c **** FILESEM	Files[_FS_SHARE];	/* File lock semaphores */
 271:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 272:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 273:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN == 0			/* No LFN */
 274:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 275:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define INIT_BUF(dobj)		(dobj).fn = sfn
 276:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FREE_BUF()
 277:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 278:../../../SDK_embedded/libs/fatfs/src/ff.c **** #elif _USE_LFN == 1			/* LFN with static LFN working buffer */
 279:../../../SDK_embedded/libs/fatfs/src/ff.c **** static WCHAR LfnBuf[_MAX_LFN+1];
 280:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]
 281:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = LfnBuf; }
 282:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FREE_BUF()
 283:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 284:../../../SDK_embedded/libs/fatfs/src/ff.c **** #elif _USE_LFN == 2 		/* LFN with dynamic LFN working buffer on the stack */
 285:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR lbuf[_MAX_LFN+1]
 286:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define INIT_BUF(dobj)		{ (dobj).fn = sfn; (dobj).lfn = lbuf; }
 287:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FREE_BUF()
 288:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 289:../../../SDK_embedded/libs/fatfs/src/ff.c **** #elif _USE_LFN == 3 		/* LFN with dynamic LFN working buffer on the heap */
 290:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	DEF_NAMEBUF			BYTE sfn[12]; WCHAR *lfn
 291:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define INIT_BUF(dobj)		{ lfn = ff_memalloc((_MAX_LFN + 1) * 2); \
 292:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							  if (!lfn) LEAVE_FF((dobj).fs, FR_NOT_ENOUGH_CORE); \
 293:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							  (dobj).lfn = lfn;	(dobj).fn = sfn; }
 294:../../../SDK_embedded/libs/fatfs/src/ff.c **** #define	FREE_BUF()			ff_memfree(lfn)
 295:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 296:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
 297:../../../SDK_embedded/libs/fatfs/src/ff.c **** #error Wrong LFN configuration.
 298:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 299:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 300:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 301:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 302:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 303:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*--------------------------------------------------------------------------
 304:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 305:../../../SDK_embedded/libs/fatfs/src/ff.c ****    Module Private Functions
 306:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 307:../../../SDK_embedded/libs/fatfs/src/ff.c **** ---------------------------------------------------------------------------*/
 308:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 309:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 310:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 311:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* String functions                                                      */
 312:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 313:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 314:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Copy memory to memory */
 315:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 316:../../../SDK_embedded/libs/fatfs/src/ff.c **** void mem_cpy (void* dst, const void* src, UINT cnt) {
 1171              		.loc 1 316 0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 0
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 1175              	.LVL0:
 1176 0000 10B5     		push	{r4, lr}
 1177              	.LCFI0:
 1178              		.cfi_def_cfa_offset 8
 1179              		.cfi_offset 14, -4
 1180              		.cfi_offset 4, -8
 317:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 318:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 319:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 320:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _WORD_ACCESS == 1
 321:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt >= sizeof(int)) {
 322:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*(int*)d = *(int*)s;
 323:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		d += sizeof(int); s += sizeof(int);
 324:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cnt -= sizeof(int);
 325:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 326:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 327:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt--)
 1181              		.loc 1 327 0
 1182 0002 0023     		movs	r3, #0
 1183 0004 02E0     		b	.L2
 1184              	.LVL1:
 1185              	.L3:
 328:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*d++ = *s++;
 1186              		.loc 1 328 0
 1187 0006 CC5C     		ldrb	r4, [r1, r3]	@ zero_extendqisi2
 1188 0008 C454     		strb	r4, [r0, r3]
 1189 000a 0133     		adds	r3, r3, #1
 1190              	.L2:
 327:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt--)
 1191              		.loc 1 327 0 discriminator 1
 1192 000c 9342     		cmp	r3, r2
 1193 000e FAD1     		bne	.L3
 329:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1194              		.loc 1 329 0
 1195 0010 10BD     		pop	{r4, pc}
 1196              		.cfi_endproc
 1197              	.LFE0:
 1199              		.section	.text.mem_set,"ax",%progbits
 1200              		.align	1
 1201              		.thumb
 1202              		.thumb_func
 1204              	mem_set:
 1205              	.LFB1:
 330:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 331:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Fill memory */
 332:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 333:../../../SDK_embedded/libs/fatfs/src/ff.c **** void mem_set (void* dst, int val, UINT cnt) {
 1206              		.loc 1 333 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              		@ link register save eliminated.
 1211              	.LVL2:
 334:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *d = (BYTE*)dst;
 335:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 336:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt--)
 1212              		.loc 1 336 0
 1213 0000 0023     		movs	r3, #0
 1214 0002 01E0     		b	.L5
 1215              	.LVL3:
 1216              	.L6:
 337:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*d++ = (BYTE)val;
 1217              		.loc 1 337 0
 1218 0004 C154     		strb	r1, [r0, r3]
 1219 0006 0133     		adds	r3, r3, #1
 1220              	.L5:
 336:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt--)
 1221              		.loc 1 336 0 discriminator 1
 1222 0008 9342     		cmp	r3, r2
 1223 000a FBD1     		bne	.L6
 338:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1224              		.loc 1 338 0
 1225 000c 7047     		bx	lr
 1226              		.cfi_endproc
 1227              	.LFE1:
 1229              		.section	.text.get_fileinfo,"ax",%progbits
 1230              		.align	1
 1231              		.thumb
 1232              		.thumb_func
 1234              	get_fileinfo:
 1235              	.LFB18:
 339:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 340:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Compare memory to memory */
 341:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 342:../../../SDK_embedded/libs/fatfs/src/ff.c **** int mem_cmp (const void* dst, const void* src, UINT cnt) {
 343:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 344:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	int r = 0;
 345:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 346:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 347:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return r;
 348:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 349:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 350:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Check if chr is contained in the string */
 351:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 352:../../../SDK_embedded/libs/fatfs/src/ff.c **** int chk_chr (const char* str, int chr) {
 353:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (*str && *str != chr) str++;
 354:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return *str;
 355:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 356:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 357:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 358:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 359:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 360:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Request/Release grant to access the volume                            */
 361:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 362:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_REENTRANT
 363:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 364:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 365:../../../SDK_embedded/libs/fatfs/src/ff.c **** int lock_fs (
 366:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs		/* File system object */
 367:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 368:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 369:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return ff_req_grant(fs->sobj);
 370:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 371:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 372:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 373:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 374:../../../SDK_embedded/libs/fatfs/src/ff.c **** void unlock_fs (
 375:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,		/* File system object */
 376:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res		/* Result code to be returned */
 377:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 378:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 379:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_NOT_ENABLED &&
 380:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res != FR_INVALID_DRIVE &&
 381:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res != FR_INVALID_OBJECT &&
 382:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res != FR_TIMEOUT) {
 383:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ff_rel_grant(fs->sobj);
 384:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 385:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 386:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 387:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 388:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 389:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 390:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 391:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* File shareing control functions                                       */
 392:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 393:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
 394:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 395:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 396:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT chk_lock (	/* Check if the file can be accessed */
 397:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR* dj,		/* Directory object pointing the file to be checked */
 398:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	int acc			/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
 399:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 400:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 401:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, be;
 402:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 403:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Search file semaphore table */
 404:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (i = be = 0; i < _FS_SHARE; i++) {
 405:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 406:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (Files[i].fs == dj->fs &&	 	/* Check if the file matched with an open file */
 407:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				Files[i].clu == dj->sclust &&
 408:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				Files[i].idx == dj->index) break;
 409:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {			/* Blank entry */
 410:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			be++;
 411:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 412:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 413:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (i == _FS_SHARE)	/* The file is not opened */
 414:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new file?
 415:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 416:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* The file has been opened. Reject any open against writing file and all write mode open */
 417:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 418:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 419:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 420:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 421:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 422:../../../SDK_embedded/libs/fatfs/src/ff.c **** int enq_lock (	/* Check if an entry is available for a new file */
 423:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS* fs	/* File system object */
 424:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 425:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 426:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i;
 427:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 428:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 429:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return (i == _FS_SHARE) ? 0 : 1;
 430:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 431:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 432:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 433:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 434:../../../SDK_embedded/libs/fatfs/src/ff.c **** UINT inc_lock (	/* Increment file open counter and returns its index (0:int error) */
 435:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR* dj,	/* Directory object pointing the file to register or increment */
 436:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	int acc		/* Desired access mode (0:Read, !0:Write) */
 437:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 438:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 439:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i;
 440:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 441:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 442:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {	/* Find the file */
 443:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (Files[i].fs == dj->fs &&
 444:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			Files[i].clu == dj->sclust &&
 445:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			Files[i].idx == dj->index) break;
 446:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 447:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 448:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (i == _FS_SHARE) {				/* Not opened. Register it as new. */
 449:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (i = 0; i < _FS_SHARE && Files[i].fs; i++) ;
 450:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (i == _FS_SHARE) return 0;	/* No space to register (int err) */
 451:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		Files[i].fs = dj->fs;
 452:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		Files[i].clu = dj->sclust;
 453:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		Files[i].idx = dj->index;
 454:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		Files[i].ctr = 0;
 455:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 456:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 457:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 458:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 459:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 460:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 461:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return i + 1;
 462:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 463:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 464:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 465:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 466:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dec_lock (	/* Decrement file open counter */
 467:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i			/* Semaphore index */
 468:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 469:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 470:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD n;
 471:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
 472:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 473:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 474:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (--i < _FS_SHARE) {
 475:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		n = Files[i].ctr;
 476:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (n == 0x100) n = 0;
 477:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (n) n--;
 478:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		Files[i].ctr = n;
 479:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!n) Files[i].fs = 0;
 480:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_OK;
 481:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {
 482:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_INT_ERR;
 483:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 484:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
 485:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 486:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 487:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 488:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 489:../../../SDK_embedded/libs/fatfs/src/ff.c **** void clear_lock (	/* Clear lock entries of the volume */
 490:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs
 491:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 492:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 493:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i;
 494:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 495:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (i = 0; i < _FS_SHARE; i++) {
 496:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 497:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 498:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 499:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 500:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 501:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 502:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 503:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 504:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Change window offset                                                  */
 505:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 506:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 507:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 508:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT move_window (
 509:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,		/* File system object */
 510:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD sector	/* Sector number to make appearance in the fs->win[] */
 511:../../../SDK_embedded/libs/fatfs/src/ff.c **** )					/* Move to zero only writes back dirty window */
 512:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 513:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD wsect;
 514:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 515:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 516:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	wsect = fs->winsect;
 517:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 518:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
 519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 520:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 521:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_DISK_ERR;
 522:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->wflag = 0;
 523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 524:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				BYTE nf;
 525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					wsect += fs->fsize;
 527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 528:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
 529:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
 530:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 531:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 532:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (sector) {
 533:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 534:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_DISK_ERR;
 535:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->winsect = sector;
 536:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 537:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 538:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 539:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 540:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 541:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 542:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 543:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 544:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 545:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 546:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Clean-up cached data                                                  */
 547:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 548:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
 549:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 550:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT sync (	/* FR_OK: successful, FR_DISK_ERR: failed */
 551:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs	/* File system object */
 552:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 553:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 554:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
 555:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 556:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 557:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = move_window(fs, 0);
 558:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 559:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		/* Update FSInfo sector if needed */
 560:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 561:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->winsect = 0;
 562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_set(fs->win, 0, 512);
 563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 568:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 569:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->fsi_flag = 0;
 570:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 571:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		/* Make sure that no pending write process in the physical drive */
 572:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 573:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_DISK_ERR;
 574:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 575:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 576:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
 577:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 578:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 579:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 580:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 581:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 582:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 583:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 584:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Get sector# from cluster#                                             */
 585:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 586:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 587:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 588:../../../SDK_embedded/libs/fatfs/src/ff.c **** DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
 589:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,		/* File system object */
 590:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
 591:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 592:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 593:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	clst -= 2;
 594:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 595:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return clst * fs->csize + fs->database;
 596:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 597:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 598:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 599:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 600:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 601:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 602:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* FAT access - Read value of a FAT entry                                */
 603:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 604:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 605:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 606:../../../SDK_embedded/libs/fatfs/src/ff.c **** DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, Else:Cluster status */
 607:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,	/* File system object */
 608:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst	/* Cluster# to get the link information */
 609:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 610:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 611:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT wc, bc;
 612:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *p;
 613:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 614:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 615:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 616:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 1;
 617:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 618:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	switch (fs->fs_type) {
 619:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	case FS_FAT12 :
 620:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 621:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 622:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 623:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 624:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 626:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 627:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	case FS_FAT16 :
 628:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 629:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 630:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return LD_WORD(p);
 631:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 632:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	case FS_FAT32 :
 633:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 634:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 635:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 636:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 637:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 638:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 639:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 641:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 642:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 643:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 644:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 645:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* FAT access - Change value of a FAT entry                              */
 646:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 647:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
 648:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 649:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT put_fat (
 650:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,	/* File system object */
 651:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst,	/* Cluster# to be changed in range of 2 to fs->n_fatent - 1 */
 652:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD val	/* New value to mark the cluster */
 653:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 654:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 655:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT bc;
 656:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *p;
 657:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
 658:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 659:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 661:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_INT_ERR;
 662:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 663:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {
 664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		switch (fs->fs_type) {
 665:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		case FS_FAT12 :
 666:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bc = clst; bc += bc / 2;
 667:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 668:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 669:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 671:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bc++;
 672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->wflag = 1;
 673:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 674:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 675:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 676:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 677:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			break;
 678:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 679:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		case FS_FAT16 :
 680:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 681:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 682:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 683:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_WORD(p, (WORD)val);
 684:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			break;
 685:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 686:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		case FS_FAT32 :
 687:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 689:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 690:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 691:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(p, val);
 692:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			break;
 693:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 694:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		default :
 695:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INT_ERR;
 696:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 697:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->wflag = 1;
 698:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 699:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 700:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
 701:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 702:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* !_FS_READONLY */
 703:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 704:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 705:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 706:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 707:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 708:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
 709:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 710:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
 711:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 712:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT remove_chain (
 713:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,			/* File system object */
 714:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst			/* Cluster# to remove a chain from */
 715:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 716:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 717:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
 718:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD nxt;
 719:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_ERASE
 720:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD scl = clst, ecl = clst, resion[2];
 721:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 722:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 724:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_INT_ERR;
 725:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 726:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {
 727:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_OK;
 728:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 729:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 730:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 731:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 732:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 733:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 734:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 735:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 736:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust++;
 737:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->fsi_flag = 1;
 738:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
 739:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_ERASE
 740:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ecl + 1 == nxt) {	/* Next cluster is contiguous */
 741:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ecl = nxt;
 742:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {				/* End of contiguous clusters */ 
 743:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				resion[0] = clust2sect(fs, scl);					/* Start sector */
 744:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				resion[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
 745:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				disk_ioctl(fs->drv, CTRL_ERASE_SECTOR, resion);		/* Erase the block */
 746:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				scl = ecl = nxt;
 747:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
 748:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 749:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			clst = nxt;	/* Next cluster */
 750:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 751:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 752:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 753:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
 754:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 755:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 756:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 757:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 758:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 759:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 760:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 761:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* FAT handling - Stretch or Create a cluster chain                      */
 762:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 763:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
 764:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 765:../../../SDK_embedded/libs/fatfs/src/ff.c **** DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster
 766:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,			/* File system object */
 767:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
 768:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 769:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 770:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD cs, ncl, scl;
 771:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
 772:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 773:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 774:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 775:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 777:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 778:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	else {					/* Stretch the current chain */
 779:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 781:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 782:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		scl = clst;
 783:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 784:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 785:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	ncl = scl;				/* Start cluster */
 786:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (;;) {
 787:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ncl++;							/* Next cluster */
 788:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 789:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ncl = 2;
 790:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 791:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 792:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 793:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 794:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 795:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return cs;
 796:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 797:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 798:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 799:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK && clst != 0) {
 801:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 802:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 803:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 804:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 806:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->free_clust--;
 807:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->fsi_flag = 1;
 808:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 809:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {
 810:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 811:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 812:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 813:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return ncl;		/* Return new cluster number or error code */
 814:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 815:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* !_FS_READONLY */
 816:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 817:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 818:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 819:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 820:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 821:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Directory handling - Set directory index                              */
 822:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 823:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 824:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 825:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dir_sdi (
 826:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 827:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD idx		/* Directory index number */
 828:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 829:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 830:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst;
 831:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD ic;
 832:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 833:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 834:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->index = idx;
 835:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	clst = dj->sclust;
 836:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 837:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INT_ERR;
 838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 839:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		clst = dj->fs->dirbase;
 840:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 841:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 842:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->clust = clst;
 843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 844:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return FR_INT_ERR;
 845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 846:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 847:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	else {				/* Dynamic table (sub-dirs or root-dir in FAT32) */
 848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 849:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 853:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_INT_ERR;
 854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			idx -= ic;
 855:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 856:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->clust = clst;
 857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 859:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 861:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 862:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;	/* Seek succeeded */
 863:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 864:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 865:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 866:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 867:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 868:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 869:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Directory handling - Move directory index next                        */
 870:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 871:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 872:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 873:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:EOT and could not stretch
 874:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,		/* Pointer to directory object */
 875:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
 876:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 877:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 878:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst;
 879:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD i;
 880:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 881:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = dj->index + 1;
 883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 884:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NO_FILE;
 885:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 886:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect++;					/* Next sector */
 888:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 889:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 890:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 891:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_NO_FILE;
 892:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 893:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		else {					/* Dynamic table */
 894:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 895:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 896:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 897:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 898:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 899:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
 900:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					BYTE c;
 901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					/* Clean-up stretched table */
 907:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 908:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 909:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->wflag = 1;
 912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->winsect++;
 914:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
 915:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 916:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
 917:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					return FR_NO_FILE;			/* Report EOT */
 918:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
 919:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
 920:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 921:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 922:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
 923:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 924:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
 925:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 926:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->index = i;
 927:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 928:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 929:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 930:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 931:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 932:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 933:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 934:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 935:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 936:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* LFN handling - Test/Pick/Fit an LFN segment from/to directory entry   */
 937:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
 938:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
 939:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 940:../../../SDK_embedded/libs/fatfs/src/ff.c **** const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* Offset of LFN chars in the directory 
 941:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 942:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 943:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 944:../../../SDK_embedded/libs/fatfs/src/ff.c **** int cmp_lfn (			/* 1:Matched, 0:Not matched */
 945:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the LFN to be compared */
 946:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir			/* Pointer to the directory entry containing a part of LFN */
 947:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 948:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 949:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, s;
 950:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR wc, uc;
 951:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 952:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 953:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0xBF) - 1) * 13;	/* Get offset in the LFN buffer */
 954:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	s = 0; wc = 1;
 955:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
 956:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);	/* Pick an LFN character from the entry */
 957:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (wc) {	/* Last char has not been processed */
 958:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 959:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 960:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return 0;				/* Not matched */
 961:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
 962:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (uc != 0xFFFF) return 0;	/* Check filler */
 963:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 964:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (++s < 13);				/* Repeat until all chars in the entry are checked */
 965:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 966:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((dir[LDIR_Ord] & 0x40) && wc && lfnbuf[i])	/* Last segment matched but different length */
 967:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 0;
 968:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 969:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return 1;						/* The part of LFN matched */
 970:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 971:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 972:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 973:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 974:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
 975:../../../SDK_embedded/libs/fatfs/src/ff.c **** int pick_lfn (			/* 1:Succeeded, 0:Buffer overflow */
 976:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR *lfnbuf,		/* Pointer to the Unicode-LFN buffer */
 977:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir			/* Pointer to the directory entry */
 978:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
 979:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 980:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, s;
 981:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR wc, uc;
 982:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 983:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 984:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 985:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 986:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	s = 0; wc = 1;
 987:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
 988:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		uc = LD_WORD(dir+LfnOfs[s]);		/* Pick an LFN character from the entry */
 989:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (wc) {	/* Last char has not been processed */
 990:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 991:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
 992:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
 993:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
 994:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
 995:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (++s < 13);						/* Read all character in the entry */
 996:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
 997:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (dir[LDIR_Ord] & 0x40) {				/* Put terminator if it is the last LFN part */
 998:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 999:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		lfnbuf[i] = 0;
1000:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1001:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1002:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return 1;
1003:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1004:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1005:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1006:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
1007:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1008:../../../SDK_embedded/libs/fatfs/src/ff.c **** void fit_lfn (
1009:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const WCHAR *lfnbuf,	/* Pointer to the LFN buffer */
1010:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir,				/* Pointer to the directory entry */
1011:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE ord,				/* LFN order (1-20) */
1012:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE sum				/* SFN sum */
1013:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1014:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1015:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, s;
1016:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR wc;
1017:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1018:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1019:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set check sum */
1020:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1021:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dir[LDIR_Type] = 0;
1022:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	ST_WORD(dir+LDIR_FstClusLO, 0);
1023:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1024:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
1025:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	s = wc = 0;
1026:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
1027:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective char */
1028:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
1029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!wc) wc = 0xFFFF;		/* Padding chars following last char */
1030:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (++s < 13);
1031:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (wc == 0xFFFF || !lfnbuf[i]) ord |= 0x40;	/* Bottom LFN part is the start of LFN sequence */
1032:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
1033:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1034:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1035:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1036:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1037:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1038:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1039:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1040:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1041:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Create numbered name                                                  */
1042:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1043:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1044:../../../SDK_embedded/libs/fatfs/src/ff.c **** void gen_numname (
1045:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dst,			/* Pointer to generated SFN */
1046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const BYTE *src,	/* Pointer to source SFN to be modified */
1047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const WCHAR *lfn,	/* Pointer to LFN */
1048:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD seq			/* Sequence number */
1049:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1050:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1051:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE ns[8], c;
1052:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, j;
1053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1054:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1055:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mem_cpy(dst, src, 11);
1056:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1057:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
1058:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		do seq = (seq >> 1) + (seq << 15) + (WORD)*lfn++; while (*lfn);
1059:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1060:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1061:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* itoa */
1062:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = 7;
1063:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
1064:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = (seq % 16) + '0';
1065:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c > '9') c += 7;
1066:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ns[i--] = c;
1067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		seq /= 16;
1068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (seq);
1069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	ns[i] = '~';
1070:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1071:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Append the number */
1072:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
1073:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (IsDBCS1(dst[j])) {
1074:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (j == i - 1) break;
1075:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			j++;
1076:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1077:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1078:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
1079:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
1080:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (j < 8);
1081:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1082:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1083:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1084:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1085:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1086:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1087:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1088:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Calculate sum of an SFN                                               */
1089:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1090:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1091:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1092:../../../SDK_embedded/libs/fatfs/src/ff.c **** BYTE sum_sfn (
1093:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const BYTE *dir		/* Ptr to directory entry */
1094:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1095:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1096:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE sum = 0;
1097:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT n = 11;
1098:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1099:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
1100:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return sum;
1101:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1102:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1103:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1104:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1105:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1106:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1107:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1108:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Directory handling - Find an object in the directory                  */
1109:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1110:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1111:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1112:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dir_find (
1113:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj			/* Pointer to the directory object linked to the file name */
1114:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1115:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1116:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
1117:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE c, *dir;
1118:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1119:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE a, ord, sum;
1120:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1121:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1122:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
1123:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) return res;
1124:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1125:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1126:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	ord = sum = 0xFF;
1127:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1128:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
1129:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1130:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
1131:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1132:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = dir[DIR_Name];
1133:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1134:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1135:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1136:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0xE5 || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
1137:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ord = 0xFF;
1138:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
1139:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1140:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj->lfn) {
1141:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (c & 0x40) {		/* Is it start of LFN sequence? */
1142:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						sum = dir[LDIR_Chksum];
1143:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						c &= 0xBF; ord = c;	/* LFN start order */
1144:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->lfn_idx = dj->index;
1145:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
1146:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
1147:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1148:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
1149:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {					/* An SFN entry is found */
1150:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
1151:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ord = 0xFF; dj->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
1152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (!(dj->fn[NS] & NS_LOSS) && !mem_cmp(dir, dj->fn, 11)) break;	/* SFN matched? */
1153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1155:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else		/* Non LFN configuration */
1156:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
1157:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			break;
1158:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1159:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
1160:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (res == FR_OK);
1161:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1162:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
1163:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1164:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1165:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1166:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1167:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1168:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1169:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Read an object from the directory                                     */
1170:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1171:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_MINIMIZE <= 1
1172:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1173:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dir_read (
1174:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj			/* Pointer to the directory object that pointing the entry to be read */
1175:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1176:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1177:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
1178:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE c, *dir;
1179:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1180:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE a, ord = 0xFF, sum = 0xFF;
1181:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1182:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1183:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = FR_NO_FILE;
1184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (dj->sect) {
1185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1186:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
1187:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
1188:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = dir[DIR_Name];
1189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
1190:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1191:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		a = dir[DIR_Attr] & AM_MASK;
1192:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0xE5 || (!_FS_RPATH && c == '.') || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without
1193:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ord = 0xFF;
1194:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
1195:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
1196:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (c & 0x40) {			/* Is it start of LFN sequence? */
1197:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					sum = dir[LDIR_Chksum];
1198:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					c &= 0xBF; ord = c;
1199:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->lfn_idx = dj->index;
1200:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
1201:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				/* Check LFN validity and capture it */
1202:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ord = (c == ord && sum == dir[LDIR_Chksum] && pick_lfn(dj->lfn, dir)) ? ord - 1 : 0xFF;
1203:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {					/* An SFN entry is found */
1204:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ord || sum != sum_sfn(dir))	/* Is there a valid LFN? */
1205:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->lfn_idx = 0xFFFF;		/* It has no LFN. */
1206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				break;
1207:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1208:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1209:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else		/* Non LFN configuration */
1210:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
1211:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			break;
1212:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
1214:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
1215:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1216:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) dj->sect = 0;
1218:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1219:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
1220:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1221:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1222:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1223:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1224:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1225:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1226:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Register an object to the directory                                   */
1227:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1228:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
1229:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1230:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_D
1231:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj				/* Target directory with object name to be created */
1232:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1233:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1234:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
1235:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE c, *dir;
1236:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1237:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD n, ne, is;
1238:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE sn[12], *fn, sum;
1239:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR *lfn;
1240:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1241:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1242:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fn = dj->fn; lfn = dj->lfn;
1243:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mem_cpy(sn, fn, 12);
1244:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1245:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (_FS_RPATH && (sn[NS] & NS_DOT))		/* Cannot create dot entry */
1246:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_NAME;
1247:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1248:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (sn[NS] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
1249:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fn[NS] = 0; dj->lfn = 0;			/* Find only SFN */
1250:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (n = 1; n < 100; n++) {
1251:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
1252:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_find(dj);				/* Check if the name collides with existing SFN */
1253:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
1254:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1255:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
1256:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
1257:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fn[NS] = sn[NS]; dj->lfn = lfn;
1258:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1259:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1260:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (sn[NS] & NS_LFN) {			/* When LFN is to be created, reserve an SFN + LFN entries. */
1261:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (ne = 0; lfn[ne]; ne++) ;
1262:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ne = (ne + 25) / 13;
1263:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {						/* Otherwise reserve only an SFN entry. */
1264:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ne = 1;
1265:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1266:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1267:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Reserve contiguous entries */
1268:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
1269:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) return res;
1270:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	n = is = 0;
1271:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	do {
1272:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1273:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
1274:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = *dj->dir;				/* Check the entry status */
1275:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0xE5 || c == 0) {	/* Is it a blank entry? */
1276:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (n == 0) is = dj->index;	/* First index of the contiguous entry */
1277:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (++n == ne) break;	/* A contiguous entry that required count is found */
1278:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
1279:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			n = 0;					/* Not a blank entry. Restart to search */
1280:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1281:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 1);		/* Next entry with table stretch */
1282:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (res == FR_OK);
1283:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1284:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK && ne > 1) {	/* Initialize LFN entry if needed */
1285:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_sdi(dj, is);
1286:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
1287:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sum = sum_sfn(dj->fn);	/* Sum of the SFN tied to the LFN */
1288:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ne--;
1289:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			do {					/* Store LFN entries in bottom first */
1290:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = move_window(dj->fs, dj->sect);
1291:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res != FR_OK) break;
1292:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fit_lfn(dj->lfn, dj->dir, (BYTE)ne, sum);
1293:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->fs->wflag = 1;
1294:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_next(dj, 0);	/* Next entry */
1295:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} while (res == FR_OK && --ne);
1296:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1297:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1298:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1299:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else	/* Non LFN configuration */
1300:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
1301:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
1302:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		do {	/* Find a blank entry for the SFN */
1303:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
1304:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
1305:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = *dj->dir;
1306:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
1307:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
1308:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} while (res == FR_OK);
1309:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1310:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1311:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1312:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {		/* Initialize the SFN entry */
1313:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1314:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
1315:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj->dir;
1316:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_set(dir, 0, 32);		/* Clean the entry */
1317:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
1318:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1319:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir[DIR_NTres] = *(dj->fn+NS) & (NS_BODY | NS_EXT);	/* Put NT flag */
1320:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1321:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fs->wflag = 1;
1322:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1323:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1324:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1325:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
1326:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1327:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* !_FS_READONLY */
1328:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1329:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1330:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1331:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1332:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1333:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Remove an object from the directory                                   */
1334:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1335:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY && !_FS_MINIMIZE
1336:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1337:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
1338:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj				/* Directory object pointing the entry to be removed */
1339:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1340:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1341:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
1342:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1343:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD i;
1344:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1345:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = dj->index;	/* SFN index */
1346:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, (WORD)((dj->lfn_idx == 0xFFFF) ? i : dj->lfn_idx));	/* Goto the SFN or top of th
1347:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
1348:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		do {
1349:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
1350:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
1351:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1352:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fs->wflag = 1;
1353:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dj->index >= i) break;	/* When reached SFN, all entries of the object has been deleted. */
1354:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_next(dj, 0);		/* Next entry */
1355:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} while (res == FR_OK);
1356:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
1357:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1358:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1359:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else			/* Non LFN configuration */
1360:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, dj->index);
1361:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
1362:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
1363:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
1364:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
1365:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fs->wflag = 1;
1366:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1367:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1368:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1369:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1370:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
1371:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1372:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* !_FS_READONLY */
1373:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1374:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1375:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1376:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1377:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1378:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Pick a segment and create the object name in directory form           */
1379:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1380:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1381:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1382:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT create_name (
1383:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1384:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR **path	/* Pointer to pointer to the segment in the path string */
1385:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1386:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1387:../../../SDK_embedded/libs/fatfs/src/ff.c **** #ifdef _EXCVT
1388:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	static const BYTE excvt[] = _EXCVT;	/* Upper conversion table for extended chars */
1389:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1390:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1391:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN	/* LFN configuration */
1392:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE b, cf;
1393:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WCHAR w, *lfn;
1394:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, ni, si, di;
1395:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *p;
1396:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1397:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Create LFN in Unicode */
1398:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	si = di = 0;
1399:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	p = *path;
1400:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	lfn = dj->lfn;
1401:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (;;) {
1402:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		w = p[si++];					/* Get a character */
1403:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
1404:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (di >= _MAX_LFN)				/* Reject too long name */
1405:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return FR_INVALID_NAME;
1406:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_LFN_UNICODE
1407:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		w &= 0xFF;
1408:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1409:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			b = (BYTE)p[si++];			/* Get 2nd byte */
1410:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!IsDBCS2(b))
1411:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_INVALID_NAME;	/* Reject invalid sequence */
1412:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			w = (w << 8) + b;			/* Create a DBC */
1413:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1414:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
1415:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
1416:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1417:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal chars for LFN */
1418:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return FR_INVALID_NAME;
1419:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		lfn[di++] = w;					/* Store the Unicode char */
1420:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1421:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1422:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1423:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
1424:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((di == 1 && lfn[di-1] == '.') || /* Is this a dot entry? */
1425:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		(di == 2 && lfn[di-1] == '.' && lfn[di-2] == '.')) {
1426:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		lfn[di] = 0;
1427:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (i = 0; i < 11; i++)
1428:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fn[i] = (i < di) ? '.' : ' ';
1429:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->fn[i] = cf | NS_DOT;		/* This is a dot entry */
1430:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_OK;
1431:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1432:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1433:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (di) {						/* Strip trailing spaces and dots */
1434:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		w = lfn[di-1];
1435:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (w != ' ' && w != '.') break;
1436:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		di--;
1437:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1438:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
1439:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1440:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	lfn[di] = 0;						/* LFN is created */
1441:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1442:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Create SFN in directory form */
1443:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mem_set(dj->fn, ' ', 11);
1444:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
1445:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (si) cf |= NS_LOSS | NS_LFN;
1446:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
1447:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1448:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	b = i = 0; ni = 8;
1449:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (;;) {
1450:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		w = lfn[si++];					/* Get an LFN char */
1451:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!w) break;					/* Break on end of the LFN */
1452:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
1453:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cf |= NS_LOSS | NS_LFN; continue;
1454:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1455:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1456:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (i >= ni || si == di) {		/* Extension or end of SFN */
1457:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ni == 11) {				/* Long extension */
1458:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; break;
1459:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1460:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
1461:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (si > di) break;			/* No extension */
1462:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			si = di; i = 8; ni = 11;	/* Enter extension section */
1463:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			b <<= 2; continue;
1464:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1465:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1466:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (w >= 0x80) {				/* Non ASCII char */
1467:../../../SDK_embedded/libs/fatfs/src/ff.c **** #ifdef _EXCVT
1468:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			w = ff_convert(w, 0);		/* Unicode -> OEM code */
1469:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (w) w = excvt[w - 0x80];	/* Convert extended char to upper (SBCS) */
1470:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
1471:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
1472:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1473:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cf |= NS_LFN;				/* Force create LFN entry */
1474:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1475:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1476:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_DF1S && w >= 0x100) {		/* Double byte char (always false on SBCS cfg) */
1477:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i >= ni - 1) {
1478:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				cf |= NS_LOSS | NS_LFN; i = ni; continue;
1479:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1480:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fn[i++] = (BYTE)(w >> 8);
1481:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {						/* Single byte char */
1482:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal chars for SFN */
1483:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
1484:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
1485:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (IsUpper(w)) {		/* ASCII large capital */
1486:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					b |= 2;
1487:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} else {
1488:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (IsLower(w)) {	/* ASCII small capital */
1489:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						b |= 1; w -= 0x20;
1490:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
1491:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
1492:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1493:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1494:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->fn[i++] = (BYTE)w;
1495:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1496:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1497:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (dj->fn[0] == 0xE5) dj->fn[0] = 0x05;	/* If the first char collides with deleted mark, replace 
1498:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1499:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (ni == 8) b <<= 2;
1500:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capital
1501:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cf |= NS_LFN;
1502:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended char, NT flags are create
1503:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
1504:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
1505:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1506:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1507:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->fn[NS] = cf;	/* SFN is created */
1508:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1509:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
1510:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1511:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1512:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else	/* Non-LFN configuration */
1513:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE b, c, d, *sfn;
1514:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT ni, si, i;
1515:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const char *p;
1516:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1517:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Create file name in directory form */
1518:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	sfn = dj->fn;
1519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mem_set(sfn, ' ', 11);
1520:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	si = i = b = 0; ni = 8;
1521:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	p = *path;
1522:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
1523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
1524:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (;;) {
1525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = (BYTE)p[si++];
1526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (c != '.' || si >= 3) break;
1527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = c;
1528:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1529:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
1530:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
1531:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
1532:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_OK;
1533:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1534:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1535:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for (;;) {
1536:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = (BYTE)p[si++];
1537:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
1538:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == '.' || i >= ni) {
1539:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
1540:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			i = 8; ni = 11;
1541:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			b <<= 2; continue;
1542:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1543:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
1544:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			b |= 3;						/* Eliminate NT flag */
1545:../../../SDK_embedded/libs/fatfs/src/ff.c **** #ifdef _EXCVT
1546:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
1547:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
1548:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_DF1S	/* ASCII only cfg */
1549:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return FR_INVALID_NAME;
1550:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1551:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1552:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1553:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (IsDBCS1(c)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
1554:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
1555:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
1556:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_INVALID_NAME;
1557:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = c;
1558:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = d;
1559:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {						/* Single byte code */
1560:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
1561:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_INVALID_NAME;
1562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
1563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				b |= 2;
1564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
1565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
1566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					b |= 1; c -= 0x20;
1567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
1568:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1569:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = c;
1570:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1571:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1572:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
1573:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
1574:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1575:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
1576:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
1577:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1578:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (ni == 8) b <<= 2;
1579:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
1580:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
1581:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1582:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
1583:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1584:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
1585:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1586:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1587:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1588:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1589:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1590:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1591:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1592:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Get file information from directory entry                             */
1593:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1594:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_MINIMIZE <= 1
1595:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1596:../../../SDK_embedded/libs/fatfs/src/ff.c **** void get_fileinfo (		/* No return code */
1597:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to the directory object */
1598:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FILINFO *fno	 	/* Pointer to the file information to be filled */
1599:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1600:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1236              		.loc 1 1600 0
 1237              		.cfi_startproc
 1238              		@ args = 0, pretend = 0, frame = 0
 1239              		@ frame_needed = 0, uses_anonymous_args = 0
 1240              	.LVL4:
1601:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i;
1602:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE nt, *dir;
1603:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	TCHAR *p, c;
1604:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1605:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1606:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	p = fno->fname;
1607:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (dj->sect) {
 1241              		.loc 1 1607 0
 1242 0000 0369     		ldr	r3, [r0, #16]
1600:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1243              		.loc 1 1600 0
 1244 0002 30B5     		push	{r4, r5, lr}
 1245              	.LCFI1:
 1246              		.cfi_def_cfa_offset 12
 1247              		.cfi_offset 14, -4
 1248              		.cfi_offset 5, -8
 1249              		.cfi_offset 4, -12
1606:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	p = fno->fname;
 1250              		.loc 1 1606 0
 1251 0004 01F10902 		add	r2, r1, #9
 1252              	.LVL5:
 1253              		.loc 1 1607 0
 1254 0008 002B     		cmp	r3, #0
 1255 000a 3BD0     		beq	.L8
1608:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;
 1256              		.loc 1 1608 0
 1257 000c 4369     		ldr	r3, [r0, #20]
 1258              	.LVL6:
1609:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		nt = dir[DIR_NTres];		/* NT flag */
1610:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 1259              		.loc 1 1610 0
 1260 000e 0024     		movs	r4, #0
1608:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;
 1261              		.loc 1 1608 0
 1262 0010 1046     		mov	r0, r2
 1263              	.LVL7:
 1264              	.L11:
1611:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = dir[i];
 1265              		.loc 1 1611 0
 1266 0012 1D5D     		ldrb	r5, [r3, r4]	@ zero_extendqisi2
 1267              	.LVL8:
1608:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;
 1268              		.loc 1 1608 0
 1269 0014 0246     		mov	r2, r0
1612:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (c == ' ') break;
 1270              		.loc 1 1612 0
 1271 0016 202D     		cmp	r5, #32
 1272 0018 08D0     		beq	.L9
1613:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (c == 0x05) c = (TCHAR)0xE5;
 1273              		.loc 1 1613 0
 1274 001a 052D     		cmp	r5, #5
 1275 001c 08BF     		it	eq
 1276 001e E525     		moveq	r5, #229
 1277              	.LVL9:
1610:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 1278              		.loc 1 1610 0
 1279 0020 0134     		adds	r4, r4, #1
1614:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (_USE_LFN && (nt & NS_BODY) && IsUpper(c)) c += 0x20;
1615:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _LFN_UNICODE
1616:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (IsDBCS1(c) && i < 7 && IsDBCS2(dir[i+1]))
1617:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				c = (c << 8) | dir[++i];
1618:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = ff_convert(c, 1);
1619:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!c) c = '?';
1620:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1621:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p++ = c;
 1280              		.loc 1 1621 0
 1281 0022 00F8015B 		strb	r5, [r0], #1
 1282              	.LVL10:
1610:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 1283              		.loc 1 1610 0
 1284 0026 082C     		cmp	r4, #8
 1285              		.loc 1 1621 0
 1286 0028 0246     		mov	r2, r0
 1287              	.LVL11:
1610:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (i = 0; i < 8; i++) {	/* Copy name body */
 1288              		.loc 1 1610 0
 1289 002a F2D1     		bne	.L11
 1290              	.LVL12:
 1291              	.L9:
1622:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1623:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (dir[8] != ' ') {		/* Copy name extension */
 1292              		.loc 1 1623 0
 1293 002c 1C7A     		ldrb	r4, [r3, #8]	@ zero_extendqisi2
 1294 002e 202C     		cmp	r4, #32
 1295 0030 0DD0     		beq	.L12
1624:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p++ = '.';
 1296              		.loc 1 1624 0
 1297 0032 2E22     		movs	r2, #46
 1298 0034 00F8012B 		strb	r2, [r0], #1
 1299              	.LVL13:
1625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (i = 8; i < 11; i++) {
 1300              		.loc 1 1625 0
 1301 0038 0824     		movs	r4, #8
 1302              	.LVL14:
 1303              	.L13:
1626:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				c = dir[i];
 1304              		.loc 1 1626 0
 1305 003a 1D5D     		ldrb	r5, [r3, r4]	@ zero_extendqisi2
 1306              	.LVL15:
1624:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p++ = '.';
 1307              		.loc 1 1624 0
 1308 003c 0246     		mov	r2, r0
1627:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (c == ' ') break;
 1309              		.loc 1 1627 0
 1310 003e 202D     		cmp	r5, #32
 1311 0040 05D0     		beq	.L12
1625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (i = 8; i < 11; i++) {
 1312              		.loc 1 1625 0
 1313 0042 0134     		adds	r4, r4, #1
1628:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (_USE_LFN && (nt & NS_EXT) && IsUpper(c)) c += 0x20;
1629:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _LFN_UNICODE
1630:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (IsDBCS1(c) && i < 10 && IsDBCS2(dir[i+1]))
1631:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					c = (c << 8) | dir[++i];
1632:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				c = ff_convert(c, 1);
1633:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (!c) c = '?';
1634:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1635:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				*p++ = c;
 1314              		.loc 1 1635 0
 1315 0044 00F8015B 		strb	r5, [r0], #1
1625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (i = 8; i < 11; i++) {
 1316              		.loc 1 1625 0
 1317 0048 0B2C     		cmp	r4, #11
 1318              		.loc 1 1635 0
 1319 004a 0246     		mov	r2, r0
 1320              	.LVL16:
1625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (i = 8; i < 11; i++) {
 1321              		.loc 1 1625 0
 1322 004c F5D1     		bne	.L13
 1323              	.LVL17:
 1324              	.L12:
1636:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1637:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1638:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 1325              		.loc 1 1638 0
 1326 004e D87A     		ldrb	r0, [r3, #11]	@ zero_extendqisi2
 1327 0050 0872     		strb	r0, [r1, #8]
1639:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
 1328              		.loc 1 1639 0
 1329 0052 9C7F     		ldrb	r4, [r3, #30]	@ zero_extendqisi2
 1330 0054 93F81FC0 		ldrb	ip, [r3, #31]	@ zero_extendqisi2
 1331 0058 2004     		lsls	r0, r4, #16
 1332 005a 1C7F     		ldrb	r4, [r3, #28]	@ zero_extendqisi2
 1333 005c 40EA0C6C 		orr	ip, r0, ip, lsl #24
 1334 0060 587F     		ldrb	r0, [r3, #29]	@ zero_extendqisi2
 1335 0062 4CEA040C 		orr	ip, ip, r4
 1336 0066 4CEA0024 		orr	r4, ip, r0, lsl #8
 1337 006a 0C60     		str	r4, [r1, #0]
1640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
 1338              		.loc 1 1640 0
 1339 006c 187E     		ldrb	r0, [r3, #24]	@ zero_extendqisi2
 1340 006e 5C7E     		ldrb	r4, [r3, #25]	@ zero_extendqisi2
 1341 0070 40EA042C 		orr	ip, r0, r4, lsl #8
 1342 0074 A1F804C0 		strh	ip, [r1, #4]	@ movhi
1641:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
 1343              		.loc 1 1641 0
 1344 0078 D87D     		ldrb	r0, [r3, #23]	@ zero_extendqisi2
 1345 007a 93F816C0 		ldrb	ip, [r3, #22]	@ zero_extendqisi2
 1346 007e 4CEA0020 		orr	r0, ip, r0, lsl #8
 1347 0082 C880     		strh	r0, [r1, #6]	@ movhi
 1348              	.LVL18:
 1349              	.L8:
1642:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1643:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*p = 0;		/* Terminate SFN str by a \0 */
 1350              		.loc 1 1643 0
 1351 0084 0021     		movs	r1, #0
 1352              	.LVL19:
 1353 0086 1170     		strb	r1, [r2, #0]
1644:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1645:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
1646:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fno->lfname && fno->lfsize) {
1647:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		TCHAR *tp = fno->lfname;
1648:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		WCHAR w, *lfn;
1649:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1650:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		i = 0;
1651:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (dj->sect && dj->lfn_idx != 0xFFFF) {/* Get LFN if available */
1652:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			lfn = dj->lfn;
1653:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			while ((w = *lfn++) != 0) {			/* Get an LFN char */
1654:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_LFN_UNICODE
1655:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				w = ff_convert(w, 0);			/* Unicode -> OEM conversion */
1656:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (!w) { i = 0; break; }		/* Could not convert, no LFN */
1657:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (_DF1S && w >= 0x100)		/* Put 1st byte if it is a DBC (always false on SBCS cfg) */
1658:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					tp[i++] = (TCHAR)(w >> 8);
1659:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (i >= fno->lfsize - 1) { i = 0; break; }	/* Buffer overflow, no LFN */
1661:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				tp[i++] = (TCHAR)w;
1662:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1663:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		tp[i] = 0;	/* Terminate the LFN str by a \0 */
1665:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1666:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1667:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1354              		.loc 1 1667 0
 1355 0088 30BD     		pop	{r4, r5, pc}
 1356              		.cfi_endproc
 1357              	.LFE18:
 1359              		.section	.text.move_window,"ax",%progbits
 1360              		.align	1
 1361              		.thumb
 1362              		.thumb_func
 1364              	move_window:
 1365              	.LFB4:
 512:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1366              		.loc 1 512 0
 1367              		.cfi_startproc
 1368              		@ args = 0, pretend = 0, frame = 0
 1369              		@ frame_needed = 0, uses_anonymous_args = 0
 1370              	.LVL20:
 1371 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1372              	.LCFI2:
 1373              		.cfi_def_cfa_offset 32
 1374              		.cfi_offset 14, -4
 1375              		.cfi_offset 9, -8
 1376              		.cfi_offset 8, -12
 1377              		.cfi_offset 7, -16
 1378              		.cfi_offset 6, -20
 1379              		.cfi_offset 5, -24
 1380              		.cfi_offset 4, -28
 1381              		.cfi_offset 3, -32
 516:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	wsect = fs->winsect;
 1382              		.loc 1 516 0
 1383 0004 056B     		ldr	r5, [r0, #48]
 1384              	.LVL21:
 512:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1385              		.loc 1 512 0
 1386 0006 0446     		mov	r4, r0
 517:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 1387              		.loc 1 517 0
 1388 0008 8D42     		cmp	r5, r1
 512:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1389              		.loc 1 512 0
 1390 000a 0E46     		mov	r6, r1
 517:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (wsect != sector) {	/* Changed current window */
 1391              		.loc 1 517 0
 1392 000c 2BD0     		beq	.L22
 519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->wflag) {	/* Write back dirty window if needed */
 1393              		.loc 1 519 0
 1394 000e 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 1395 0010 EBB1     		cbz	r3, .L19
 520:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK)
 1396              		.loc 1 520 0
 1397 0012 00F13408 		add	r8, r0, #52
 1398 0016 4146     		mov	r1, r8
 1399              	.LVL22:
 1400 0018 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1401              	.LVL23:
 1402 001a 2A46     		mov	r2, r5
 1403 001c 0123     		movs	r3, #1
 1404 001e DFF86490 		ldr	r9, .L26+4
 1405 0022 C847     		blx	r9
 1406              	.LVL24:
 1407 0024 10BB     		cbnz	r0, .L23
 523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 1408              		.loc 1 523 0
 1409 0026 226A     		ldr	r2, [r4, #32]
 1410 0028 616A     		ldr	r1, [r4, #36]
 522:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->wflag = 0;
 1411              		.loc 1 522 0
 1412 002a 2071     		strb	r0, [r4, #4]
 523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 1413              		.loc 1 523 0
 1414 002c 5018     		adds	r0, r2, r1
 1415 002e 8542     		cmp	r5, r0
 1416              	.LBB8:
 525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 1417              		.loc 1 525 0
 1418 0030 38BF     		it	cc
 1419 0032 E778     		ldrbcc	r7, [r4, #3]	@ zero_extendqisi2
 1420              	.LBE8:
 523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (wsect < (fs->fatbase + fs->fsize)) {	/* In FAT area */
 1421              		.loc 1 523 0
 1422 0034 09D3     		bcc	.L20
 1423 0036 0AE0     		b	.L19
 1424              	.LVL25:
 1425              	.L21:
 1426              	.LBB9:
 526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					wsect += fs->fsize;
 1427              		.loc 1 526 0 discriminator 2
 1428 0038 236A     		ldr	r3, [r4, #32]
 527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1429              		.loc 1 527 0 discriminator 2
 1430 003a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					wsect += fs->fsize;
 1431              		.loc 1 526 0 discriminator 2
 1432 003c ED18     		adds	r5, r5, r3
 1433              	.LVL26:
 527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					disk_write(fs->drv, fs->win, wsect, 1);
 1434              		.loc 1 527 0 discriminator 2
 1435 003e 4146     		mov	r1, r8
 1436 0040 2A46     		mov	r2, r5
 1437 0042 0123     		movs	r3, #1
 1438 0044 C847     		blx	r9
 525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 1439              		.loc 1 525 0 discriminator 2
 1440 0046 013F     		subs	r7, r7, #1
 1441              	.LVL27:
 1442 0048 FFB2     		uxtb	r7, r7
 1443              	.LVL28:
 1444              	.L20:
 525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (nf = fs->n_fats; nf > 1; nf--) {	/* Reflect the change to all FAT copies */
 1445              		.loc 1 525 0 is_stmt 0 discriminator 1
 1446 004a 012F     		cmp	r7, #1
 1447 004c F4D8     		bhi	.L21
 1448              	.LVL29:
 1449              	.L19:
 1450              	.LBE9:
 532:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (sector) {
 1451              		.loc 1 532 0 is_stmt 1
 1452 004e 86B1     		cbz	r6, .L24
 533:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK)
 1453              		.loc 1 533 0
 1454 0050 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1455 0052 04F13401 		add	r1, r4, #52
 1456 0056 3246     		mov	r2, r6
 1457 0058 0123     		movs	r3, #1
 1458 005a 094D     		ldr	r5, .L26
 1459              	.LVL30:
 1460 005c A847     		blx	r5
 1461 005e 58B9     		cbnz	r0, .L25
 535:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->winsect = sector;
 1462              		.loc 1 535 0
 1463 0060 2663     		str	r6, [r4, #48]
 1464 0062 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1465              	.LVL31:
 1466              	.L22:
 539:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 1467              		.loc 1 539 0
 1468 0066 0020     		movs	r0, #0
 1469 0068 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1470              	.L23:
 521:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_DISK_ERR;
 1471              		.loc 1 521 0
 1472 006c 0120     		movs	r0, #1
 1473 006e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1474              	.L24:
 539:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 1475              		.loc 1 539 0
 1476 0072 3046     		mov	r0, r6
 1477 0074 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1478              	.LVL32:
 1479              	.L25:
 534:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_DISK_ERR;
 1480              		.loc 1 534 0
 1481 0078 0120     		movs	r0, #1
 540:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1482              		.loc 1 540 0
 1483 007a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1484              	.L27:
 1485 007e 00BF     		.align	2
 1486              	.L26:
 1487 0080 00000000 		.word	disk_read
 1488 0084 00000000 		.word	disk_write
 1489              		.cfi_endproc
 1490              	.LFE4:
 1492              		.section	.text.sync,"ax",%progbits
 1493              		.align	1
 1494              		.thumb
 1495              		.thumb_func
 1497              	sync:
 1498              	.LFB5:
 553:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1499              		.loc 1 553 0
 1500              		.cfi_startproc
 1501              		@ args = 0, pretend = 0, frame = 0
 1502              		@ frame_needed = 0, uses_anonymous_args = 0
 1503              	.LVL33:
 1504 0000 70B5     		push	{r4, r5, r6, lr}
 1505              	.LCFI3:
 1506              		.cfi_def_cfa_offset 16
 1507              		.cfi_offset 14, -4
 1508              		.cfi_offset 6, -8
 1509              		.cfi_offset 5, -12
 1510              		.cfi_offset 4, -16
 557:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = move_window(fs, 0);
 1511              		.loc 1 557 0
 1512 0002 0021     		movs	r1, #0
 1513 0004 2C4B     		ldr	r3, .L31
 553:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1514              		.loc 1 553 0
 1515 0006 0446     		mov	r4, r0
 557:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = move_window(fs, 0);
 1516              		.loc 1 557 0
 1517 0008 9847     		blx	r3
 1518              	.LVL34:
 1519 000a 0546     		mov	r5, r0
 1520              	.LVL35:
 558:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 1521              		.loc 1 558 0
 1522 000c 002D     		cmp	r5, #0
 1523 000e 51D1     		bne	.L29
 560:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 1524              		.loc 1 560 0
 1525 0010 2078     		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 1526              	.LVL36:
 1527 0012 0328     		cmp	r0, #3
 1528 0014 46D1     		bne	.L30
 560:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag) {
 1529              		.loc 1 560 0 is_stmt 0 discriminator 1
 1530 0016 6179     		ldrb	r1, [r4, #5]	@ zero_extendqisi2
 1531 0018 0029     		cmp	r1, #0
 1532 001a 43D0     		beq	.L30
 562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_set(fs->win, 0, 512);
 1533              		.loc 1 562 0 is_stmt 1
 1534 001c 04F13406 		add	r6, r4, #52
 1535 0020 3046     		mov	r0, r6
 1536 0022 2946     		mov	r1, r5
 1537 0024 4FF40072 		mov	r2, #512
 1538 0028 244B     		ldr	r3, .L31+4
 561:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->winsect = 0;
 1539              		.loc 1 561 0
 1540 002a 2563     		str	r5, [r4, #48]
 562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_set(fs->win, 0, 512);
 1541              		.loc 1 562 0
 1542 002c 9847     		blx	r3
 563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 1543              		.loc 1 563 0
 1544 002e AA23     		movs	r3, #170
 1545 0030 84F83332 		strb	r3, [r4, #563]
 564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1546              		.loc 1 564 0
 1547 0034 6123     		movs	r3, #97
 563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 1548              		.loc 1 563 0
 1549 0036 5522     		movs	r2, #85
 564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1550              		.loc 1 564 0
 1551 0038 84F83630 		strb	r3, [r4, #54]
 565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1552              		.loc 1 565 0
 1553 003c 84F81B32 		strb	r3, [r4, #539]
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1554              		.loc 1 566 0
 1555 0040 2369     		ldr	r3, [r4, #16]
 564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1556              		.loc 1 564 0
 1557 0042 5220     		movs	r0, #82
 565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1558              		.loc 1 565 0
 1559 0044 7221     		movs	r1, #114
 563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_WORD(fs->win+BS_55AA, 0xAA55);
 1560              		.loc 1 563 0
 1561 0046 84F83222 		strb	r2, [r4, #562]
 564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_LeadSig, 0x41615252);
 1562              		.loc 1 564 0
 1563 004a 4122     		movs	r2, #65
 1564 004c 84F83400 		strb	r0, [r4, #52]
 1565 0050 84F83500 		strb	r0, [r4, #53]
 1566 0054 84F83720 		strb	r2, [r4, #55]
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1567              		.loc 1 566 0
 1568 0058 C3F30720 		ubfx	r0, r3, #8, #8
 565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_StrucSig, 0x61417272);
 1569              		.loc 1 565 0
 1570 005c 84F81812 		strb	r1, [r4, #536]
 1571 0060 84F81912 		strb	r1, [r4, #537]
 1572 0064 84F81A22 		strb	r2, [r4, #538]
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1573              		.loc 1 566 0
 1574 0068 190E     		lsrs	r1, r3, #24
 1575 006a 1A0C     		lsrs	r2, r3, #16
 1576 006c 84F81C32 		strb	r3, [r4, #540]
 567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1577              		.loc 1 567 0
 1578 0070 E368     		ldr	r3, [r4, #12]
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1579              		.loc 1 566 0
 1580 0072 84F81D02 		strb	r0, [r4, #541]
 567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1581              		.loc 1 567 0
 1582 0076 C3F3072C 		ubfx	ip, r3, #8, #8
 1583 007a 180C     		lsrs	r0, r3, #16
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1584              		.loc 1 566 0
 1585 007c 84F81E22 		strb	r2, [r4, #542]
 567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1586              		.loc 1 567 0
 1587 0080 1A0E     		lsrs	r2, r3, #24
 566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Free_Count, fs->free_clust);
 1588              		.loc 1 566 0
 1589 0082 84F81F12 		strb	r1, [r4, #543]
 567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1590              		.loc 1 567 0
 1591 0086 84F82032 		strb	r3, [r4, #544]
 1592 008a 84F82202 		strb	r0, [r4, #546]
 1593 008e 84F82322 		strb	r2, [r4, #547]
 568:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 1594              		.loc 1 568 0
 1595 0092 3146     		mov	r1, r6
 567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(fs->win+FSI_Nxt_Free, fs->last_clust);
 1596              		.loc 1 567 0
 1597 0094 84F821C2 		strb	ip, [r4, #545]
 568:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			disk_write(fs->drv, fs->win, fs->fsi_sector, 1);
 1598              		.loc 1 568 0
 1599 0098 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1600 009a 6269     		ldr	r2, [r4, #20]
 1601 009c 0123     		movs	r3, #1
 1602 009e 084E     		ldr	r6, .L31+8
 1603 00a0 B047     		blx	r6
 569:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->fsi_flag = 0;
 1604              		.loc 1 569 0
 1605 00a2 6571     		strb	r5, [r4, #5]
 1606              	.L30:
 572:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (disk_ioctl(fs->drv, CTRL_SYNC, (void*)0) != RES_OK)
 1607              		.loc 1 572 0
 1608 00a4 0021     		movs	r1, #0
 1609 00a6 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1610 00a8 0A46     		mov	r2, r1
 1611 00aa 064B     		ldr	r3, .L31+12
 1612 00ac 9847     		blx	r3
 1613 00ae 0030     		adds	r0, r0, #0
 1614 00b0 18BF     		it	ne
 1615 00b2 0120     		movne	r0, #1
 1616              	.L29:
 1617              	.LVL37:
 577:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1618              		.loc 1 577 0
 1619 00b4 70BD     		pop	{r4, r5, r6, pc}
 1620              	.L32:
 1621 00b6 00BF     		.align	2
 1622              	.L31:
 1623 00b8 00000000 		.word	move_window
 1624 00bc 00000000 		.word	mem_set
 1625 00c0 00000000 		.word	disk_write
 1626 00c4 00000000 		.word	disk_ioctl
 1627              		.cfi_endproc
 1628              	.LFE5:
 1630              		.section	.text.validate,"ax",%progbits
 1631              		.align	1
 1632              		.thumb
 1633              		.thumb_func
 1635              	validate:
 1636              	.LFB22:
1668:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* _FS_MINIMIZE <= 1 */
1669:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1671:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1673:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1674:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Follow a file path                                                    */
1675:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1676:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1677:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1678:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
1679:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,			/* Directory object to return last directory and found object */
1680:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path	/* Full-path string to find a file or directory */
1681:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1682:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1683:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
1684:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir, ns;
1685:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1686:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1687:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
1688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
1689:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
1690:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {							/* No heading separator */
1691:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
1692:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1693:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
1694:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\')	/* Strip heading separator if exist */
1695:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		path++;
1696:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->sclust = 0;						/* Start from the root dir */
1697:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1698:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1699:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
1700:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_sdi(dj, 0);
1701:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->dir = 0;
1702:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1703:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {							/* Follow path */
1704:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		for (;;) {
1705:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = create_name(dj, &path);	/* Get a segment */
1706:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
1707:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_find(dj);				/* Find it */
1708:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ns = *(dj->fn+NS);
1709:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
1710:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
1711:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				/* Object not found */
1712:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
1713:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
1714:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_OK;
1715:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) continue;
1716:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} else {							/* Could not find the object */
1717:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
1718:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
1719:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				break;
1720:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1721:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
1722:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
1723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
1724:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_PATH; break;
1725:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
1726:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->sclust = LD_CLUST(dir);
1727:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1728:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1729:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1730:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
1731:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1732:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1733:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1734:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1735:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1736:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1737:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Load boot record and check if it is an FAT boot record                */
1738:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1739:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1740:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1741:../../../SDK_embedded/libs/fatfs/src/ff.c **** BYTE check_fs (	/* 0:The FAT BR, 1:Valid BR but not an FAT, 2:Not a BR, 3:Disk error */
1742:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,	/* File system object */
1743:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
1744:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1745:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1746:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
1747:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 3;
1748:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
1749:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 2;
1750:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1751:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
1752:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 0;
1753:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
1754:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 0;
1755:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1756:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return 1;
1757:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1758:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1759:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1760:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1761:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1762:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1763:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Check if the file system object is valid or not                       */
1764:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1765:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1766:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1767:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT chk_mounted (	/* FR_OK(0): successful, !=0: any error occurred */
1768:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR **path,	/* Pointer to pointer to the path name (drive number) */
1769:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS **rfs,		/* Pointer to pointer to the found file system object */
1770:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE chk_wp			/* !=0: Check media write protection for write access */
1771:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1772:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1773:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE fmt, b, *tbl;
1774:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT vol;
1775:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DSTATUS stat;
1776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD bsect, fasize, tsect, sysect, nclst, szbfat;
1777:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD nrsv;
1778:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *p = *path;
1779:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs;
1780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1781:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Get logical drive number from the path name */
1782:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	vol = p[0] - '0';					/* Is there a drive number? */
1783:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
1784:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
1785:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {							/* No drive number is given */
1786:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
1787:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		vol = CurrVol;					/* Use current drive */
1788:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
1789:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		vol = 0;						/* Use drive 0 */
1790:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1791:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1792:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1793:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Check if the logical drive is valid or not */
1794:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
1795:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
1796:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
1797:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
1798:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1799:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	ENTER_FF(fs);						/* Lock file system */
1800:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1801:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
1802:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		stat = disk_status(fs->drv);
1803:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
1804:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
1805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
1806:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_WRITE_PROTECTED;
1807:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1808:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
1809:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1810:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1811:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1812:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* The logical drive must be mounted. */
1813:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Following code attempts to mount a volume. (analyze BPB and initialize the fs object) */
1814:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1815:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
1816:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
1817:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
1818:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
1819:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
1820:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _MAX_SS != 512						/* Get disk sector size (variable sector size cfg only) */
1821:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &fs->ssize) != RES_OK)
1822:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_DISK_ERR;
1823:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1824:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
1825:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
1826:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_WRITE_PROTECTED;
1827:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1828:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Search FAT partition on the drive. Supports only generic partitionings, FDISK and SFD. */
1829:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
1830:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
1831:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		/* Check the partition listed in top of the partition table */
1832:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		tbl = &fs->win[MBR_Table + LD2PT(vol) * 16];	/* Partition table */
1833:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
1834:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
1835:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
1836:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1837:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
1839:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
1840:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1841:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Following code initializes the file system object */
1842:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
1844:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NO_FILESYSTEM;
1845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1846:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
1847:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
1848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fsize = fasize;
1849:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
1851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
1852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
1853:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
1855:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
1856:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
1858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector alig
1859:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
1861:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
1862:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1863:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
1864:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
1865:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1866:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Determine the FAT sub type */
1867:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
1868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
1869:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
1870:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
1871:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fmt = FS_FAT12;
1872:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
1873:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
1874:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1875:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Boundaries and Limits */
1876:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
1877:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
1878:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
1879:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
1880:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
1881:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
1882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
1883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else {
1884:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
1885:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
1886:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		szbfat = (fmt == FS_FAT16) ?					/* (Required FAT size) */
1887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
1888:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1889:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors *
1890:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NO_FILESYSTEM;
1891:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1892:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
1893:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Initialize cluster allocation information */
1894:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
1895:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->last_clust = 0;
1896:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1897:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Get fsinfo if available */
1898:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
1899:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	 	fs->fsi_flag = 0;
1900:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
1901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
1902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
1903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
1904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
1905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
1906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
1907:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
1908:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1909:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
1911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
1912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
1913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->wflag = 0;
1914:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
1915:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
1916:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1917:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE				/* Clear file lock semaphores */
1918:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	clear_lock(fs);
1919:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1920:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1921:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
1922:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1923:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1924:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1925:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1926:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1927:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1928:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Check if the file/dir object is valid or not                          */
1929:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1930:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1931:../../../SDK_embedded/libs/fatfs/src/ff.c **** static
1932:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
1933:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs,		/* Pointer to the file system object */
1934:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	WORD id			/* Member id of the target object to be checked */
1935:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1936:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1637              		.loc 1 1936 0
 1638              		.cfi_startproc
 1639              		@ args = 0, pretend = 0, frame = 0
 1640              		@ frame_needed = 0, uses_anonymous_args = 0
 1641              	.LVL38:
 1642 0000 08B5     		push	{r3, lr}
 1643              	.LCFI4:
 1644              		.cfi_def_cfa_offset 8
 1645              		.cfi_offset 14, -4
 1646              		.cfi_offset 3, -8
1937:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fs || !fs->fs_type || fs->id != id)
 1647              		.loc 1 1937 0
 1648 0002 60B1     		cbz	r0, .L37
 1649              		.loc 1 1937 0 is_stmt 0 discriminator 1
 1650 0004 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 1651 0006 53B1     		cbz	r3, .L37
 1652 0008 C288     		ldrh	r2, [r0, #6]
 1653 000a 8A42     		cmp	r2, r1
 1654 000c 09D1     		bne	.L38
 1655              	.LVL39:
 1656              	.LBB12:
 1657              	.LBB13:
1938:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_OBJECT;
1939:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1940:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	ENTER_FF(fs);		/* Lock file system */
1941:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1942:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (disk_status(fs->drv) & STA_NOINIT)
 1658              		.loc 1 1942 0 is_stmt 1
 1659 000e 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1660              	.LVL40:
 1661 0010 0549     		ldr	r1, .L40
 1662              	.LVL41:
 1663 0012 8847     		blx	r1
 1664 0014 10F00100 		ands	r0, r0, #1
1943:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NOT_READY;
 1665              		.loc 1 1943 0
 1666 0018 18BF     		it	ne
 1667 001a 0320     		movne	r0, #3
 1668 001c 08BD     		pop	{r3, pc}
 1669              	.LVL42:
 1670              	.L37:
 1671              	.LBE13:
 1672              	.LBE12:
1938:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_OBJECT;
 1673              		.loc 1 1938 0
 1674 001e 0920     		movs	r0, #9
 1675              	.LVL43:
 1676 0020 08BD     		pop	{r3, pc}
 1677              	.LVL44:
 1678              	.L38:
 1679 0022 0920     		movs	r0, #9
 1680              	.LVL45:
1944:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1945:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
1946:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1681              		.loc 1 1946 0
 1682 0024 08BD     		pop	{r3, pc}
 1683              	.L41:
 1684 0026 00BF     		.align	2
 1685              	.L40:
 1686 0028 00000000 		.word	disk_status
 1687              		.cfi_endproc
 1688              	.LFE22:
 1690              		.section	.text.check_fs,"ax",%progbits
 1691              		.align	1
 1692              		.thumb
 1693              		.thumb_func
 1695              	check_fs:
 1696              	.LFB20:
1745:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1697              		.loc 1 1745 0
 1698              		.cfi_startproc
 1699              		@ args = 0, pretend = 0, frame = 0
 1700              		@ frame_needed = 0, uses_anonymous_args = 0
 1701              	.LVL46:
 1702 0000 38B5     		push	{r3, r4, r5, lr}
 1703              	.LCFI5:
 1704              		.cfi_def_cfa_offset 16
 1705              		.cfi_offset 14, -4
 1706              		.cfi_offset 5, -8
 1707              		.cfi_offset 4, -12
 1708              		.cfi_offset 3, -16
1745:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1709              		.loc 1 1745 0
 1710 0002 0446     		mov	r4, r0
 1711 0004 0A46     		mov	r2, r1
1746:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (disk_read(fs->drv, fs->win, sect, 1) != RES_OK)	/* Load boot record */
 1712              		.loc 1 1746 0
 1713 0006 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 1714              	.LVL47:
 1715 0008 04F13401 		add	r1, r4, #52
 1716              	.LVL48:
 1717 000c 0123     		movs	r3, #1
 1718 000e 1D4D     		ldr	r5, .L47
 1719 0010 A847     		blx	r5
 1720              	.LVL49:
 1721 0012 0028     		cmp	r0, #0
 1722 0014 32D1     		bne	.L44
1748:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)		/* Check record signature (always placed at offset 510 
 1723              		.loc 1 1748 0
 1724 0016 94F833C2 		ldrb	ip, [r4, #563]	@ zero_extendqisi2
 1725 001a 94F832E2 		ldrb	lr, [r4, #562]	@ zero_extendqisi2
 1726 001e 1A4B     		ldr	r3, .L47+4
 1727 0020 4EEA0C21 		orr	r1, lr, ip, lsl #8
 1728 0024 0AB2     		sxth	r2, r1
 1729 0026 9A42     		cmp	r2, r3
 1730 0028 2AD1     		bne	.L45
1751:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 1731              		.loc 1 1751 0
 1732 002a 94F86C20 		ldrb	r2, [r4, #108]	@ zero_extendqisi2
 1733 002e 94F86D30 		ldrb	r3, [r4, #109]	@ zero_extendqisi2
 1734 0032 1104     		lsls	r1, r2, #16
 1735 0034 94F86A20 		ldrb	r2, [r4, #106]	@ zero_extendqisi2
 1736 0038 41EA036E 		orr	lr, r1, r3, lsl #24
 1737 003c 94F86BC0 		ldrb	ip, [r4, #107]	@ zero_extendqisi2
 1738 0040 4EEA0201 		orr	r1, lr, r2
 1739 0044 41EA0C23 		orr	r3, r1, ip, lsl #8
 1740 0048 23F07F42 		bic	r2, r3, #-16777216
 1741 004c 0F4B     		ldr	r3, .L47+8
 1742 004e 9A42     		cmp	r2, r3
 1743 0050 17D0     		beq	.L43
 1744              	.LVL50:
 1745              	.LBB16:
 1746              	.LBB17:
1753:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)
 1747              		.loc 1 1753 0
 1748 0052 94F88800 		ldrb	r0, [r4, #136]	@ zero_extendqisi2
 1749 0056 94F889C0 		ldrb	ip, [r4, #137]	@ zero_extendqisi2
 1750 005a 0104     		lsls	r1, r0, #16
 1751 005c 94F88620 		ldrb	r2, [r4, #134]	@ zero_extendqisi2
 1752 0060 41EA0C60 		orr	r0, r1, ip, lsl #24
 1753 0064 94F88710 		ldrb	r1, [r4, #135]	@ zero_extendqisi2
 1754 0068 40EA020E 		orr	lr, r0, r2
 1755 006c 4EEA012C 		orr	ip, lr, r1, lsl #8
 1756 0070 2CF07F40 		bic	r0, ip, #-16777216
 1757              	.LBE17:
 1758              	.LBE16:
1754:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 0;
 1759              		.loc 1 1754 0
 1760 0074 C01A     		subs	r0, r0, r3
 1761 0076 18BF     		it	ne
 1762 0078 0120     		movne	r0, #1
 1763 007a 38BD     		pop	{r3, r4, r5, pc}
 1764              	.LVL51:
 1765              	.L44:
1747:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 3;
 1766              		.loc 1 1747 0
 1767 007c 0320     		movs	r0, #3
 1768 007e 38BD     		pop	{r3, r4, r5, pc}
 1769              	.L45:
1749:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 2;
 1770              		.loc 1 1749 0
 1771 0080 0220     		movs	r0, #2
 1772              	.L43:
1757:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 1773              		.loc 1 1757 0
 1774 0082 38BD     		pop	{r3, r4, r5, pc}
 1775              	.L48:
 1776              		.align	2
 1777              	.L47:
 1778 0084 00000000 		.word	disk_read
 1779 0088 55AAFFFF 		.word	-21931
 1780 008c 46415400 		.word	5521734
 1781              		.cfi_endproc
 1782              	.LFE20:
 1784              		.section	.text.chk_mounted,"ax",%progbits
 1785              		.align	1
 1786              		.thumb
 1787              		.thumb_func
 1789              	chk_mounted:
 1790              	.LFB21:
1772:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1791              		.loc 1 1772 0
 1792              		.cfi_startproc
 1793              		@ args = 0, pretend = 0, frame = 0
 1794              		@ frame_needed = 0, uses_anonymous_args = 0
 1795              	.LVL52:
 1796 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1797              	.LCFI6:
 1798              		.cfi_def_cfa_offset 24
 1799              		.cfi_offset 14, -4
 1800              		.cfi_offset 8, -8
 1801              		.cfi_offset 7, -12
 1802              		.cfi_offset 6, -16
 1803              		.cfi_offset 5, -20
 1804              		.cfi_offset 4, -24
1772:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 1805              		.loc 1 1772 0
 1806 0004 1546     		mov	r5, r2
1778:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *p = *path;
 1807              		.loc 1 1778 0
 1808 0006 0268     		ldr	r2, [r0, #0]
 1809              	.LVL53:
1782:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	vol = p[0] - '0';					/* Is there a drive number? */
 1810              		.loc 1 1782 0
 1811 0008 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 1812 000a 303B     		subs	r3, r3, #48
 1813              	.LVL54:
1783:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 1814              		.loc 1 1783 0
 1815 000c 092B     		cmp	r3, #9
 1816 000e 05D8     		bhi	.L50
 1817              	.LVL55:
1783:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol <= 9 && p[1] == ':') {		/* Found a drive number, get and strip it */
 1818              		.loc 1 1783 0 is_stmt 0 discriminator 1
 1819 0010 5478     		ldrb	r4, [r2, #1]	@ zero_extendqisi2
 1820 0012 3A2C     		cmp	r4, #58
 1821 0014 02D1     		bne	.L50
 1822              	.LVL56:
1784:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		p += 2; *path = p;				/* Return pointer to the path name */
 1823              		.loc 1 1784 0 is_stmt 1
 1824 0016 0232     		adds	r2, r2, #2
 1825 0018 0260     		str	r2, [r0, #0]
 1826 001a 01E0     		b	.L51
 1827              	.LVL57:
 1828              	.L50:
1787:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		vol = CurrVol;					/* Use current drive */
 1829              		.loc 1 1787 0
 1830 001c BC4B     		ldr	r3, .L87
 1831              	.LVL58:
 1832 001e 1B78     		ldrb	r3, [r3, #0]	@ zero_extendqisi2
 1833              	.LVL59:
 1834              	.L51:
1794:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol >= _VOLUMES) 				/* Is the drive number valid? */
 1835              		.loc 1 1794 0
 1836 0020 002B     		cmp	r3, #0
 1837 0022 40F06881 		bne	.L64
1796:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*rfs = fs = FatFs[vol];				/* Return pointer to the corresponding file system object */
 1838              		.loc 1 1796 0
 1839 0026 BB48     		ldr	r0, .L87+4
 1840              	.LVL60:
 1841 0028 0468     		ldr	r4, [r0, #0]
 1842              	.LVL61:
 1843 002a 0C60     		str	r4, [r1, #0]
1797:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 1844              		.loc 1 1797 0
 1845 002c 002C     		cmp	r4, #0
 1846 002e 00F06581 		beq	.L65
1801:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->fs_type) {					/* If the logical drive has been mounted */
 1847              		.loc 1 1801 0
 1848 0032 2178     		ldrb	r1, [r4, #0]	@ zero_extendqisi2
 1849              	.LVL62:
 1850 0034 71B1     		cbz	r1, .L53
1802:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		stat = disk_status(fs->drv);
 1851              		.loc 1 1802 0
 1852 0036 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 1853 0038 B74A     		ldr	r2, .L87+8
 1854              	.LVL63:
 1855 003a 9047     		blx	r2
 1856              	.LVL64:
1803:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized (has not been changed)
 1857              		.loc 1 1803 0
 1858 003c C307     		lsls	r3, r0, #31
 1859 003e 09D4     		bmi	.L53
1805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (chk_wp && (stat & STA_PROTECT))	/* Check write protection if needed */
 1860              		.loc 1 1805 0
 1861 0040 002D     		cmp	r5, #0
 1862 0042 00F05E81 		beq	.L66
1806:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_WRITE_PROTECTED;
 1863              		.loc 1 1806 0 discriminator 1
 1864 0046 10F0040F 		tst	r0, #4
 1865 004a 0CBF     		ite	eq
 1866 004c 0020     		moveq	r0, #0
 1867 004e 0A20     		movne	r0, #10
 1868              	.LVL65:
 1869 0050 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1870              	.L53:
1815:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fs_type = 0;					/* Clear the file system object */
 1871              		.loc 1 1815 0
 1872 0054 0020     		movs	r0, #0
 1873 0056 2070     		strb	r0, [r4, #0]
1816:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->drv = (BYTE)LD2PD(vol);			/* Bind the logical drive and a physical drive */
 1874              		.loc 1 1816 0
 1875 0058 6070     		strb	r0, [r4, #1]
1817:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	stat = disk_initialize(fs->drv);	/* Initialize low level disk I/O layer */
 1876              		.loc 1 1817 0
 1877 005a B04B     		ldr	r3, .L87+12
 1878 005c 9847     		blx	r3
 1879              	.LVL66:
1818:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 1880              		.loc 1 1818 0
 1881 005e C107     		lsls	r1, r0, #31
 1882 0060 00F15281 		bmi	.L68
1825:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1883              		.loc 1 1825 0
 1884 0064 15B1     		cbz	r5, .L54
1825:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (chk_wp && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 1885              		.loc 1 1825 0 is_stmt 0 discriminator 1
 1886 0066 4207     		lsls	r2, r0, #29
 1887 0068 00F16681 		bmi	.L69
 1888              	.L54:
 1889              	.LVL67:
1829:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 1890              		.loc 1 1829 0 is_stmt 1
 1891 006c 0021     		movs	r1, #0
 1892 006e 2046     		mov	r0, r4
 1893              	.LVL68:
 1894 0070 AB4D     		ldr	r5, .L87+16
 1895 0072 A847     		blx	r5
 1896              	.LVL69:
1830:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == 1) {						/* Not an FAT-VBR, the disk may be partitioned */
 1897              		.loc 1 1830 0
 1898 0074 0128     		cmp	r0, #1
 1899 0076 17D1     		bne	.L70
 1900              	.LVL70:
1833:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (tbl[4]) {									/* Is the partition existing? */
 1901              		.loc 1 1833 0
 1902 0078 94F8F601 		ldrb	r0, [r4, #502]	@ zero_extendqisi2
 1903              	.LVL71:
 1904 007c 0028     		cmp	r0, #0
 1905 007e 00F06181 		beq	.L85
1834:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bsect = LD_DWORD(&tbl[8]);					/* Partition offset in LBA */
 1906              		.loc 1 1834 0
 1907 0082 94F8FC01 		ldrb	r0, [r4, #508]	@ zero_extendqisi2
 1908 0086 94F8FD31 		ldrb	r3, [r4, #509]	@ zero_extendqisi2
 1909 008a 0204     		lsls	r2, r0, #16
 1910 008c 94F8FA11 		ldrb	r1, [r4, #506]	@ zero_extendqisi2
 1911 0090 42EA036E 		orr	lr, r2, r3, lsl #24
 1912 0094 94F8FBC1 		ldrb	ip, [r4, #507]	@ zero_extendqisi2
 1913 0098 4EEA0106 		orr	r6, lr, r1
 1914 009c 46EA0C26 		orr	r6, r6, ip, lsl #8
 1915              	.LVL72:
1835:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fmt = check_fs(fs, bsect);					/* Check the partition */
 1916              		.loc 1 1835 0
 1917 00a0 2046     		mov	r0, r4
 1918 00a2 3146     		mov	r1, r6
 1919 00a4 A847     		blx	r5
 1920              	.LVL73:
 1921 00a6 00E0     		b	.L55
 1922              	.LVL74:
 1923              	.L70:
1829:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fmt = check_fs(fs, bsect = 0);		/* Check sector 0 if it is a VBR */
 1924              		.loc 1 1829 0
 1925 00a8 0026     		movs	r6, #0
 1926              	.LVL75:
 1927              	.L55:
1838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 1928              		.loc 1 1838 0
 1929 00aa 0328     		cmp	r0, #3
 1930 00ac 00F04781 		beq	.L72
1839:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt) return FR_NO_FILESYSTEM;					/* No FAT volume is found */
 1931              		.loc 1 1839 0
 1932 00b0 0028     		cmp	r0, #0
 1933 00b2 40F04781 		bne	.L85
1843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (LD_WORD(fs->win+BPB_BytsPerSec) != SS(fs))		/* (BPB_BytsPerSec must be equal to the physical s
 1934              		.loc 1 1843 0
 1935 00b6 94F84010 		ldrb	r1, [r4, #64]	@ zero_extendqisi2
 1936 00ba 94F83FE0 		ldrb	lr, [r4, #63]	@ zero_extendqisi2
 1937 00be 4EEA012C 		orr	ip, lr, r1, lsl #8
 1938 00c2 BCF5007F 		cmp	ip, #512
 1939 00c6 40F03D81 		bne	.L85
1846:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fasize = LD_WORD(fs->win+BPB_FATSz16);				/* Number of sectors per FAT */
 1940              		.loc 1 1846 0
 1941 00ca 94F84B50 		ldrb	r5, [r4, #75]	@ zero_extendqisi2
 1942 00ce 94F84A20 		ldrb	r2, [r4, #74]	@ zero_extendqisi2
 1943              	.LVL76:
1847:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 1944              		.loc 1 1847 0
 1945 00d2 52EA0520 		orrs	r0, r2, r5, lsl #8
 1946              	.LVL77:
 1947 00d6 0ED1     		bne	.L56
1847:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fasize) fasize = LD_DWORD(fs->win+BPB_FATSz32);
 1948              		.loc 1 1847 0 is_stmt 0 discriminator 1
 1949 00d8 94F85A20 		ldrb	r2, [r4, #90]	@ zero_extendqisi2
 1950              	.LVL78:
 1951 00dc 94F85B50 		ldrb	r5, [r4, #91]	@ zero_extendqisi2
 1952 00e0 1104     		lsls	r1, r2, #16
 1953 00e2 94F858E0 		ldrb	lr, [r4, #88]	@ zero_extendqisi2
 1954 00e6 41EA056C 		orr	ip, r1, r5, lsl #24
 1955 00ea 94F85930 		ldrb	r3, [r4, #89]	@ zero_extendqisi2
 1956 00ee 4CEA0E00 		orr	r0, ip, lr
 1957              	.LVL79:
 1958 00f2 40EA0320 		orr	r0, r0, r3, lsl #8
 1959              	.LVL80:
 1960              	.L56:
1850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 1961              		.loc 1 1850 0 is_stmt 1
 1962 00f6 94F84450 		ldrb	r5, [r4, #68]	@ zero_extendqisi2
 1963              	.LVL81:
1848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fsize = fasize;
 1964              		.loc 1 1848 0
 1965 00fa 2062     		str	r0, [r4, #32]
1851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 1966              		.loc 1 1851 0
 1967 00fc 691E     		subs	r1, r5, #1
 1968 00fe CBB2     		uxtb	r3, r1
 1969 0100 012B     		cmp	r3, #1
1850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_fats = b = fs->win[BPB_NumFATs];				/* Number of FAT copies */
 1970              		.loc 1 1850 0
 1971 0102 E570     		strb	r5, [r4, #3]
1851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (b != 1 && b != 2) return FR_NO_FILESYSTEM;		/* (Must be 1 or 2) */
 1972              		.loc 1 1851 0
 1973 0104 00F21E81 		bhi	.L85
 1974              	.LVL82:
1854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->csize = b = fs->win[BPB_SecPerClus];			/* Number of sectors per cluster */
 1975              		.loc 1 1854 0
 1976 0108 94F84110 		ldrb	r1, [r4, #65]	@ zero_extendqisi2
 1977              	.LVL83:
 1978 010c A170     		strb	r1, [r4, #2]
1855:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 1979              		.loc 1 1855 0
 1980 010e 0029     		cmp	r1, #0
 1981 0110 00F01881 		beq	.L85
1855:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!b || (b & (b - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 1982              		.loc 1 1855 0 is_stmt 0 discriminator 2
 1983 0114 4A1E     		subs	r2, r1, #1
 1984 0116 0A42     		tst	r2, r1
 1985 0118 40F01481 		bne	.L85
1857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 1986              		.loc 1 1857 0 is_stmt 1
 1987 011c 94F846C0 		ldrb	ip, [r4, #70]	@ zero_extendqisi2
 1988 0120 94F845E0 		ldrb	lr, [r4, #69]	@ zero_extendqisi2
 1989 0124 4EEA0C22 		orr	r2, lr, ip, lsl #8
1858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector alig
 1990              		.loc 1 1858 0
 1991 0128 1307     		lsls	r3, r2, #28
1857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_rootdir = LD_WORD(fs->win+BPB_RootEntCnt);	/* Number of root directory entries */
 1992              		.loc 1 1857 0
 1993 012a 2281     		strh	r2, [r4, #8]	@ movhi
1858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->n_rootdir % (SS(fs) / 32)) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be sector alig
 1994              		.loc 1 1858 0
 1995 012c 40F00A81 		bne	.L85
1860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	tsect = LD_WORD(fs->win+BPB_TotSec16);				/* Number of sectors on the volume */
 1996              		.loc 1 1860 0
 1997 0130 94F84870 		ldrb	r7, [r4, #72]	@ zero_extendqisi2
 1998 0134 94F84730 		ldrb	r3, [r4, #71]	@ zero_extendqisi2
 1999              	.LVL84:
1861:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 2000              		.loc 1 1861 0
 2001 0138 53EA0723 		orrs	r3, r3, r7, lsl #8
 2002              	.LVL85:
 2003 013c 0ED1     		bne	.L57
1861:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!tsect) tsect = LD_DWORD(fs->win+BPB_TotSec32);
 2004              		.loc 1 1861 0 is_stmt 0 discriminator 1
 2005 013e 94F85670 		ldrb	r7, [r4, #86]	@ zero_extendqisi2
 2006 0142 94F857C0 		ldrb	ip, [r4, #87]	@ zero_extendqisi2
 2007 0146 3B04     		lsls	r3, r7, #16
 2008              	.LVL86:
 2009 0148 94F85470 		ldrb	r7, [r4, #84]	@ zero_extendqisi2
 2010 014c 43EA0C63 		orr	r3, r3, ip, lsl #24
 2011 0150 94F855E0 		ldrb	lr, [r4, #85]	@ zero_extendqisi2
 2012 0154 43EA070C 		orr	ip, r3, r7
 2013 0158 4CEA0E23 		orr	r3, ip, lr, lsl #8
 2014              	.LVL87:
 2015              	.L57:
1863:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	nrsv = LD_WORD(fs->win+BPB_RsvdSecCnt);				/* Number of reserved sectors */
 2016              		.loc 1 1863 0 is_stmt 1
 2017 015c 94F843E0 		ldrb	lr, [r4, #67]	@ zero_extendqisi2
 2018 0160 94F84270 		ldrb	r7, [r4, #66]	@ zero_extendqisi2
 2019              	.LVL88:
1864:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!nrsv) return FR_NO_FILESYSTEM;					/* (BPB_RsvdSecCnt must not be 0) */
 2020              		.loc 1 1864 0
 2021 0164 57EA0E2C 		orrs	ip, r7, lr, lsl #8
 2022 0168 00F0EC80 		beq	.L85
1852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fasize *= b;										/* Number of sectors for FAT area */
 2023              		.loc 1 1852 0
 2024 016c 05FB00F8 		mul	r8, r5, r0
1867:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / 32);	/* RSV+FAT+DIR */
 2025              		.loc 1 1867 0
 2026 0170 0CEB1217 		add	r7, ip, r2, lsr #4
 2027              	.LVL89:
 2028 0174 4744     		add	r7, r7, r8
 2029              	.LVL90:
1868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 2030              		.loc 1 1868 0
 2031 0176 BB42     		cmp	r3, r7
 2032 0178 C0F0E480 		bcc	.L85
1869:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 2033              		.loc 1 1869 0
 2034 017c DB1B     		subs	r3, r3, r7
 2035              	.LVL91:
 2036 017e B3FBF1F3 		udiv	r3, r3, r1
 2037              	.LVL92:
1870:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 2038              		.loc 1 1870 0
 2039 0182 002B     		cmp	r3, #0
 2040 0184 00F0DE80 		beq	.L85
 2041              	.LVL93:
1872:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 2042              		.loc 1 1872 0
 2043 0188 40F6F571 		movw	r1, #4085
 2044              	.LVL94:
1871:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fmt = FS_FAT12;
 2045              		.loc 1 1871 0
 2046 018c 0125     		movs	r5, #1
 2047              	.LVL95:
1872:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 2048              		.loc 1 1872 0
 2049 018e 8B42     		cmp	r3, r1
 2050 0190 05D9     		bls	.L59
 2051              	.LVL96:
 2052 0192 4FF6F575 		movw	r5, #65525
 2053 0196 AB42     		cmp	r3, r5
 2054 0198 8CBF     		ite	hi
 2055 019a 0325     		movhi	r5, #3
 2056 019c 0225     		movls	r5, #2
 2057              	.LVL97:
 2058              	.L59:
1876:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 2059              		.loc 1 1876 0
 2060 019e 0233     		adds	r3, r3, #2
 2061              	.LVL98:
1877:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 2062              		.loc 1 1877 0
 2063 01a0 BF19     		adds	r7, r7, r6
 2064              	.LVL99:
1878:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 2065              		.loc 1 1878 0
 2066 01a2 06EB0C01 		add	r1, r6, ip
1879:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
 2067              		.loc 1 1879 0
 2068 01a6 032D     		cmp	r5, #3
1876:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 2069              		.loc 1 1876 0
 2070 01a8 E361     		str	r3, [r4, #28]
1877:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->database = bsect + sysect;						/* Data start sector */
 2071              		.loc 1 1877 0
 2072 01aa E762     		str	r7, [r4, #44]
1878:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 2073              		.loc 1 1878 0
 2074 01ac 6162     		str	r1, [r4, #36]
1879:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
 2075              		.loc 1 1879 0
 2076 01ae 14D1     		bne	.L60
1880:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 2077              		.loc 1 1880 0
 2078 01b0 002A     		cmp	r2, #0
 2079 01b2 40F0C780 		bne	.L85
1881:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->dirbase = LD_DWORD(fs->win+BPB_RootClus);	/* Root directory start cluster */
 2080              		.loc 1 1881 0
 2081 01b6 94F86210 		ldrb	r1, [r4, #98]	@ zero_extendqisi2
 2082 01ba 94F863C0 		ldrb	ip, [r4, #99]	@ zero_extendqisi2
 2083 01be 0A04     		lsls	r2, r1, #16
 2084 01c0 94F86010 		ldrb	r1, [r4, #96]	@ zero_extendqisi2
 2085 01c4 42EA0C62 		orr	r2, r2, ip, lsl #24
 2086 01c8 94F861E0 		ldrb	lr, [r4, #97]	@ zero_extendqisi2
 2087 01cc 42EA010C 		orr	ip, r2, r1
 2088 01d0 4CEA0E22 		orr	r2, ip, lr, lsl #8
 2089 01d4 A262     		str	r2, [r4, #40]
1882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		szbfat = fs->n_fatent * 4;						/* (Required FAT size) */
 2090              		.loc 1 1882 0
 2091 01d6 9B00     		lsls	r3, r3, #2
 2092              	.LVL100:
 2093 01d8 0FE0     		b	.L61
 2094              	.LVL101:
 2095              	.L60:
1884:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 2096              		.loc 1 1884 0
 2097 01da 002A     		cmp	r2, #0
 2098 01dc 00F0B280 		beq	.L85
1885:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 2099              		.loc 1 1885 0
 2100 01e0 08EB0102 		add	r2, r8, r1
1887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 2101              		.loc 1 1887 0
 2102 01e4 022D     		cmp	r5, #2
1885:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 2103              		.loc 1 1885 0
 2104 01e6 A262     		str	r2, [r4, #40]
1887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 2105              		.loc 1 1887 0
 2106 01e8 01D1     		bne	.L62
1887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 2107              		.loc 1 1887 0 is_stmt 0 discriminator 1
 2108 01ea 5B00     		lsls	r3, r3, #1
 2109 01ec 05E0     		b	.L61
 2110              	.L62:
1887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 2111              		.loc 1 1887 0 discriminator 2
 2112 01ee 0321     		movs	r1, #3
 2113 01f0 5943     		muls	r1, r3, r1
 2114 01f2 03F00103 		and	r3, r3, #1
 2115 01f6 03EB5103 		add	r3, r3, r1, lsr #1
 2116              	.L61:
 2117              	.LVL102:
1889:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (FAT size must not be less than FAT sectors *
 2118              		.loc 1 1889 0 is_stmt 1
 2119 01fa 03F5FE73 		add	r3, r3, #508
 2120              	.LVL103:
 2121 01fe DA1C     		adds	r2, r3, #3
 2122 0200 B0EB522F 		cmp	r0, r2, lsr #9
 2123 0204 C0F0A180 		bcc	.L86
1895:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->last_clust = 0;
 2124              		.loc 1 1895 0
 2125 0208 0023     		movs	r3, #0
 2126              	.LVL104:
1894:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
 2127              		.loc 1 1894 0
 2128 020a 4FF0FF30 		mov	r0, #-1
1898:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
 2129              		.loc 1 1898 0
 2130 020e 032D     		cmp	r5, #3
1894:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->free_clust = 0xFFFFFFFF;
 2131              		.loc 1 1894 0
 2132 0210 2061     		str	r0, [r4, #16]
1895:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->last_clust = 0;
 2133              		.loc 1 1895 0
 2134 0212 E360     		str	r3, [r4, #12]
1898:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == FS_FAT32) {
 2135              		.loc 1 1898 0
 2136 0214 5FD1     		bne	.L63
1900:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 2137              		.loc 1 1900 0
 2138 0216 94F86410 		ldrb	r1, [r4, #100]	@ zero_extendqisi2
 2139 021a 94F865C0 		ldrb	ip, [r4, #101]	@ zero_extendqisi2
1899:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	 	fs->fsi_flag = 0;
 2140              		.loc 1 1899 0
 2141 021e 6371     		strb	r3, [r4, #5]
1900:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->fsi_sector = bsect + LD_WORD(fs->win+BPB_FSInfo);
 2142              		.loc 1 1900 0
 2143 0220 41EA0C2E 		orr	lr, r1, ip, lsl #8
 2144 0224 06EB0E02 		add	r2, r6, lr
 2145              	.LVL105:
 2146 0228 6261     		str	r2, [r4, #20]
1901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 2147              		.loc 1 1901 0
 2148 022a 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2149 022c 04F13401 		add	r1, r4, #52
 2150 0230 0123     		movs	r3, #1
 2151 0232 3C4E     		ldr	r6, .L87+20
 2152              	.LVL106:
 2153 0234 B047     		blx	r6
 2154              	.LVL107:
 2155 0236 0028     		cmp	r0, #0
 2156 0238 4DD1     		bne	.L63
1902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 2157              		.loc 1 1902 0 discriminator 1
 2158 023a 94F833E2 		ldrb	lr, [r4, #563]	@ zero_extendqisi2
 2159 023e 94F832C2 		ldrb	ip, [r4, #562]	@ zero_extendqisi2
1901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 2160              		.loc 1 1901 0 discriminator 1
 2161 0242 394B     		ldr	r3, .L87+24
1902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 2162              		.loc 1 1902 0 discriminator 1
 2163 0244 4CEA0E20 		orr	r0, ip, lr, lsl #8
1901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (disk_read(fs->drv, fs->win, fs->fsi_sector, 1) == RES_OK &&
 2164              		.loc 1 1901 0 discriminator 1
 2165 0248 02B2     		sxth	r2, r0
 2166 024a 9A42     		cmp	r2, r3
 2167 024c 43D1     		bne	.L63
1903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 2168              		.loc 1 1903 0
 2169 024e 94F83620 		ldrb	r2, [r4, #54]	@ zero_extendqisi2
 2170 0252 94F83700 		ldrb	r0, [r4, #55]	@ zero_extendqisi2
 2171 0256 1104     		lsls	r1, r2, #16
 2172 0258 94F834C0 		ldrb	ip, [r4, #52]	@ zero_extendqisi2
 2173 025c 41EA006E 		orr	lr, r1, r0, lsl #24
 2174 0260 94F83530 		ldrb	r3, [r4, #53]	@ zero_extendqisi2
 2175 0264 4EEA0C00 		orr	r0, lr, ip
1902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 2176              		.loc 1 1902 0
 2177 0268 304A     		ldr	r2, .L87+28
1903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 2178              		.loc 1 1903 0
 2179 026a 40EA0321 		orr	r1, r0, r3, lsl #8
1902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_WORD(fs->win+BS_55AA) == 0xAA55 &&
 2180              		.loc 1 1902 0
 2181 026e 9142     		cmp	r1, r2
 2182 0270 31D1     		bne	.L63
1904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 2183              		.loc 1 1904 0
 2184 0272 94F81A32 		ldrb	r3, [r4, #538]	@ zero_extendqisi2
 2185 0276 94F81BE2 		ldrb	lr, [r4, #539]	@ zero_extendqisi2
 2186 027a 1904     		lsls	r1, r3, #16
 2187 027c 94F81822 		ldrb	r2, [r4, #536]	@ zero_extendqisi2
 2188 0280 41EA0E60 		orr	r0, r1, lr, lsl #24
 2189 0284 94F81912 		ldrb	r1, [r4, #537]	@ zero_extendqisi2
 2190 0288 40EA020C 		orr	ip, r0, r2
1903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 2191              		.loc 1 1903 0
 2192 028c 284B     		ldr	r3, .L87+32
1904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_StrucSig) == 0x61417272) {
 2193              		.loc 1 1904 0
 2194 028e 4CEA012E 		orr	lr, ip, r1, lsl #8
1903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			LD_DWORD(fs->win+FSI_LeadSig) == 0x41615252 &&
 2195              		.loc 1 1903 0
 2196 0292 9E45     		cmp	lr, r3
 2197 0294 1FD1     		bne	.L63
1905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 2198              		.loc 1 1905 0
 2199 0296 94F82232 		ldrb	r3, [r4, #546]	@ zero_extendqisi2
 2200 029a 94F82322 		ldrb	r2, [r4, #547]	@ zero_extendqisi2
 2201 029e 1904     		lsls	r1, r3, #16
 2202 02a0 94F82002 		ldrb	r0, [r4, #544]	@ zero_extendqisi2
 2203 02a4 41EA0263 		orr	r3, r1, r2, lsl #24
 2204 02a8 94F821E2 		ldrb	lr, [r4, #545]	@ zero_extendqisi2
1906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 2205              		.loc 1 1906 0
 2206 02ac 94F81E22 		ldrb	r2, [r4, #542]	@ zero_extendqisi2
1905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 2207              		.loc 1 1905 0
 2208 02b0 43EA000C 		orr	ip, r3, r0
1906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 2209              		.loc 1 1906 0
 2210 02b4 94F81F02 		ldrb	r0, [r4, #543]	@ zero_extendqisi2
1905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 2211              		.loc 1 1905 0
 2212 02b8 4CEA0E21 		orr	r1, ip, lr, lsl #8
1906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 2213              		.loc 1 1906 0
 2214 02bc 1304     		lsls	r3, r2, #16
 2215 02be 94F81CE2 		ldrb	lr, [r4, #540]	@ zero_extendqisi2
1905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->last_clust = LD_DWORD(fs->win+FSI_Nxt_Free);
 2216              		.loc 1 1905 0
 2217 02c2 E160     		str	r1, [r4, #12]
1906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust = LD_DWORD(fs->win+FSI_Free_Count);
 2218              		.loc 1 1906 0
 2219 02c4 94F81D22 		ldrb	r2, [r4, #541]	@ zero_extendqisi2
 2220 02c8 43EA0061 		orr	r1, r3, r0, lsl #24
 2221 02cc 41EA0E0C 		orr	ip, r1, lr
 2222 02d0 4CEA0220 		orr	r0, ip, r2, lsl #8
 2223 02d4 2061     		str	r0, [r4, #16]
 2224              	.L63:
1911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2225              		.loc 1 1911 0
 2226 02d6 1748     		ldr	r0, .L87+36
1910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->fs_type = fmt;		/* FAT sub-type */
 2227              		.loc 1 1910 0
 2228 02d8 2570     		strb	r5, [r4, #0]
1911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2229              		.loc 1 1911 0
 2230 02da 0288     		ldrh	r2, [r0, #0]
 2231 02dc 511C     		adds	r1, r2, #1
 2232 02de 1FFA81FC 		uxth	ip, r1
 2233 02e2 A0F800C0 		strh	ip, [r0, #0]	@ movhi
1912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 2234              		.loc 1 1912 0
 2235 02e6 0020     		movs	r0, #0
1911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->id = ++Fsid;		/* File system mount ID */
 2236              		.loc 1 1911 0
 2237 02e8 A4F806C0 		strh	ip, [r4, #6]	@ movhi
1912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->winsect = 0;		/* Invalidate sector cache */
 2238              		.loc 1 1912 0
 2239 02ec 2063     		str	r0, [r4, #48]
1913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->wflag = 0;
 2240              		.loc 1 1913 0
 2241 02ee 2071     		strb	r0, [r4, #4]
1915:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fs->cdir = 0;			/* Current directory (root dir) */
 2242              		.loc 1 1915 0
 2243 02f0 A061     		str	r0, [r4, #24]
1921:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 2244              		.loc 1 1921 0
 2245 02f2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2246              	.LVL108:
 2247              	.L64:
1795:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
 2248              		.loc 1 1795 0
 2249 02f6 0B20     		movs	r0, #11
 2250              	.LVL109:
 2251 02f8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2252              	.LVL110:
 2253              	.L65:
1797:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 2254              		.loc 1 1797 0
 2255 02fc 0C20     		movs	r0, #12
 2256 02fe BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2257              	.LVL111:
 2258              	.L66:
1808:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			return FR_OK;				/* The file system object is valid */
 2259              		.loc 1 1808 0
 2260 0302 2846     		mov	r0, r5
 2261              	.LVL112:
 2262 0304 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2263              	.LVL113:
 2264              	.L68:
1819:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no media or hard error */
 2265              		.loc 1 1819 0
 2266 0308 0320     		movs	r0, #3
 2267              	.LVL114:
 2268 030a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2269              	.L88:
 2270 030e 00BF     		.align	2
 2271              	.L87:
 2272 0310 00000000 		.word	.LANCHOR0
 2273 0314 00000000 		.word	.LANCHOR1
 2274 0318 00000000 		.word	disk_status
 2275 031c 00000000 		.word	disk_initialize
 2276 0320 00000000 		.word	check_fs
 2277 0324 00000000 		.word	disk_read
 2278 0328 55AAFFFF 		.word	-21931
 2279 032c 52526141 		.word	1096897106
 2280 0330 72724161 		.word	1631679090
 2281 0334 00000000 		.word	.LANCHOR2
 2282              	.LVL115:
 2283              	.L69:
1826:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_WRITE_PROTECTED;
 2284              		.loc 1 1826 0
 2285 0338 0A20     		movs	r0, #10
 2286              	.LVL116:
 2287 033a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2288              	.LVL117:
 2289              	.L72:
1838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fmt == 3) return FR_DISK_ERR;
 2290              		.loc 1 1838 0
 2291 033e 0120     		movs	r0, #1
 2292              	.LVL118:
 2293 0340 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2294              	.LVL119:
 2295              	.L85:
1884:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 2296              		.loc 1 1884 0
 2297 0344 0D20     		movs	r0, #13
 2298 0346 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2299              	.LVL120:
 2300              	.L86:
1890:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_NO_FILESYSTEM;
 2301              		.loc 1 1890 0
 2302 034a 0D20     		movs	r0, #13
1922:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 2303              		.loc 1 1922 0
 2304 034c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2305              		.cfi_endproc
 2306              	.LFE21:
 2308              		.section	.text.clust2sect,"ax",%progbits
 2309              		.align	1
 2310              		.global	clust2sect
 2311              		.thumb
 2312              		.thumb_func
 2314              	clust2sect:
 2315              	.LFB6:
 592:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2316              		.loc 1 592 0
 2317              		.cfi_startproc
 2318              		@ args = 0, pretend = 0, frame = 0
 2319              		@ frame_needed = 0, uses_anonymous_args = 0
 2320              		@ link register save eliminated.
 2321              	.LVL121:
 594:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 2322              		.loc 1 594 0
 2323 0000 C369     		ldr	r3, [r0, #28]
 593:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	clst -= 2;
 2324              		.loc 1 593 0
 2325 0002 0239     		subs	r1, r1, #2
 2326              	.LVL122:
 594:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 2327              		.loc 1 594 0
 2328 0004 023B     		subs	r3, r3, #2
 2329 0006 9942     		cmp	r1, r3
 595:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return clst * fs->csize + fs->database;
 2330              		.loc 1 595 0
 2331 0008 3DBF     		ittte	cc
 2332 000a 8278     		ldrbcc	r2, [r0, #2]	@ zero_extendqisi2
 2333 000c C36A     		ldrcc	r3, [r0, #44]
 2334 000e 02FB0130 		mlacc	r0, r2, r1, r3
 2335              	.LVL123:
 594:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
 2336              		.loc 1 594 0
 2337 0012 0020     		movcs	r0, #0
 596:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 2338              		.loc 1 596 0
 2339 0014 7047     		bx	lr
 2340              		.cfi_endproc
 2341              	.LFE6:
 2343              		.section	.text.get_fat,"ax",%progbits
 2344              		.align	1
 2345              		.global	get_fat
 2346              		.thumb
 2347              		.thumb_func
 2349              	get_fat:
 2350              	.LFB7:
 610:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2351              		.loc 1 610 0
 2352              		.cfi_startproc
 2353              		@ args = 0, pretend = 0, frame = 0
 2354              		@ frame_needed = 0, uses_anonymous_args = 0
 2355              	.LVL124:
 615:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 2356              		.loc 1 615 0
 2357 0000 0129     		cmp	r1, #1
 610:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2358              		.loc 1 610 0
 2359 0002 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2360              	.LCFI7:
 2361              		.cfi_def_cfa_offset 24
 2362              		.cfi_offset 14, -4
 2363              		.cfi_offset 8, -8
 2364              		.cfi_offset 7, -12
 2365              		.cfi_offset 6, -16
 2366              		.cfi_offset 5, -20
 2367              		.cfi_offset 4, -24
 610:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2368              		.loc 1 610 0
 2369 0006 0446     		mov	r4, r0
 2370 0008 0D46     		mov	r5, r1
 615:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 2371              		.loc 1 615 0
 2372 000a 61D9     		bls	.L99
 615:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent)	/* Chack range */
 2373              		.loc 1 615 0 is_stmt 0 discriminator 1
 2374 000c C369     		ldr	r3, [r0, #28]
 2375 000e 9942     		cmp	r1, r3
 2376 0010 61D2     		bcs	.L100
 2377              	.LVL125:
 2378              	.LBB20:
 2379              	.LBB21:
 618:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	switch (fs->fs_type) {
 2380              		.loc 1 618 0 is_stmt 1
 2381 0012 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 2382 0014 022B     		cmp	r3, #2
 2383 0016 29D0     		beq	.L96
 2384 0018 032B     		cmp	r3, #3
 2385 001a 39D0     		beq	.L97
 2386 001c 012B     		cmp	r3, #1
 2387 001e 53D1     		bne	.L105
 2388              	.LVL126:
 620:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		bc = (UINT)clst; bc += bc / 2;
 2389              		.loc 1 620 0
 2390 0020 01EB5106 		add	r6, r1, r1, lsr #1
 2391              	.LVL127:
 621:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 2392              		.loc 1 621 0
 2393 0024 416A     		ldr	r1, [r0, #36]
 2394              	.LVL128:
 2395 0026 2D4F     		ldr	r7, .L107
 2396 0028 01EB5621 		add	r1, r1, r6, lsr #9
 2397 002c B847     		blx	r7
 2398              	.LVL129:
 2399 002e 0028     		cmp	r0, #0
 2400 0030 4AD1     		bne	.L105
 623:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 2401              		.loc 1 623 0
 2402 0032 606A     		ldr	r0, [r4, #36]
 622:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 2403              		.loc 1 622 0
 2404 0034 F305     		lsls	r3, r6, #23
 2405 0036 0136     		adds	r6, r6, #1
 2406              	.LVL130:
 2407 0038 04EBD352 		add	r2, r4, r3, lsr #23
 623:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 2408              		.loc 1 623 0
 2409 003c 00EB5621 		add	r1, r0, r6, lsr #9
 2410 0040 2046     		mov	r0, r4
 622:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wc = fs->win[bc % SS(fs)]; bc++;
 2411              		.loc 1 622 0
 2412 0042 92F83480 		ldrb	r8, [r2, #52]	@ zero_extendqisi2
 2413              	.LVL131:
 623:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (bc / SS(fs)))) break;
 2414              		.loc 1 623 0
 2415 0046 B847     		blx	r7
 2416 0048 0028     		cmp	r0, #0
 2417 004a 3DD1     		bne	.L105
 624:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 2418              		.loc 1 624 0
 2419 004c F605     		lsls	r6, r6, #23
 2420              	.LVL132:
 2421 004e 04EBD654 		add	r4, r4, r6, lsr #23
 2422              	.LVL133:
 2423 0052 94F834C0 		ldrb	ip, [r4, #52]	@ zero_extendqisi2
 625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2424              		.loc 1 625 0
 2425 0056 EA07     		lsls	r2, r5, #31
 624:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wc |= fs->win[bc % SS(fs)] << 8;
 2426              		.loc 1 624 0
 2427 0058 48EA0C20 		orr	r0, r8, ip, lsl #8
 2428              	.LVL134:
 625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 2429              		.loc 1 625 0
 2430 005c 02D5     		bpl	.L98
 2431 005e 0009     		lsrs	r0, r0, #4
 2432              	.LVL135:
 2433 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2434              	.LVL136:
 2435              	.L98:
 2436 0064 0105     		lsls	r1, r0, #20
 2437 0066 080D     		lsrs	r0, r1, #20
 2438              	.LVL137:
 2439 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2440              	.LVL138:
 2441              	.L96:
 628:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)))) break;
 2442              		.loc 1 628 0
 2443 006c 406A     		ldr	r0, [r0, #36]
 2444              	.LVL139:
 2445 006e 1B4A     		ldr	r2, .L107
 2446 0070 00EB1121 		add	r1, r0, r1, lsr #8
 2447 0074 2046     		mov	r0, r4
 2448 0076 9047     		blx	r2
 2449 0078 30BB     		cbnz	r0, .L105
 629:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		p = &fs->win[clst * 2 % SS(fs)];
 2450              		.loc 1 629 0
 2451 007a 2D06     		lsls	r5, r5, #24
 2452              	.LVL140:
 630:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return LD_WORD(p);
 2453              		.loc 1 630 0
 2454 007c 04EBD554 		add	r4, r4, r5, lsr #23
 2455              	.LVL141:
 2456 0080 94F835E0 		ldrb	lr, [r4, #53]	@ zero_extendqisi2
 2457 0084 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 2458 0088 43EA0E20 		orr	r0, r3, lr, lsl #8
 2459 008c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2460              	.LVL142:
 2461              	.L97:
 633:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)))) break;
 2462              		.loc 1 633 0
 2463 0090 416A     		ldr	r1, [r0, #36]
 2464              	.LVL143:
 2465 0092 124A     		ldr	r2, .L107
 2466 0094 01EBD511 		add	r1, r1, r5, lsr #7
 2467 0098 9047     		blx	r2
 2468              	.LVL144:
 2469 009a A8B9     		cbnz	r0, .L105
 634:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		p = &fs->win[clst * 4 % SS(fs)];
 2470              		.loc 1 634 0
 2471 009c 6D06     		lsls	r5, r5, #25
 2472              	.LVL145:
 635:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return LD_DWORD(p) & 0x0FFFFFFF;
 2473              		.loc 1 635 0
 2474 009e 04EBD554 		add	r4, r4, r5, lsr #23
 2475              	.LVL146:
 2476 00a2 94F83610 		ldrb	r1, [r4, #54]	@ zero_extendqisi2
 2477 00a6 94F83730 		ldrb	r3, [r4, #55]	@ zero_extendqisi2
 2478 00aa 0A04     		lsls	r2, r1, #16
 2479 00ac 94F834E0 		ldrb	lr, [r4, #52]	@ zero_extendqisi2
 2480 00b0 42EA0368 		orr	r8, r2, r3, lsl #24
 2481 00b4 48EA0E00 		orr	r0, r8, lr
 2482 00b8 94F83580 		ldrb	r8, [r4, #53]	@ zero_extendqisi2
 2483 00bc 40EA082C 		orr	ip, r0, r8, lsl #8
 2484 00c0 2CF07040 		bic	r0, ip, #-268435456
 2485 00c4 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2486              	.LVL147:
 2487              	.L105:
 638:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return 0xFFFFFFFF;	/* An error occurred at the disk I/O layer */
 2488              		.loc 1 638 0
 2489 00c8 4FF0FF30 		mov	r0, #-1
 2490 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2491              	.LVL148:
 2492              	.L99:
 2493              	.LBE21:
 2494              	.LBE20:
 616:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return 1;
 2495              		.loc 1 616 0
 2496 00d0 0120     		movs	r0, #1
 2497 00d2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2498              	.L100:
 2499 00d6 0120     		movs	r0, #1
 639:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 2500              		.loc 1 639 0
 2501 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2502              	.L108:
 2503              		.align	2
 2504              	.L107:
 2505 00dc 00000000 		.word	move_window
 2506              		.cfi_endproc
 2507              	.LFE7:
 2509              		.section	.text.dir_sdi,"ax",%progbits
 2510              		.align	1
 2511              		.thumb
 2512              		.thumb_func
 2514              	dir_sdi:
 2515              	.LFB11:
 829:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2516              		.loc 1 829 0
 2517              		.cfi_startproc
 2518              		@ args = 0, pretend = 0, frame = 0
 2519              		@ frame_needed = 0, uses_anonymous_args = 0
 2520              	.LVL149:
 2521 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2522              	.LCFI8:
 2523              		.cfi_def_cfa_offset 24
 2524              		.cfi_offset 14, -4
 2525              		.cfi_offset 7, -8
 2526              		.cfi_offset 6, -12
 2527              		.cfi_offset 5, -16
 2528              		.cfi_offset 4, -20
 2529              		.cfi_offset 3, -24
 829:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2530              		.loc 1 829 0
 2531 0002 0446     		mov	r4, r0
 2532 0004 0D46     		mov	r5, r1
 834:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->index = idx;
 2533              		.loc 1 834 0
 2534 0006 E180     		strh	r1, [r4, #6]	@ movhi
 835:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	clst = dj->sclust;
 2535              		.loc 1 835 0
 2536 0008 8168     		ldr	r1, [r0, #8]
 2537              	.LVL150:
 836:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 2538              		.loc 1 836 0
 2539 000a 0129     		cmp	r1, #1
 2540 000c 3AD0     		beq	.L120
 2541              	.LVL151:
 836:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 1 || clst >= dj->fs->n_fatent)	/* Check start cluster range */
 2542              		.loc 1 836 0 is_stmt 0 discriminator 1
 2543 000e 0368     		ldr	r3, [r0, #0]
 2544 0010 DA69     		ldr	r2, [r3, #28]
 2545 0012 9142     		cmp	r1, r2
 2546 0014 36D2     		bcs	.L120
 838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2547              		.loc 1 838 0 is_stmt 1
 2548 0016 81B9     		cbnz	r1, .L111
 838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!clst && dj->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 2549              		.loc 1 838 0 is_stmt 0 discriminator 1
 2550 0018 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 2551              	.LVL152:
 2552 001a 0328     		cmp	r0, #3
 2553 001c 01D1     		bne	.L112
 839:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		clst = dj->fs->dirbase;
 2554              		.loc 1 839 0 is_stmt 1
 2555 001e 996A     		ldr	r1, [r3, #40]
 2556              	.LVL153:
 841:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 0) {	/* Static table (root-dir in FAT12/16) */
 2557              		.loc 1 841 0
 2558 0020 59B9     		cbnz	r1, .L111
 2559              	.LVL154:
 2560              	.L112:
 843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 2561              		.loc 1 843 0
 2562 0022 1989     		ldrh	r1, [r3, #8]
 2563              	.LVL155:
 842:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->clust = clst;
 2564              		.loc 1 842 0
 2565 0024 0022     		movs	r2, #0
 843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 2566              		.loc 1 843 0
 2567 0026 A942     		cmp	r1, r5
 845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 2568              		.loc 1 845 0
 2569 0028 88BF     		it	hi
 2570 002a 9B6A     		ldrhi	r3, [r3, #40]
 842:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->clust = clst;
 2571              		.loc 1 842 0
 2572 002c E260     		str	r2, [r4, #12]
 845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect = dj->fs->dirbase + idx / (SS(dj->fs) / 32);	/* Sector# */
 2573              		.loc 1 845 0
 2574 002e 84BF     		itt	hi
 2575 0030 03EB1513 		addhi	r3, r3, r5, lsr #4
 2576 0034 2361     		strhi	r3, [r4, #16]
 843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (idx >= dj->fs->n_rootdir)		/* Index is out of range */
 2577              		.loc 1 843 0
 2578 0036 1AD8     		bhi	.L113
 2579 0038 24E0     		b	.L120
 2580              	.LVL156:
 2581              	.L111:
 848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 2582              		.loc 1 848 0
 2583 003a 9E78     		ldrb	r6, [r3, #2]	@ zero_extendqisi2
 850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 2584              		.loc 1 850 0
 2585 003c 134F     		ldr	r7, .L122
 848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ic = SS(dj->fs) / 32 * dj->fs->csize;	/* Entries per cluster */
 2586              		.loc 1 848 0
 2587 003e 3601     		lsls	r6, r6, #4
 2588              	.LVL157:
 849:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2589              		.loc 1 849 0
 2590 0040 0CE0     		b	.L114
 2591              	.LVL158:
 2592              	.L115:
 850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			clst = get_fat(dj->fs, clst);				/* Get next cluster */
 2593              		.loc 1 850 0
 2594 0042 2068     		ldr	r0, [r4, #0]
 2595 0044 B847     		blx	r7
 2596              	.LVL159:
 2597 0046 0146     		mov	r1, r0
 2598              	.LVL160:
 851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2599              		.loc 1 851 0
 2600 0048 0130     		adds	r0, r0, #1
 2601              	.LVL161:
 2602 004a 19D0     		beq	.L119
 852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 2603              		.loc 1 852 0
 2604 004c 0129     		cmp	r1, #1
 2605 004e 19D9     		bls	.L120
 852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst < 2 || clst >= dj->fs->n_fatent)	/* Reached to end of table or int error */
 2606              		.loc 1 852 0 is_stmt 0 discriminator 1
 2607 0050 2068     		ldr	r0, [r4, #0]
 2608 0052 C369     		ldr	r3, [r0, #28]
 2609 0054 9942     		cmp	r1, r3
 2610 0056 17D2     		bcs	.L121
 854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			idx -= ic;
 2611              		.loc 1 854 0 is_stmt 1
 2612 0058 AD1B     		subs	r5, r5, r6
 2613              	.LVL162:
 2614 005a ADB2     		uxth	r5, r5
 2615              	.LVL163:
 2616              	.L114:
 849:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while (idx >= ic) {	/* Follow cluster chain */
 2617              		.loc 1 849 0 discriminator 1
 2618 005c B542     		cmp	r5, r6
 2619 005e F0D2     		bcs	.L115
 856:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->clust = clst;
 2620              		.loc 1 856 0
 2621 0060 E160     		str	r1, [r4, #12]
 857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect = clust2sect(dj->fs, clst) + idx / (SS(dj->fs) / 32);	/* Sector# */
 2622              		.loc 1 857 0
 2623 0062 2068     		ldr	r0, [r4, #0]
 2624 0064 0A4A     		ldr	r2, .L122+4
 2625 0066 9047     		blx	r2
 2626              	.LVL164:
 2627 0068 00EB1511 		add	r1, r0, r5, lsr #4
 2628 006c 2161     		str	r1, [r4, #16]
 2629              	.LVL165:
 2630              	.L113:
 860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (idx % (SS(dj->fs) / 32)) * 32;	/* Ptr to the entry in the sector */
 2631              		.loc 1 860 0
 2632 006e 2368     		ldr	r3, [r4, #0]
 2633 0070 05F00F0C 		and	ip, r5, #15
 2634 0074 3433     		adds	r3, r3, #52
 2635 0076 03EB4C15 		add	r5, r3, ip, lsl #5
 2636              	.LVL166:
 2637 007a 6561     		str	r5, [r4, #20]
 862:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;	/* Seek succeeded */
 2638              		.loc 1 862 0
 2639 007c 0020     		movs	r0, #0
 2640 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2641              	.LVL167:
 2642              	.L119:
 851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2643              		.loc 1 851 0
 2644 0080 0120     		movs	r0, #1
 2645 0082 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2646              	.LVL168:
 2647              	.L120:
 853:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				return FR_INT_ERR;
 2648              		.loc 1 853 0
 2649 0084 0220     		movs	r0, #2
 2650 0086 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2651              	.LVL169:
 2652              	.L121:
 2653 0088 0220     		movs	r0, #2
 863:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 2654              		.loc 1 863 0
 2655 008a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2656              	.L123:
 2657              		.align	2
 2658              	.L122:
 2659 008c 00000000 		.word	get_fat
 2660 0090 00000000 		.word	clust2sect
 2661              		.cfi_endproc
 2662              	.LFE11:
 2664              		.section	.text.dir_remove,"ax",%progbits
 2665              		.align	1
 2666              		.thumb
 2667              		.thumb_func
 2669              	dir_remove:
 2670              	.LFB16:
1340:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2671              		.loc 1 1340 0
 2672              		.cfi_startproc
 2673              		@ args = 0, pretend = 0, frame = 0
 2674              		@ frame_needed = 0, uses_anonymous_args = 0
 2675              	.LVL170:
 2676 0000 10B5     		push	{r4, lr}
 2677              	.LCFI9:
 2678              		.cfi_def_cfa_offset 8
 2679              		.cfi_offset 14, -4
 2680              		.cfi_offset 4, -8
1360:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, dj->index);
 2681              		.loc 1 1360 0
 2682 0002 C188     		ldrh	r1, [r0, #6]
 2683 0004 074B     		ldr	r3, .L126
1340:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2684              		.loc 1 1340 0
 2685 0006 0446     		mov	r4, r0
1360:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, dj->index);
 2686              		.loc 1 1360 0
 2687 0008 9847     		blx	r3
 2688              	.LVL171:
1361:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 2689              		.loc 1 1361 0
 2690 000a 50B9     		cbnz	r0, .L125
 2691              	.LVL172:
 2692              	.LBB24:
 2693              	.LBB25:
1362:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 2694              		.loc 1 1362 0
 2695 000c 2068     		ldr	r0, [r4, #0]
 2696              	.LVL173:
 2697 000e 2169     		ldr	r1, [r4, #16]
 2698 0010 054A     		ldr	r2, .L126+4
 2699 0012 9047     		blx	r2
 2700              	.LVL174:
1363:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
 2701              		.loc 1 1363 0
 2702 0014 28B9     		cbnz	r0, .L125
1364:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*dj->dir = 0xE5;			/* Mark the entry "deleted" */
 2703              		.loc 1 1364 0
 2704 0016 6169     		ldr	r1, [r4, #20]
 2705 0018 E522     		movs	r2, #229
 2706 001a 0A70     		strb	r2, [r1, #0]
1365:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fs->wflag = 1;
 2707              		.loc 1 1365 0
 2708 001c 2368     		ldr	r3, [r4, #0]
 2709 001e 0121     		movs	r1, #1
 2710 0020 1971     		strb	r1, [r3, #4]
 2711              	.LVL175:
 2712              	.L125:
 2713              	.LBE25:
 2714              	.LBE24:
1371:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 2715              		.loc 1 1371 0
 2716 0022 10BD     		pop	{r4, pc}
 2717              	.L127:
 2718              		.align	2
 2719              	.L126:
 2720 0024 00000000 		.word	dir_sdi
 2721 0028 00000000 		.word	move_window
 2722              		.cfi_endproc
 2723              	.LFE16:
 2725              		.section	.text.put_fat,"ax",%progbits
 2726              		.align	1
 2727              		.global	put_fat
 2728              		.thumb
 2729              		.thumb_func
 2731              	put_fat:
 2732              	.LFB8:
 654:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2733              		.loc 1 654 0
 2734              		.cfi_startproc
 2735              		@ args = 0, pretend = 0, frame = 0
 2736              		@ frame_needed = 0, uses_anonymous_args = 0
 2737              	.LVL176:
 660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2738              		.loc 1 660 0
 2739 0000 0129     		cmp	r1, #1
 654:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2740              		.loc 1 654 0
 2741 0002 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2742              	.LCFI10:
 2743              		.cfi_def_cfa_offset 24
 2744              		.cfi_offset 14, -4
 2745              		.cfi_offset 7, -8
 2746              		.cfi_offset 6, -12
 2747              		.cfi_offset 5, -16
 2748              		.cfi_offset 4, -20
 2749              		.cfi_offset 3, -24
 654:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2750              		.loc 1 654 0
 2751 0004 0446     		mov	r4, r0
 2752 0006 0D46     		mov	r5, r1
 2753 0008 1646     		mov	r6, r2
 660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2754              		.loc 1 660 0
 2755 000a 79D9     		bls	.L138
 660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 2756              		.loc 1 660 0 is_stmt 0 discriminator 1
 2757 000c C369     		ldr	r3, [r0, #28]
 2758 000e 9942     		cmp	r1, r3
 2759 0010 78D2     		bcs	.L139
 2760              	.LVL177:
 2761              	.LBB28:
 2762              	.LBB29:
 664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		switch (fs->fs_type) {
 2763              		.loc 1 664 0 is_stmt 1
 2764 0012 0378     		ldrb	r3, [r0, #0]	@ zero_extendqisi2
 2765 0014 022B     		cmp	r3, #2
 2766 0016 43D0     		beq	.L132
 2767 0018 032B     		cmp	r3, #3
 2768 001a 52D0     		beq	.L133
 695:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INT_ERR;
 2769              		.loc 1 695 0
 2770 001c 0220     		movs	r0, #2
 2771              	.LVL178:
 664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		switch (fs->fs_type) {
 2772              		.loc 1 664 0
 2773 001e 012B     		cmp	r3, #1
 2774 0020 6BD1     		bne	.L130
 2775              	.LVL179:
 666:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bc = clst; bc += bc / 2;
 2776              		.loc 1 666 0
 2777 0022 01EB5107 		add	r7, r1, r1, lsr #1
 2778              	.LVL180:
 667:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2779              		.loc 1 667 0
 2780 0026 616A     		ldr	r1, [r4, #36]
 2781              	.LVL181:
 2782 0028 2046     		mov	r0, r4
 2783 002a 01EB5721 		add	r1, r1, r7, lsr #9
 2784 002e 364A     		ldr	r2, .L142
 2785              	.LVL182:
 2786 0030 9047     		blx	r2
 2787              	.LVL183:
 668:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 2788              		.loc 1 668 0
 2789 0032 0028     		cmp	r0, #0
 2790 0034 61D1     		bne	.L130
 669:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 2791              		.loc 1 669 0
 2792 0036 F805     		lsls	r0, r7, #23
 2793              	.LVL184:
 2794 0038 C30D     		lsrs	r3, r0, #23
 2795              	.LVL185:
 670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2796              		.loc 1 670 0
 2797 003a 15F00105 		ands	r5, r5, #1
 2798              	.LVL186:
 2799 003e 1CBF     		itt	ne
 2800 0040 E118     		addne	r1, r4, r3
 2801 0042 91F83410 		ldrbne	r1, [r1, #52]	@ zero_extendqisi2
 2802 0046 5FFA86FE 		uxtb	lr, r6
 2803 004a 1CBF     		itt	ne
 2804 004c 01F00F01 		andne	r1, r1, #15
 2805 0050 41EA0E1E 		orrne	lr, r1, lr, lsl #4
 673:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2806              		.loc 1 673 0
 2807 0054 606A     		ldr	r0, [r4, #36]
 670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2808              		.loc 1 670 0
 2809 0056 18BF     		it	ne
 2810 0058 5FFA8EFE 		uxtbne	lr, lr
 2811 005c 04EB030C 		add	ip, r4, r3
 671:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bc++;
 2812              		.loc 1 671 0
 2813 0060 0137     		adds	r7, r7, #1
 2814              	.LVL187:
 672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->wflag = 1;
 2815              		.loc 1 672 0
 2816 0062 0122     		movs	r2, #1
 673:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2817              		.loc 1 673 0
 2818 0064 00EB5721 		add	r1, r0, r7, lsr #9
 670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 2819              		.loc 1 670 0
 2820 0068 8CF834E0 		strb	lr, [ip, #52]
 672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->wflag = 1;
 2821              		.loc 1 672 0
 2822 006c 2271     		strb	r2, [r4, #4]
 673:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2823              		.loc 1 673 0
 2824 006e 2046     		mov	r0, r4
 2825 0070 254B     		ldr	r3, .L142
 2826              	.LVL188:
 2827 0072 9847     		blx	r3
 2828              	.LVL189:
 674:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 2829              		.loc 1 674 0
 2830 0074 0028     		cmp	r0, #0
 2831 0076 40D1     		bne	.L130
 675:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[bc % SS(fs)];
 2832              		.loc 1 675 0
 2833 0078 FF05     		lsls	r7, r7, #23
 2834              	.LVL190:
 2835 007a FF0D     		lsrs	r7, r7, #23
 2836              	.LVL191:
 676:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 2837              		.loc 1 676 0
 2838 007c 15B1     		cbz	r5, .L136
 2839 007e C6F30716 		ubfx	r6, r6, #4, #8
 2840              	.LVL192:
 2841 0082 09E0     		b	.L137
 2842              	.LVL193:
 2843              	.L136:
 2844 0084 04EB070C 		add	ip, r4, r7
 2845 0088 9CF83420 		ldrb	r2, [ip, #52]	@ zero_extendqisi2
 2846 008c C6F30326 		ubfx	r6, r6, #8, #4
 2847              	.LVL194:
 2848 0090 22F00F01 		bic	r1, r2, #15
 2849 0094 41EA0606 		orr	r6, r1, r6
 2850              	.L137:
 2851 0098 E719     		adds	r7, r4, r7
 2852              	.LVL195:
 2853 009a 87F83460 		strb	r6, [r7, #52]
 2854 009e 2CE0     		b	.L130
 2855              	.LVL196:
 2856              	.L132:
 680:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 2857              		.loc 1 680 0
 2858 00a0 406A     		ldr	r0, [r0, #36]
 2859 00a2 194B     		ldr	r3, .L142
 2860 00a4 00EB1121 		add	r1, r0, r1, lsr #8
 2861              	.LVL197:
 2862 00a8 2046     		mov	r0, r4
 2863 00aa 9847     		blx	r3
 2864              	.LVL198:
 681:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 2865              		.loc 1 681 0
 2866 00ac 28BB     		cbnz	r0, .L130
 682:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[clst * 2 % SS(fs)];
 2867              		.loc 1 682 0
 2868 00ae 2D06     		lsls	r5, r5, #24
 2869              	.LVL199:
 683:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_WORD(p, (WORD)val);
 2870              		.loc 1 683 0
 2871 00b0 04EBD555 		add	r5, r4, r5, lsr #23
 2872              	.LVL200:
 2873 00b4 85F83460 		strb	r6, [r5, #52]
 2874 00b8 C6F30726 		ubfx	r6, r6, #8, #8
 2875              	.LVL201:
 2876 00bc 85F83560 		strb	r6, [r5, #53]
 2877 00c0 1BE0     		b	.L130
 2878              	.LVL202:
 2879              	.L133:
 687:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 2880              		.loc 1 687 0
 2881 00c2 416A     		ldr	r1, [r0, #36]
 2882              	.LVL203:
 2883 00c4 104A     		ldr	r2, .L142
 2884              	.LVL204:
 2885 00c6 01EBD511 		add	r1, r1, r5, lsr #7
 2886 00ca 9047     		blx	r2
 2887              	.LVL205:
 688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 2888              		.loc 1 688 0
 2889 00cc A8B9     		cbnz	r0, .L130
 689:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			p = &fs->win[clst * 4 % SS(fs)];
 2890              		.loc 1 689 0
 2891 00ce 6D06     		lsls	r5, r5, #25
 2892              	.LVL206:
 690:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			val |= LD_DWORD(p) & 0xF0000000;
 2893              		.loc 1 690 0
 2894 00d0 04EBD555 		add	r5, r4, r5, lsr #23
 2895              	.LVL207:
 2896 00d4 95F83710 		ldrb	r1, [r5, #55]	@ zero_extendqisi2
 2897 00d8 0A06     		lsls	r2, r1, #24
 2898 00da 02F0704C 		and	ip, r2, #-268435456
 2899 00de 4CEA0606 		orr	r6, ip, r6
 2900              	.LVL208:
 691:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(p, val);
 2901              		.loc 1 691 0
 2902 00e2 C6F3072E 		ubfx	lr, r6, #8, #8
 2903 00e6 330C     		lsrs	r3, r6, #16
 2904 00e8 85F83460 		strb	r6, [r5, #52]
 2905 00ec 360E     		lsrs	r6, r6, #24
 2906              	.LVL209:
 2907 00ee 85F835E0 		strb	lr, [r5, #53]
 2908 00f2 85F83630 		strb	r3, [r5, #54]
 2909 00f6 85F83760 		strb	r6, [r5, #55]
 2910              	.LVL210:
 2911              	.L130:
 697:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->wflag = 1;
 2912              		.loc 1 697 0
 2913 00fa 0123     		movs	r3, #1
 2914 00fc 2371     		strb	r3, [r4, #4]
 2915 00fe F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2916              	.LVL211:
 2917              	.L138:
 2918              	.LBE29:
 2919              	.LBE28:
 661:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_INT_ERR;
 2920              		.loc 1 661 0
 2921 0100 0220     		movs	r0, #2
 2922 0102 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2923              	.L139:
 2924 0104 0220     		movs	r0, #2
 2925              	.LVL212:
 701:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 2926              		.loc 1 701 0
 2927 0106 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2928              	.L143:
 2929              		.align	2
 2930              	.L142:
 2931 0108 00000000 		.word	move_window
 2932              		.cfi_endproc
 2933              	.LFE8:
 2935              		.section	.text.create_chain,"ax",%progbits
 2936              		.align	1
 2937              		.thumb
 2938              		.thumb_func
 2940              	create_chain:
 2941              	.LFB10:
 769:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2942              		.loc 1 769 0
 2943              		.cfi_startproc
 2944              		@ args = 0, pretend = 0, frame = 0
 2945              		@ frame_needed = 0, uses_anonymous_args = 0
 2946              	.LVL213:
 2947 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2948              	.LCFI11:
 2949              		.cfi_def_cfa_offset 24
 2950              		.cfi_offset 14, -4
 2951              		.cfi_offset 8, -8
 2952              		.cfi_offset 7, -12
 2953              		.cfi_offset 6, -16
 2954              		.cfi_offset 5, -20
 2955              		.cfi_offset 4, -24
 769:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 2956              		.loc 1 769 0
 2957 0004 0446     		mov	r4, r0
 2958 0006 0E46     		mov	r6, r1
 774:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst == 0) {		/* Create a new chain */
 2959              		.loc 1 774 0
 2960 0008 31B9     		cbnz	r1, .L145
 775:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		scl = fs->last_clust;			/* Get suggested start point */
 2961              		.loc 1 775 0
 2962 000a C768     		ldr	r7, [r0, #12]
 2963              	.LVL214:
 776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2964              		.loc 1 776 0
 2965 000c 77B1     		cbz	r7, .L153
 776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2966              		.loc 1 776 0 is_stmt 0 discriminator 2
 2967 000e C369     		ldr	r3, [r0, #28]
 2968 0010 9F42     		cmp	r7, r3
 2969 0012 28BF     		it	cs
 2970 0014 0127     		movcs	r7, #1
 2971 0016 0AE0     		b	.L146
 2972              	.LVL215:
 2973              	.L145:
 779:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cs = get_fat(fs, clst);			/* Check the cluster status */
 2974              		.loc 1 779 0 is_stmt 1
 2975 0018 2C4A     		ldr	r2, .L161
 2976 001a 9047     		blx	r2
 2977              	.LVL216:
 780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 2978              		.loc 1 780 0
 2979 001c 0128     		cmp	r0, #1
 2980 001e 49D9     		bls	.L155
 781:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2981              		.loc 1 781 0
 2982 0020 E169     		ldr	r1, [r4, #28]
 2983 0022 8842     		cmp	r0, r1
 2984 0024 28BF     		it	cs
 2985 0026 3746     		movcs	r7, r6
 2986 0028 01D2     		bcs	.L146
 2987 002a 4DE0     		b	.L147
 2988              	.LVL217:
 2989              	.L153:
 776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2990              		.loc 1 776 0
 2991 002c 0127     		movs	r7, #1
 2992              	.LVL218:
 2993              	.L146:
 792:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 2994              		.loc 1 792 0
 2995 002e DFF89C80 		ldr	r8, .L161
 776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!scl || scl >= fs->n_fatent) scl = 1;
 2996              		.loc 1 776 0
 2997 0032 3D46     		mov	r5, r7
 2998              	.L150:
 2999              	.LVL219:
 788:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 3000              		.loc 1 788 0
 3001 0034 E069     		ldr	r0, [r4, #28]
 787:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ncl++;							/* Next cluster */
 3002              		.loc 1 787 0
 3003 0036 0135     		adds	r5, r5, #1
 3004              	.LVL220:
 788:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ncl >= fs->n_fatent) {		/* Wrap around */
 3005              		.loc 1 788 0
 3006 0038 8542     		cmp	r5, r0
 3007 003a 02D3     		bcc	.L148
 3008              	.LVL221:
 790:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 3009              		.loc 1 790 0
 3010 003c 012F     		cmp	r7, #1
 3011 003e 3CD9     		bls	.L156
 789:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ncl = 2;
 3012              		.loc 1 789 0
 3013 0040 0225     		movs	r5, #2
 3014              	.LVL222:
 3015              	.L148:
 792:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		cs = get_fat(fs, ncl);			/* Get the cluster status */
 3016              		.loc 1 792 0
 3017 0042 2046     		mov	r0, r4
 3018 0044 2946     		mov	r1, r5
 3019 0046 C047     		blx	r8
 3020              	.LVL223:
 793:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs == 0) break;				/* Found a free cluster */
 3021              		.loc 1 793 0
 3022 0048 70B1     		cbz	r0, .L149
 794:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 3023              		.loc 1 794 0
 3024 004a A0F1FF3E 		sub	lr, r0, #-1
 3025 004e DEF1000C 		rsbs	ip, lr, #0
 3026 0052 4CEB0E03 		adc	r3, ip, lr
 3027 0056 0128     		cmp	r0, #1
 3028 0058 08BF     		it	eq
 3029 005a 43F00103 		orreq	r3, r3, #1
 3030 005e 002B     		cmp	r3, #0
 3031 0060 32D1     		bne	.L147
 796:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 3032              		.loc 1 796 0
 3033 0062 BD42     		cmp	r5, r7
 3034 0064 E6D1     		bne	.L150
 3035 0066 2BE0     		b	.L160
 3036              	.L149:
 799:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 3037              		.loc 1 799 0
 3038 0068 2046     		mov	r0, r4
 3039              	.LVL224:
 3040 006a 2946     		mov	r1, r5
 3041 006c 6FF07042 		mvn	r2, #-268435456
 3042 0070 174F     		ldr	r7, .L161+4
 3043 0072 B847     		blx	r7
 3044              	.LVL225:
 800:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK && clst != 0) {
 3045              		.loc 1 800 0
 3046 0074 331C     		adds	r3, r6, #0
 3047 0076 18BF     		it	ne
 3048 0078 0123     		movne	r3, #1
 3049 007a 0028     		cmp	r0, #0
 3050 007c 14BF     		ite	ne
 3051 007e 0023     		movne	r3, #0
 3052 0080 03F00103 		andeq	r3, r3, #1
 3053 0084 1BB1     		cbz	r3, .L151
 801:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 3054              		.loc 1 801 0
 3055 0086 2046     		mov	r0, r4
 3056              	.LVL226:
 3057 0088 3146     		mov	r1, r6
 3058 008a 2A46     		mov	r2, r5
 3059 008c B847     		blx	r7
 3060              	.LVL227:
 3061              	.L151:
 803:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 3062              		.loc 1 803 0
 3063 008e 50B9     		cbnz	r0, .L152
 805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 3064              		.loc 1 805 0
 3065 0090 2369     		ldr	r3, [r4, #16]
 804:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->last_clust = ncl;			/* Update FSINFO */
 3066              		.loc 1 804 0
 3067 0092 E560     		str	r5, [r4, #12]
 805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 3068              		.loc 1 805 0
 3069 0094 5A1C     		adds	r2, r3, #1
 3070 0096 16D0     		beq	.L158
 806:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->free_clust--;
 3071              		.loc 1 806 0
 3072 0098 591E     		subs	r1, r3, #1
 807:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->fsi_flag = 1;
 3073              		.loc 1 807 0
 3074 009a 0122     		movs	r2, #1
 806:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->free_clust--;
 3075              		.loc 1 806 0
 3076 009c 2161     		str	r1, [r4, #16]
 807:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fs->fsi_flag = 1;
 3077              		.loc 1 807 0
 3078 009e 6271     		strb	r2, [r4, #5]
 3079 00a0 2846     		mov	r0, r5
 3080              	.LVL228:
 3081 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3082              	.LVL229:
 3083              	.L152:
 810:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 3084              		.loc 1 810 0
 3085 00a6 0128     		cmp	r0, #1
 3086 00a8 14BF     		ite	ne
 3087 00aa 0120     		movne	r0, #1
 3088 00ac 4FF0FF30 		moveq	r0, #-1
 3089              	.LVL230:
 3090 00b0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3091              	.LVL231:
 3092              	.L155:
 780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (cs < 2) return 1;			/* It is an invalid cluster */
 3093              		.loc 1 780 0
 3094 00b4 0120     		movs	r0, #1
 3095              	.LVL232:
 3096 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3097              	.LVL233:
 3098              	.L156:
 790:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ncl > scl) return 0;	/* No free cluster */
 3099              		.loc 1 790 0
 3100 00ba 0020     		movs	r0, #0
 3101 00bc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3102              	.LVL234:
 3103              	.L160:
 796:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ncl == scl) return 0;		/* No free cluster */
 3104              		.loc 1 796 0
 3105 00c0 1846     		mov	r0, r3
 3106              	.LVL235:
 3107 00c2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3108              	.LVL236:
 3109              	.L158:
 805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fs->free_clust != 0xFFFFFFFF) {
 3110              		.loc 1 805 0
 3111 00c6 2846     		mov	r0, r5
 3112              	.LVL237:
 3113              	.L147:
 814:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 3114              		.loc 1 814 0
 3115 00c8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3116              	.L162:
 3117              		.align	2
 3118              	.L161:
 3119 00cc 00000000 		.word	get_fat
 3120 00d0 00000000 		.word	put_fat
 3121              		.cfi_endproc
 3122              	.LFE10:
 3124              		.section	.text.dir_next,"ax",%progbits
 3125              		.align	1
 3126              		.thumb
 3127              		.thumb_func
 3129              	dir_next:
 3130              	.LFB12:
 877:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3131              		.loc 1 877 0
 3132              		.cfi_startproc
 3133              		@ args = 0, pretend = 0, frame = 0
 3134              		@ frame_needed = 0, uses_anonymous_args = 0
 3135              	.LVL238:
 3136 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3137              	.LCFI12:
 3138              		.cfi_def_cfa_offset 32
 3139              		.cfi_offset 14, -4
 3140              		.cfi_offset 9, -8
 3141              		.cfi_offset 8, -12
 3142              		.cfi_offset 7, -16
 3143              		.cfi_offset 6, -20
 3144              		.cfi_offset 5, -24
 3145              		.cfi_offset 4, -28
 3146              		.cfi_offset 3, -32
 877:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3147              		.loc 1 877 0
 3148 0004 0446     		mov	r4, r0
 882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = dj->index + 1;
 3149              		.loc 1 882 0
 3150 0006 C088     		ldrh	r0, [r0, #6]
 3151              	.LVL239:
 877:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3152              		.loc 1 877 0
 3153 0008 0F46     		mov	r7, r1
 882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	i = dj->index + 1;
 3154              		.loc 1 882 0
 3155 000a 461C     		adds	r6, r0, #1
 3156 000c B6B2     		uxth	r6, r6
 3157              	.LVL240:
 883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 3158              		.loc 1 883 0
 3159 000e 002E     		cmp	r6, #0
 3160 0010 69D0     		beq	.L175
 883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
 3161              		.loc 1 883 0 is_stmt 0 discriminator 1
 3162 0012 2369     		ldr	r3, [r4, #16]
 3163 0014 002B     		cmp	r3, #0
 3164 0016 66D0     		beq	.L175
 886:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(i % (SS(dj->fs) / 32))) {	/* Sector changed? */
 3165              		.loc 1 886 0 is_stmt 1
 3166 0018 3207     		lsls	r2, r6, #28
 3167 001a 59D1     		bne	.L165
 889:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 3168              		.loc 1 889 0
 3169 001c E168     		ldr	r1, [r4, #12]
 3170              	.LVL241:
 887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sect++;					/* Next sector */
 3171              		.loc 1 887 0
 3172 001e 0133     		adds	r3, r3, #1
 3173 0020 2361     		str	r3, [r4, #16]
 3174 0022 2068     		ldr	r0, [r4, #0]
 889:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (dj->clust == 0) {	/* Static table */
 3175              		.loc 1 889 0
 3176 0024 19B9     		cbnz	r1, .L166
 890:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i >= dj->fs->n_rootdir)	/* Report EOT when end of table */
 3177              		.loc 1 890 0
 3178 0026 0189     		ldrh	r1, [r0, #8]
 3179 0028 B142     		cmp	r1, r6
 3180 002a 51D8     		bhi	.L165
 3181 002c 5BE0     		b	.L175
 3182              	.L166:
 894:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (((i / (SS(dj->fs) / 32)) & (dj->fs->csize - 1)) == 0) {	/* Cluster changed? */
 3183              		.loc 1 894 0
 3184 002e 8378     		ldrb	r3, [r0, #2]	@ zero_extendqisi2
 3185 0030 5A1E     		subs	r2, r3, #1
 3186 0032 12EA1613 		ands	r3, r2, r6, lsr #4
 3187 0036 4BD1     		bne	.L165
 895:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 3188              		.loc 1 895 0
 3189 0038 324D     		ldr	r5, .L181
 3190 003a A847     		blx	r5
 896:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3191              		.loc 1 896 0
 3192 003c 0128     		cmp	r0, #1
 895:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = get_fat(dj->fs, dj->clust);				/* Get next cluster */
 3193              		.loc 1 895 0
 3194 003e 0546     		mov	r5, r0
 3195              	.LVL242:
 896:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;
 3196              		.loc 1 896 0
 3197 0040 57D9     		bls	.L177
 897:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3198              		.loc 1 897 0
 3199 0042 431C     		adds	r3, r0, #1
 3200 0044 58D0     		beq	.L179
 898:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst >= dj->fs->n_fatent) {					/* When it reached end of dynamic table */
 3201              		.loc 1 898 0
 3202 0046 2068     		ldr	r0, [r4, #0]
 3203              	.LVL243:
 3204 0048 C169     		ldr	r1, [r0, #28]
 3205 004a 8D42     		cmp	r5, r1
 3206 004c 3AD3     		bcc	.L167
 3207              	.LBB30:
 901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 3208              		.loc 1 901 0
 3209 004e 002F     		cmp	r7, #0
 3210 0050 49D0     		beq	.L175
 902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(dj->fs, dj->clust);		/* Stretch cluster chain */
 3211              		.loc 1 902 0
 3212 0052 E168     		ldr	r1, [r4, #12]
 3213 0054 2C4A     		ldr	r2, .L181+4
 3214 0056 9047     		blx	r2
 3215 0058 0546     		mov	r5, r0
 3216              	.LVL244:
 903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3217              		.loc 1 903 0
 3218 005a 0028     		cmp	r0, #0
 3219 005c 46D0     		beq	.L176
 904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3220              		.loc 1 904 0
 3221 005e 0128     		cmp	r0, #1
 3222 0060 47D0     		beq	.L177
 905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 3223              		.loc 1 905 0
 3224 0062 0130     		adds	r0, r0, #1
 3225              	.LVL245:
 3226 0064 48D0     		beq	.L179
 907:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 3227              		.loc 1 907 0
 3228 0066 2068     		ldr	r0, [r4, #0]
 3229 0068 0021     		movs	r1, #0
 3230 006a DFF8A880 		ldr	r8, .L181+16
 3231 006e C047     		blx	r8
 3232 0070 0746     		mov	r7, r0
 3233              	.LVL246:
 3234 0072 0028     		cmp	r0, #0
 3235 0074 40D1     		bne	.L179
 908:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_set(dj->fs->win, 0, SS(dj->fs));			/* Clear window buffer */
 3236              		.loc 1 908 0
 3237 0076 2068     		ldr	r0, [r4, #0]
 3238 0078 3946     		mov	r1, r7
 3239 007a 3430     		adds	r0, r0, #52
 3240 007c 4FF40072 		mov	r2, #512
 3241 0080 224B     		ldr	r3, .L181+8
 3242 0082 9847     		blx	r3
 909:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->fs->winsect = clust2sect(dj->fs, clst);	/* Cluster start sector */
 3243              		.loc 1 909 0
 3244 0084 D4F80090 		ldr	r9, [r4, #0]
 3245 0088 2946     		mov	r1, r5
 3246 008a 4846     		mov	r0, r9
 3247 008c 204B     		ldr	r3, .L181+12
 3248 008e 9847     		blx	r3
 3249 0090 C9F83000 		str	r0, [r9, #48]
 3250              	.LVL247:
 911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->wflag = 1;
 3251              		.loc 1 911 0
 3252 0094 4FF00109 		mov	r9, #1
 910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3253              		.loc 1 910 0
 3254 0098 0CE0     		b	.L168
 3255              	.LVL248:
 3256              	.L169:
 911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->wflag = 1;
 3257              		.loc 1 911 0
 3258 009a 83F80490 		strb	r9, [r3, #4]
 912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 3259              		.loc 1 912 0
 3260 009e 2068     		ldr	r0, [r4, #0]
 3261 00a0 0021     		movs	r1, #0
 3262 00a2 C047     		blx	r8
 3263 00a4 0028     		cmp	r0, #0
 3264 00a6 2AD1     		bne	.L180
 913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->winsect++;
 3265              		.loc 1 913 0
 3266 00a8 2168     		ldr	r1, [r4, #0]
 910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3267              		.loc 1 910 0
 3268 00aa 0137     		adds	r7, r7, #1
 3269              	.LVL249:
 913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->winsect++;
 3270              		.loc 1 913 0
 3271 00ac 0A6B     		ldr	r2, [r1, #48]
 910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3272              		.loc 1 910 0
 3273 00ae FFB2     		uxtb	r7, r7
 3274              	.LVL250:
 913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dj->fs->winsect++;
 3275              		.loc 1 913 0
 3276 00b0 501C     		adds	r0, r2, #1
 3277 00b2 0863     		str	r0, [r1, #48]
 3278              	.LVL251:
 3279              	.L168:
 910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					for (c = 0; c < dj->fs->csize; c++) {		/* Fill the new cluster with 0 */
 3280              		.loc 1 910 0 discriminator 1
 3281 00b4 2368     		ldr	r3, [r4, #0]
 3282 00b6 93F802C0 		ldrb	ip, [r3, #2]	@ zero_extendqisi2
 3283 00ba BC45     		cmp	ip, r7
 3284 00bc EDD8     		bhi	.L169
 915:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->fs->winsect -= c;						/* Rewind window address */
 3285              		.loc 1 915 0
 3286 00be 186B     		ldr	r0, [r3, #48]
 3287 00c0 C71B     		subs	r7, r0, r7
 3288              	.LVL252:
 3289 00c2 1F63     		str	r7, [r3, #48]
 3290              	.L167:
 3291              	.LBE30:
 920:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->clust = clst;				/* Initialize data for new cluster */
 3292              		.loc 1 920 0
 3293 00c4 E560     		str	r5, [r4, #12]
 921:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->sect = clust2sect(dj->fs, clst);
 3294              		.loc 1 921 0
 3295 00c6 2068     		ldr	r0, [r4, #0]
 3296 00c8 2946     		mov	r1, r5
 3297 00ca 114B     		ldr	r3, .L181+12
 3298 00cc 9847     		blx	r3
 3299 00ce 2061     		str	r0, [r4, #16]
 3300              	.LVL253:
 3301              	.L165:
 927:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 3302              		.loc 1 927 0
 3303 00d0 2168     		ldr	r1, [r4, #0]
 926:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->index = i;
 3304              		.loc 1 926 0
 3305 00d2 E680     		strh	r6, [r4, #6]	@ movhi
 927:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dj->dir = dj->fs->win + (i % (SS(dj->fs) / 32)) * 32;
 3306              		.loc 1 927 0
 3307 00d4 3431     		adds	r1, r1, #52
 3308 00d6 06F00F06 		and	r6, r6, #15
 3309              	.LVL254:
 3310 00da 01EB4616 		add	r6, r1, r6, lsl #5
 3311 00de 6661     		str	r6, [r4, #20]
 929:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 3312              		.loc 1 929 0
 3313 00e0 0020     		movs	r0, #0
 3314 00e2 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3315              	.LVL255:
 3316              	.L175:
 3317              	.LBB31:
 901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!stretch) return FR_NO_FILE;			/* When do not stretch, report EOT */
 3318              		.loc 1 901 0
 3319 00e6 0420     		movs	r0, #4
 3320 00e8 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3321              	.LVL256:
 3322              	.L176:
 903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3323              		.loc 1 903 0
 3324 00ec 0720     		movs	r0, #7
 3325              	.LVL257:
 3326 00ee BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3327              	.LVL258:
 3328              	.L177:
 904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 1) return FR_INT_ERR;
 3329              		.loc 1 904 0
 3330 00f2 0220     		movs	r0, #2
 3331              	.LVL259:
 3332 00f4 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3333              	.LVL260:
 3334              	.L179:
 907:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (move_window(dj->fs, 0)) return FR_DISK_ERR;	/* Flush active window */
 3335              		.loc 1 907 0
 3336 00f8 0120     		movs	r0, #1
 3337 00fa BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3338              	.LVL261:
 3339              	.L180:
 912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (move_window(dj->fs, 0)) return FR_DISK_ERR;
 3340              		.loc 1 912 0
 3341 00fe 0120     		movs	r0, #1
 3342              	.LBE31:
 930:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 3343              		.loc 1 930 0
 3344 0100 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3345              	.L182:
 3346              		.align	2
 3347              	.L181:
 3348 0104 00000000 		.word	get_fat
 3349 0108 00000000 		.word	create_chain
 3350 010c 00000000 		.word	mem_set
 3351 0110 00000000 		.word	clust2sect
 3352 0114 00000000 		.word	move_window
 3353              		.cfi_endproc
 3354              	.LFE12:
 3356              		.section	.text.follow_path,"ax",%progbits
 3357              		.align	1
 3358              		.thumb
 3359              		.thumb_func
 3361              	follow_path:
 3362              	.LFB19:
1682:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3363              		.loc 1 1682 0
 3364              		.cfi_startproc
 3365              		@ args = 0, pretend = 0, frame = 0
 3366              		@ frame_needed = 0, uses_anonymous_args = 0
 3367              	.LVL262:
 3368 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, sl, lr}
 3369              	.LCFI13:
 3370              		.cfi_def_cfa_offset 32
 3371              		.cfi_offset 14, -4
 3372              		.cfi_offset 10, -8
 3373              		.cfi_offset 9, -12
 3374              		.cfi_offset 8, -16
 3375              		.cfi_offset 7, -20
 3376              		.cfi_offset 6, -24
 3377              		.cfi_offset 5, -28
 3378              		.cfi_offset 4, -32
1682:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3379              		.loc 1 1682 0
 3380 0004 0446     		mov	r4, r0
1688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 3381              		.loc 1 1688 0
 3382 0006 0878     		ldrb	r0, [r1, #0]	@ zero_extendqisi2
 3383              	.LVL263:
1682:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3384              		.loc 1 1682 0
 3385 0008 0D46     		mov	r5, r1
1688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (*path == '/' || *path == '\\') { /* There is a heading separator */
 3386              		.loc 1 1688 0
 3387 000a A0F12F01 		sub	r1, r0, #47
 3388              	.LVL264:
 3389 000e D1F1000C 		rsbs	ip, r1, #0
 3390 0012 4CEB0102 		adc	r2, ip, r1
 3391 0016 5C28     		cmp	r0, #92
 3392 0018 14BF     		ite	ne
 3393 001a 1346     		movne	r3, r2
 3394 001c 42F00103 		orreq	r3, r2, #1
 3395 0020 13B1     		cbz	r3, .L184
1689:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		path++;	dj->sclust = 0;		/* Strip it and start from the root dir */
 3396              		.loc 1 1689 0
 3397 0022 0135     		adds	r5, r5, #1
 3398              	.LVL265:
 3399 0024 0023     		movs	r3, #0
 3400 0026 01E0     		b	.L235
 3401              	.L184:
1691:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->sclust = dj->fs->cdir;	/* Start from the current dir */
 3402              		.loc 1 1691 0
 3403 0028 2368     		ldr	r3, [r4, #0]
 3404 002a 9B69     		ldr	r3, [r3, #24]
 3405              	.L235:
 3406 002c A360     		str	r3, [r4, #8]
1699:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 3407              		.loc 1 1699 0
 3408 002e 95F800E0 		ldrb	lr, [r5, #0]	@ zero_extendqisi2
 3409 0032 BEF11F0F 		cmp	lr, #31
 3410              	.LBB40:
 3411              	.LBB41:
1519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mem_set(sfn, ' ', 11);
 3412              		.loc 1 1519 0
 3413 0036 88BF     		it	hi
 3414 0038 894F     		ldrhi	r7, .L237
 3415              	.LBE41:
 3416              	.LBE40:
1699:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((UINT)*path < ' ') {			/* Nul path means the start directory itself */
 3417              		.loc 1 1699 0
 3418 003a 07D8     		bhi	.L231
1700:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_sdi(dj, 0);
 3419              		.loc 1 1700 0
 3420 003c 2046     		mov	r0, r4
 3421 003e 0021     		movs	r1, #0
 3422 0040 884B     		ldr	r3, .L237+4
 3423 0042 9847     		blx	r3
 3424              	.LVL266:
1701:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj->dir = 0;
 3425              		.loc 1 1701 0
 3426 0044 0022     		movs	r2, #0
 3427 0046 6261     		str	r2, [r4, #20]
 3428 0048 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 3429              	.LVL267:
 3430              	.L231:
1947:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1948:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1949:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1950:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1951:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*--------------------------------------------------------------------------
1952:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1953:../../../SDK_embedded/libs/fatfs/src/ff.c ****    Public Functions
1954:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1955:../../../SDK_embedded/libs/fatfs/src/ff.c **** --------------------------------------------------------------------------*/
1956:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1957:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1958:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1959:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1960:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
1961:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
1962:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1963:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_mount (
1964:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE vol,		/* Logical drive number to be mounted/unmounted */
1965:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs		/* Pointer to new file system object (NULL for unmount)*/
1966:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
1967:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
1968:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *rfs;
1969:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1970:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1971:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
1972:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
1973:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
1974:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1975:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (rfs) {
1976:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
1977:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		clear_lock(rfs);
1978:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1979:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_REENTRANT					/* Discard sync object of the current volume */
1980:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!ff_del_syncobj(rfs->sobj)) return FR_INT_ERR;
1981:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1982:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
1983:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1984:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1985:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs) {
1986:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
1987:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_REENTRANT					/* Create sync object for the new volume */
1988:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!ff_cre_syncobj(vol, &fs->sobj)) return FR_INT_ERR;
1989:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
1990:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
1991:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	else
1992:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		disk_deinitialize( vol );
1993:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
1994:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1995:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
1996:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
1997:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1998:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
1999:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2000:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2001:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2002:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Open or Create a File                                                 */
2003:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2004:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2005:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_open (
2006:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp,			/* Pointer to the blank file object */
2007:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file name */
2008:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
2009:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2010:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2011:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2012:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
2013:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir;
2014:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2015:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2016:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2017:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fp->fs = 0;			/* Clear file object */
2018:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2019:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2020:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
2021:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
2022:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2023:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mode &= FA_READ;
2024:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2025:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2026:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	INIT_BUF(dj);
2027:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK)
2028:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dir = dj.dir;
2030:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2031:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY	/* R/W configuration */
2032:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2033:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!dir)	/* Current dir itself */
2034:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
2035:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
2036:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		else
2037:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2038:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2039:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2040:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Create or Open a file */
2041:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
2042:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		DWORD dw, cl;
2043:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2044:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) {					/* No file, create new */
2045:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
2046:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
2047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = enq_lock(dj.fs) ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
2048:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2049:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_register(&dj);
2050:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2051:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
2052:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;					/* New entry */
2053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2054:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		else {								/* Any object is already existing */
2055:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
2056:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_EXIST;
2057:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
2058:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
2059:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_DENIED;
2060:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2061:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2062:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
2063:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dw = get_fattime();					/* Created time */
2064:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
2065:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
2066:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
2067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cl = LD_CLUST(dir);					/* Get start cluster */
2068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
2069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj.fs->wflag = 1;
2070:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
2071:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dw = dj.fs->winsect;
2072:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = remove_chain(dj.fs, cl);
2073:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) {
2074:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
2075:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = move_window(dj.fs, dw);
2076:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2077:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2078:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2079:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2080:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	else {	/* Open an existing file */
2081:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
2082:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
2083:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_FILE;
2084:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
2085:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
2086:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_DENIED;
2087:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2088:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2089:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2090:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2091:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
2092:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mode |= FA__WRITTEN;
2093:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
2094:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dir_ptr = dir;
2095:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
2096:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
2097:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!fp->lockid) res = FR_INT_ERR;
2098:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2099:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2100:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2101:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else				/* R/O configuration */
2102:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {					/* Follow succeeded */
2103:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!dir) {						/* Current dir itself */
2104:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
2105:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
2106:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR)	/* It is a directory */
2107:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_FILE;
2108:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2109:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2110:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2111:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FREE_BUF();
2112:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2113:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2114:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->flag = mode;					/* File access mode */
2115:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
2116:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
2117:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = 0;						/* File pointer */
2118:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dsect = 0;
2119:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_FASTSEEK
2120:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->cltbl = 0;						/* No cluster link map table */
2121:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2122:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
2123:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2124:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2125:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2126:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2127:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2128:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2129:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2130:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2131:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2132:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Read File                                                             */
2133:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2134:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2135:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_read (
2136:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp, 		/* Pointer to the file object */
2137:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	void *buff,		/* Pointer to data buffer */
2138:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT btr,		/* Number of bytes to read */
2139:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT *br		/* Pointer to number of bytes read */
2140:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2141:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2142:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2143:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst, sect, remain;
2144:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT rcnt, cc;
2145:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE csect, *rbuff = buff;
2146:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2147:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2148:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*br = 0;	/* Initialize byte counter */
2149:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2150:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
2151:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
2153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
2155:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2156:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	remain = fp->fsize - fp->fptr;
2157:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (btr > remain) btr = (UINT)remain;			/* Truncate btr by remaining bytes */
2158:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2159:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
2160:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
2161:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
2162:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2163:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
2164:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
2165:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
2166:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
2167:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2168:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
2169:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2170:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
2171:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2172:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect += csect;
2173:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cc = btr / SS(fp->fs);					/* When remaining bytes >= sector size, */
2174:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
2175:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
2176:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					cc = fp->fs->csize - csect;
2177:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
2178:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2179:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY && _FS_MINIMIZE <= 2				/* Replace one of the read sectors with cached data if it
2180:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_TINY
2181:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
2182:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
2183:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
2185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
2186:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2187:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2188:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
2189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				continue;
2190:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2191:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_TINY
2192:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2193:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {				/* Write sector I/O buffer if needed */
2194:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2195:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2196:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
2197:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2198:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2199:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
2200:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2201:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2202:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2203:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2204:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->dsect = sect;
2205:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
2207:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (rcnt > btr) rcnt = btr;
2208:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_TINY
2209:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
2210:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2211:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2212:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
2214:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2215:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2216:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2218:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2219:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2220:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2221:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2222:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2223:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2224:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2225:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Write File                                                            */
2226:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2227:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2228:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_write (
2229:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp,			/* Pointer to the file object */
2230:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const void *buff,	/* Pointer to the data to be written */
2231:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT btw,			/* Number of bytes to write */
2232:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT *bw			/* Pointer to number of bytes written */
2233:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2234:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2235:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2236:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD clst, sect;
2237:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT wcnt, cc;
2238:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const BYTE *wbuff = buff;
2239:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE csect;
2240:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2241:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2242:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*bw = 0;	/* Initialize byte counter */
2243:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2244:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
2245:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2246:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
2247:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2248:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
2249:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
2250:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
2251:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2252:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
2253:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
2254:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
2255:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
2256:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
2257:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
2258:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = fp->org_clust;			/* Follow from the origin */
2259:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0)					/* When there is no cluster chain, */
2260:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
2261:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} else {							/* Middle or end of the file */
2262:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
2263:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2264:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
2265:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2266:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2267:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
2268:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2269:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_TINY
2270:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->fs->winsect == fp->dsect && move_window(fp->fs, 0))	/* Write back data buffer prior to f
2271:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2272:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2273:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
2274:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2275:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2276:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
2277:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2278:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2279:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
2280:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
2281:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect += csect;
2282:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cc = btw / SS(fp->fs);					/* When remaining bytes >= sector size, */
2283:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
2284:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
2285:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					cc = fp->fs->csize - csect;
2286:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
2287:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2288:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_TINY
2289:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets dirty by the direct write 
2290:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
2291:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->fs->wflag = 0;
2292:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2293:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2294:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
2295:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
2296:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
2297:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2298:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2299:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
2300:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				continue;
2301:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2302:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_TINY
2303:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->fptr >= fp->fsize) {			/* Avoid silly buffer filling at growing edge */
2304:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (move_window(fp->fs, 0)) ABORT(fp->fs, FR_DISK_ERR);
2305:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fs->winsect = sect;
2306:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2307:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2308:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
2309:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fptr < fp->fsize &&
2310:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
2311:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2312:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2313:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2314:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->dsect = sect;
2315:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2316:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
2317:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (wcnt > btw) wcnt = btw;
2318:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_TINY
2319:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (move_window(fp->fs, fp->dsect))			/* Move sector window */
2320:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ABORT(fp->fs, FR_DISK_ERR);
2321:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2322:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fs->wflag = 1;
2323:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2324:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
2325:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->flag |= FA__DIRTY;
2326:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2327:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2328:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2329:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
2330:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
2331:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2332:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
2333:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2334:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2335:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2336:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2337:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2338:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2339:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Synchronize the File Object                                           */
2340:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2341:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2342:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_sync (
2343:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp		/* Pointer to the file object */
2344:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2345:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2346:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2347:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD tim;
2348:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir;
2349:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2350:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2351:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2352:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2353:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
2354:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_TINY	/* Write-back dirty buffer */
2355:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {
2356:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2357:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
2358:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
2359:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2360:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2361:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			/* Update the directory entry */
2362:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
2363:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {
2364:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir = fp->dir_ptr;
2365:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
2366:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
2367:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
2368:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				tim = get_fattime();						/* Update updated time */
2369:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
2370:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__WRITTEN;
2371:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fs->wflag = 1;
2372:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(fp->fs);
2373:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2374:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2375:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2376:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2377:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, res);
2378:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2379:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2380:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* !_FS_READONLY */
2381:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2382:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2383:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2384:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2385:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2386:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Close File                                                            */
2387:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2388:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2389:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_close (
2390:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp		/* Pointer to the file object to be closed */
2391:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2392:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2393:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2394:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2395:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_READONLY
2396:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS *fs = fp->fs;
2397:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fs, fp->id);
2398:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2399:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fs, res);
2400:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2401:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2402:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
2403:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
2404:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {		/* Decrement open counter */
2405:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_REENTRANT
2406:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = validate(fp->fs, fp->id);
2407:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
2408:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dec_lock(fp->lockid);	
2409:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			unlock_fs(fp->fs, FR_OK);
2410:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2411:../../../SDK_embedded/libs/fatfs/src/ff.c **** #else
2412:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dec_lock(fp->lockid);
2413:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2414:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2415:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2416:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
2417:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return res;
2418:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2419:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2420:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2421:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2422:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2423:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2424:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2425:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Current Drive/Directory Handlings                                     */
2426:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2427:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2428:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH >= 1
2429:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2430:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_chdrive (
2431:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE drv		/* Drive number */
2432:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2433:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2434:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
2435:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2436:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	CurrVol = drv;
2437:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2438:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
2439:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2440:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2441:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2442:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2443:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_chdir (
2444:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2445:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2446:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2447:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2448:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
2449:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2450:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2451:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2452:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2453:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2454:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
2455:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
2456:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
2457:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
2458:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dj.dir) {
2459:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
2460:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
2461:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
2462:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->cdir = LD_CLUST(dj.dir);
2463:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				else
2464:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
2465:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2466:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2467:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2468:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2469:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2470:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2471:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2472:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2473:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2474:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH >= 2
2475:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_getcwd (
2476:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	TCHAR *path,	/* Pointer to the directory path */
2477:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT sz_path	/* Size of path */
2478:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2479:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2480:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2481:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
2482:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i, n;
2483:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD ccl;
2484:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	TCHAR *tp;
2485:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FILINFO fno;
2486:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2487:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2488:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2489:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*path = 0;
2490:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
2491:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2492:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
2493:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		i = sz_path;		/* Bottom of buffer (dir stack base) */
2494:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
2495:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
2496:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
2497:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
2498:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_read(&dj);
2499:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
2500:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
2501:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(&dj, 0);
2502:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
2503:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			do {							/* Find the entry links to the child dir */
2504:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_read(&dj);
2505:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res != FR_OK) break;
2506:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
2507:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_next(&dj, 0);	
2508:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} while (res == FR_OK);
2509:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
2510:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
2511:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_LFN
2512:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fno.lfname = path;
2513:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fno.lfsize = i;
2514:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2515:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
2516:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			tp = fno.fname;
2517:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (_USE_LFN && *path) tp = path;
2518:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
2519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i < n + 3) {
2520:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
2521:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2522:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			while (n) path[--i] = tp[--n];
2523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			path[--i] = '/';
2524:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		tp = path;
2526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
2527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
2528:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = ':';
2529:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i == sz_path) {				/* Root-dir */
2530:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				*tp++ = '/';
2531:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {						/* Sub-dir */
2532:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				do		/* Add stacked path str */
2533:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					*tp++ = path[i++];
2534:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				while (i < sz_path);
2535:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2536:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2537:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*tp = 0;
2538:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
2539:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2540:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2541:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2542:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2543:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* _FS_RPATH >= 2 */
2544:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif /* _FS_RPATH >= 1 */
2545:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2546:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2547:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2548:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_MINIMIZE <= 2
2549:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2550:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Seek File R/W Pointer                                                 */
2551:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2552:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2553:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_lseek (
2554:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp,		/* Pointer to the file object */
2555:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD ofs		/* File pointer from top of file */
2556:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2557:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2558:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2559:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2560:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2561:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
2563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
2564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
2565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2566:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _USE_FASTSEEK
2567:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
2568:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		DWORD cl, pcl, ncl, tcl, dsc, tlen, *tbl = fp->cltbl;
2569:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		BYTE csc;
2570:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2571:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		tlen = *tbl++;
2572:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create link map table */
2573:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cl = fp->org_clust;
2574:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cl) {
2575:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				do {
2576:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (tlen < 4) {	/* Not enough table items */
2577:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = FR_NOT_ENOUGH_CORE; break;
2578:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
2579:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					tcl = cl; ncl = 0;
2580:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					do {		/* Get a fragment and store the top and length */
2581:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						pcl = cl; ncl++;
2582:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						cl = get_fat(fp->fs, cl);
2583:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
2584:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2585:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					} while (cl == pcl + 1);
2586:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					*tbl++ = ncl; *tbl++ = tcl;
2587:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					tlen -= 2;
2588:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} while (cl < fp->fs->n_fatent);
2589:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2590:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tbl = 0;	/* Terminate table */
2591:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2592:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {						/* Fast seek */
2593:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ofs > fp->fsize)		/* Clip offset at the file size */
2594:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ofs = fp->fsize;
2595:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
2596:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ofs) {
2597:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dsc = (ofs - 1) / SS(fp->fs);
2598:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				cl = dsc / fp->fs->csize;
2599:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (;;) {
2600:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ncl = *tbl++;
2601:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!ncl) ABORT(fp->fs, FR_INT_ERR);
2602:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (cl < ncl) break;
2603:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					cl -= ncl; tbl++;
2604:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2605:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = cl + *tbl;
2606:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				csc = (BYTE)(dsc & (fp->fs->csize - 1));
2607:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dsc = clust2sect(fp->fs, fp->curr_clust);
2608:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
2609:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dsc += csc;
2610:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {
2611:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_TINY
2612:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2613:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (fp->flag & FA__DIRTY) {		/* Flush dirty buffer if needed */
2614:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2615:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							ABORT(fp->fs, FR_DISK_ERR);
2616:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						fp->flag &= ~FA__DIRTY;
2617:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
2618:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2619:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (disk_read(fp->fs->drv, fp->buf, dsc, 1) != RES_OK)
2620:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
2621:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2622:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->dsect = dsc;
2623:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2624:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2625:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2626:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} else
2627:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2628:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2629:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Normal Seek */
2630:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	{
2631:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		DWORD clst, bcs, nsect, ifptr;
2632:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2633:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
2634:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2635:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			 && !(fp->flag & FA_WRITE)
2636:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2637:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			) ofs = fp->fsize;
2638:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2639:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ifptr = fp->fptr;
2640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
2641:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ofs) {
2642:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
2643:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ifptr > 0 &&
2644:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
2645:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
2646:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ofs -= fp->fptr;
2647:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = fp->curr_clust;
2648:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {									/* When seek to back cluster, */
2649:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = fp->org_clust;					/* start from the first cluster */
2650:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2651:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
2652:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(fp->fs, 0);
2653:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
2654:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2655:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->org_clust = clst;
2656:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2657:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2658:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = clst;
2659:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst != 0) {
2661:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
2662:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2663:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
2664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
2665:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
2666:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							ofs = bcs; break;
2667:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						}
2668:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					} else
2669:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
2671:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
2672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
2673:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->curr_clust = clst;
2674:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->fptr += bcs;
2675:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ofs -= bcs;
2676:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2677:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fptr += ofs;
2678:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ofs % SS(fp->fs)) {
2679:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
2680:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
2681:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					nsect += ofs / SS(fp->fs);
2682:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2683:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2684:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2685:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
2686:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_TINY
2687:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Flush dirty buffer if needed */
2689:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
2690:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
2691:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
2692:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2693:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2694:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
2695:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
2696:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2697:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->dsect = nsect;
2698:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2699:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2700:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
2701:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->fsize = fp->fptr;
2702:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
2703:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2704:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2705:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2706:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2707:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, res);
2708:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2709:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2710:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2711:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2712:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_MINIMIZE <= 1
2713:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2714:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Create a Directroy Object                                             */
2715:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2716:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2717:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_opendir (
2718:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to directory object to create */
2719:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path	/* Pointer to the directory path */
2720:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2721:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2722:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2724:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2725:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2726:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj->fs, 0);
2727:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2728:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(*dj);
2729:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
2730:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
2731:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
2732:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dj->dir) {						/* It is not the root dir */
2733:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
2734:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->sclust = LD_CLUST(dj->dir);
2735:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} else {						/* The object is not a directory */
2736:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_NO_PATH;
2737:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2738:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2739:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {
2740:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->id = dj->fs->id;
2741:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
2742:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2743:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2744:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
2745:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2746:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2747:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj->fs, res);
2748:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2749:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2750:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2751:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2752:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2753:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2754:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Read Directory Entry in Sequense                                      */
2755:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2756:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2757:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_readdir (
2758:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR *dj,			/* Pointer to the open directory object */
2759:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2760:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2761:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2762:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2763:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2764:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2765:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2766:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
2767:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2768:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!fno) {
2769:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
2770:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
2771:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			INIT_BUF(*dj);
2772:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_read(dj);				/* Read an directory item */
2773:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
2774:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->sect = 0;
2775:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_OK;
2776:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2777:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
2778:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
2779:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_next(dj, 0);		/* Increment index for next */
2780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_NO_FILE) {
2781:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->sect = 0;
2782:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_OK;
2783:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2784:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2785:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			FREE_BUF();
2786:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2787:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2788:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2789:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj->fs, res);
2790:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2791:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2792:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2793:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2794:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_MINIMIZE == 0
2795:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2796:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Get File Status                                                       */
2797:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2798:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2799:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_stat (
2800:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
2801:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FILINFO *fno		/* Pointer to file information to return */
2802:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2803:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2804:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2805:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
2806:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2807:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2808:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2809:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
2810:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2811:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
2812:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
2813:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
2814:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dj.dir)		/* Found an object */
2815:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				get_fileinfo(&dj, fno);
2816:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			else			/* It is root dir */
2817:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
2818:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2819:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
2820:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2821:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2822:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
2823:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2824:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2825:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2826:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2827:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if !_FS_READONLY
2828:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2829:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Get Number of Free Clusters                                           */
2830:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2831:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2832:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_getfree (
2833:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the logical drive number (root dir) */
2834:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD *nclst,		/* Pointer to the variable to return number of free clusters */
2835:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FATFS **fatfs		/* Pointer to pointer to corresponding file system object to return */
2836:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2837:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2838:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2839:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD n, clst, sect, stat;
2840:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	UINT i;
2841:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE fat, *p;
2842:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2843:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2844:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	/* Get drive number */
2845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
2846:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2847:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		/* If free_clust is valid, return it without full cluster scan */
2848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
2849:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*nclst = (*fatfs)->free_clust;
2850:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
2851:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			/* Get number of free clusters */
2852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fat = (*fatfs)->fs_type;
2853:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			n = 0;
2854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT12) {
2855:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = 2;
2856:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				do {
2857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					stat = get_fat(*fatfs, clst);
2858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
2859:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
2860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 0) n++;
2861:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} while (++clst < (*fatfs)->n_fatent);
2862:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
2863:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = (*fatfs)->n_fatent;
2864:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				sect = (*fatfs)->fatbase;
2865:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				i = 0; p = 0;
2866:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				do {
2867:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!i) {
2868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
2869:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res != FR_OK) break;
2870:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p = (*fatfs)->win;
2871:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						i = SS(*fatfs);
2872:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
2873:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (fat == FS_FAT16) {
2874:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (LD_WORD(p) == 0) n++;
2875:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p += 2; i -= 2;
2876:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					} else {
2877:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
2878:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p += 4; i -= 4;
2879:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
2880:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} while (--clst);
2881:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			(*fatfs)->free_clust = n;
2883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
2884:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*nclst = n;
2885:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2886:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2887:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(*fatfs, res);
2888:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2889:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2890:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2891:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2892:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2893:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2894:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Truncate File                                                         */
2895:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2896:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2897:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_truncate (
2898:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FIL *fp		/* Pointer to the file object */
2899:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2900:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2901:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2902:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD ncl;
2903:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2904:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
2906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2907:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
2908:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INT_ERR;
2909:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} else {
2910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
2911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_DENIED;
2912:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2913:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2914:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2915:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fsize > fp->fptr) {
2916:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
2917:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
2918:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
2919:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = remove_chain(fp->fs, fp->org_clust);
2920:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->org_clust = 0;
2921:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {				/* When truncate a part of the file, remove remaining clusters */
2922:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ncl = get_fat(fp->fs, fp->curr_clust);
2923:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_OK;
2924:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
2925:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
2926:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
2927:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
2928:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
2929:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2930:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2931:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
2932:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
2933:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
2934:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2935:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, res);
2936:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
2937:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2938:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2939:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2940:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2941:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2942:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Delete a File or Directory                                            */
2943:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
2944:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2945:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_unlink (
2946:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path		/* Pointer to the file or directory path */
2947:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
2948:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
2949:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
2950:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj, sdj;
2951:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir;
2952:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD dclst;
2953:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
2954:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2955:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
2956:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
2957:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
2958:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
2959:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
2960:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
2961:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
2962:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
2963:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open file */
2964:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2965:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
2966:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;
2967:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dir) {
2968:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
2969:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
2970:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
2971:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
2972:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2973:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dclst = LD_CLUST(dir);
2974:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
2975:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dclst < 2) {
2976:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_INT_ERR;
2977:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} else {
2978:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
2979:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					sdj.sclust = dclst;
2980:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
2981:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) {
2982:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = dir_read(&sdj);
2983:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res == FR_OK			/* Not empty dir */
2984:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_RPATH
2985:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						|| dclst == sdj.fs->cdir	/* Current dir */
2986:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
2987:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						) res = FR_DENIED;
2988:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
2989:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
2990:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2991:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
2992:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {
2993:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
2994:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) {
2995:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
2996:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = remove_chain(dj.fs, dclst);
2997:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) res = sync(dj.fs);
2998:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
2999:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
3000:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
3001:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
3002:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
3003:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3004:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
3005:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3006:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3007:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3008:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3009:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3010:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Create a Directory                                                    */
3011:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3012:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3013:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_mkdir (
3014:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path		/* Pointer to the directory path */
3015:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
3016:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
3017:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
3018:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
3019:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir, n;
3020:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
3021:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
3022:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3023:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3024:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
3025:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
3026:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
3027:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
3028:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
3029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
3030:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3031:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_NO_FILE) {				/* Can create a new directory */
3032:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
3033:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_OK;
3034:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
3035:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
3036:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
3037:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK)					/* Flush FAT */
3038:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = move_window(dj.fs, 0);
3039:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
3040:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
3041:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir = dj.fs->win;
3042:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
3043:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
3044:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Name] = '.';
3045:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
3048:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
3049:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
3050:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
3051:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					pcl = 0;
3052:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir+32, pcl);
3053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
3054:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
3055:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->wflag = 1;
3056:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = move_window(dj.fs, 0);
3057:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res != FR_OK) break;
3058:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
3059:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
3060:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
3061:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
3062:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) {
3063:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
3064:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
3065:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir = dj.dir;
3066:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
3067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
3068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
3069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
3070:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
3071:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
3072:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
3073:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
3074:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
3075:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3076:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3077:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
3078:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3079:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3080:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3081:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3082:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3083:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Change Attribute                                                      */
3084:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3085:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3086:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_chmod (
3087:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file path */
3088:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE value,			/* Attribute bits */
3089:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE mask			/* Attribute mask to change */
3090:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
3091:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
3092:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
3093:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
3094:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir;
3095:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
3096:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3097:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3098:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
3099:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
3100:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
3101:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
3102:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
3103:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3104:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3105:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
3106:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;
3107:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dir) {						/* Is it a root directory? */
3108:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
3109:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {						/* File or sub directory */
3110:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
3111:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
3112:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
3113:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
3114:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
3115:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
3116:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
3117:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3118:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3119:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
3120:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3121:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3122:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3123:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3124:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3125:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Change Timestamp                                                      */
3126:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3127:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3128:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_utime (
3129:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path,	/* Pointer to the file/directory name */
3130:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const FILINFO *fno	/* Pointer to the time stamp to be set */
3131:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
3132:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
3133:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
3134:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR dj;
3135:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE *dir;
3136:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
3137:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3138:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3139:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
3140:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
3141:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
3142:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
3143:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
3144:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
3145:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3146:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
3147:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;
3148:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dir) {					/* Root directory */
3149:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
3150:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {					/* File or sub-directory */
3151:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
3152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
3153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
3154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
3155:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
3156:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
3157:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
3158:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3159:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(dj.fs, res);
3160:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
3161:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3162:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3163:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3164:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3165:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3166:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Rename File/Directory                                                 */
3167:../../../SDK_embedded/libs/fatfs/src/ff.c **** /*-----------------------------------------------------------------------*/
3168:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3169:../../../SDK_embedded/libs/fatfs/src/ff.c **** FRESULT f_rename (
3170:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path_old,	/* Pointer to the old name */
3171:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	const TCHAR *path_new	/* Pointer to the new name */
3172:../../../SDK_embedded/libs/fatfs/src/ff.c **** )
3173:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
3174:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FRESULT res;
3175:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DIR djo, djn;
3176:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	BYTE buf[21], *dir;
3177:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD dw;
3178:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DEF_NAMEBUF;
3179:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3180:../../../SDK_embedded/libs/fatfs/src/ff.c **** 
3181:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path_old, &djo.fs, 1);
3182:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
3183:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		djn.fs = djo.fs;
3184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(djo);
3185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
3186:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
3187:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
3188:../../../SDK_embedded/libs/fatfs/src/ff.c **** #if _FS_SHARE
3189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) res = chk_lock(&djo, 2);
3190:../../../SDK_embedded/libs/fatfs/src/ff.c **** #endif
3191:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Old object is found */
3192:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
3193:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_FILE;
3194:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} else {
3195:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
3196:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
3197:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = follow_path(&djn, path_new);
3198:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
3199:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
3200:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* Start critical section that any interruption or error can cause cross-link */
3201:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
3202:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) {
3203:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dir = djn.dir;					/* Copy object information except for name */
3204:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
3205:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
3206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						djo.fs->wflag = 1;
3207:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
3208:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							dw = clust2sect(djn.fs, LD_CLUST(dir));
3209:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							if (!dw) {
3210:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								res = FR_INT_ERR;
3211:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							} else {
3212:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								res = move_window(djn.fs, dw);
3213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								dir = djn.fs->win+32;	/* .. entry */
3214:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
3215:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
3216:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									ST_CLUST(dir, dw);
3217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									djn.fs->wflag = 1;
3218:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								}
3219:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							}
3220:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						}
3221:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res == FR_OK) {
3222:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
3223:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							if (res == FR_OK)
3224:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								res = sync(djo.fs);
3225:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						}
3226:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					}
3227:../../../SDK_embedded/libs/fatfs/src/ff.c **** /* End critical section */
3228:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				}
3229:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			}
3230:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		}
3231:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		FREE_BUF();
3232:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	}
3233:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(djo.fs, res);
3234:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 3431              		.loc 1 3234 0
 3432 004c A669     		ldr	r6, [r4, #24]
 3433              	.LVL268:
 3434              	.LBB46:
 3435              	.LBB44:
1519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mem_set(sfn, ' ', 11);
 3436              		.loc 1 1519 0
 3437 004e 2021     		movs	r1, #32
 3438 0050 0B22     		movs	r2, #11
 3439 0052 3046     		mov	r0, r6
 3440 0054 B847     		blx	r7
 3441              	.LVL269:
1523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 3442              		.loc 1 1523 0
 3443 0056 2B78     		ldrb	r3, [r5, #0]	@ zero_extendqisi2
 3444 0058 2E2B     		cmp	r3, #46
 3445 005a 26D1     		bne	.L216
 3446 005c 3146     		mov	r1, r6
 3447 005e 0022     		movs	r2, #0
1527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = c;
 3448              		.loc 1 1527 0
 3449 0060 1846     		mov	r0, r3
 3450              	.LVL270:
 3451              	.L191:
1525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = (BYTE)p[si++];
 3452              		.loc 1 1525 0
 3453 0062 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 3454              	.LVL271:
 3455 0064 0132     		adds	r2, r2, #1
 3456              	.LVL272:
1526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (c != '.' || si >= 3) break;
 3457              		.loc 1 1526 0
 3458 0066 B3F12E0C 		subs	ip, r3, #46
 3459 006a 18BF     		it	ne
 3460 006c 4FF0010C 		movne	ip, #1
 3461 0070 022A     		cmp	r2, #2
 3462 0072 88BF     		it	hi
 3463 0074 4CF0010C 		orrhi	ip, ip, #1
 3464 0078 BCF1000F 		cmp	ip, #0
 3465 007c 02D1     		bne	.L190
1527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = c;
 3466              		.loc 1 1527 0
 3467 007e 01F8010B 		strb	r0, [r1], #1
 3468 0082 EEE7     		b	.L191
 3469              	.L190:
1529:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 3470              		.loc 1 1529 0
 3471 0084 B3F12F00 		subs	r0, r3, #47
 3472 0088 18BF     		it	ne
 3473 008a 0120     		movne	r0, #1
 3474 008c 5C2B     		cmp	r3, #92
 3475 008e 0CBF     		ite	eq
 3476 0090 0020     		moveq	r0, #0
 3477 0092 00F00100 		andne	r0, r0, #1
 3478 0096 10B1     		cbz	r0, .L192
 3479 0098 202B     		cmp	r3, #32
 3480 009a 00F2DB80 		bhi	.L222
 3481              	.L192:
1530:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*path = &p[si];									/* Return pointer to the next segment */
 3482              		.loc 1 1530 0
 3483 009e AD18     		adds	r5, r5, r2
 3484              	.LVL273:
1531:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		sfn[NS] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 3485              		.loc 1 1531 0
 3486 00a0 202B     		cmp	r3, #32
 3487 00a2 8CBF     		ite	hi
 3488 00a4 2023     		movhi	r3, #32
 3489 00a6 2423     		movls	r3, #36
 3490              	.LVL274:
 3491 00a8 82E0     		b	.L236
 3492              	.LVL275:
 3493              	.L216:
1523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 3494              		.loc 1 1523 0
 3495 00aa 0021     		movs	r1, #0
1546:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 3496              		.loc 1 1546 0
 3497 00ac DFF8BC91 		ldr	r9, .L237+12
1523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 3498              		.loc 1 1523 0
 3499 00b0 0846     		mov	r0, r1
 3500 00b2 4FF0080C 		mov	ip, #8
 3501 00b6 0A46     		mov	r2, r1
 3502              	.LVL276:
 3503              	.L233:
1536:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = (BYTE)p[si++];
 3504              		.loc 1 1536 0
 3505 00b8 2B5C     		ldrb	r3, [r5, r0]	@ zero_extendqisi2
 3506              	.LVL277:
 3507 00ba 0130     		adds	r0, r0, #1
 3508              	.LVL278:
1537:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 3509              		.loc 1 1537 0
 3510 00bc 202B     		cmp	r3, #32
 3511 00be 8CBF     		ite	hi
 3512 00c0 4FF00008 		movhi	r8, #0
 3513 00c4 4FF00108 		movls	r8, #1
 3514 00c8 2F2B     		cmp	r3, #47
 3515 00ca 08BF     		it	eq
 3516 00cc 48F00108 		orreq	r8, r8, #1
 3517 00d0 B8F1000F 		cmp	r8, #0
 3518 00d4 4BD1     		bne	.L195
 3519 00d6 5C2B     		cmp	r3, #92
 3520 00d8 4ED0     		beq	.L219
1538:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == '.' || i >= ni) {
 3521              		.loc 1 1538 0
 3522 00da 6145     		cmp	r1, ip
 3523 00dc 34BF     		ite	cc
 3524 00de 4FF00008 		movcc	r8, #0
 3525 00e2 4FF00108 		movcs	r8, #1
 3526 00e6 2E2B     		cmp	r3, #46
 3527 00e8 08BF     		it	eq
 3528 00ea 48F00108 		orreq	r8, r8, #1
 3529 00ee B8F1000F 		cmp	r8, #0
 3530 00f2 12D0     		beq	.L197
1539:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 3531              		.loc 1 1539 0
 3532 00f4 BCF1080E 		subs	lr, ip, #8
 3533 00f8 18BF     		it	ne
 3534 00fa 4FF0010E 		movne	lr, #1
 3535 00fe 2E2B     		cmp	r3, #46
 3536 0100 0CBF     		ite	eq
 3537 0102 7146     		moveq	r1, lr
 3538 0104 4EF00101 		orrne	r1, lr, #1
 3539              	.LVL279:
 3540 0108 0029     		cmp	r1, #0
 3541 010a 40F0A380 		bne	.L222
 3542              	.LVL280:
1541:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			b <<= 2; continue;
 3543              		.loc 1 1541 0
 3544 010e 9200     		lsls	r2, r2, #2
 3545              	.LVL281:
 3546 0110 D2B2     		uxtb	r2, r2
 3547              	.LVL282:
1540:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			i = 8; ni = 11;
 3548              		.loc 1 1540 0
 3549 0112 0821     		movs	r1, #8
 3550 0114 4FF00B0C 		mov	ip, #11
 3551 0118 CEE7     		b	.L233
 3552              	.LVL283:
 3553              	.L197:
1543:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c >= 0x80) {				/* Extended char? */
 3554              		.loc 1 1543 0
 3555 011a 13F0800F 		tst	r3, #128
 3556 011e 04D0     		beq	.L199
1546:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = excvt[c-0x80];			/* Upper conversion (SBCS) */
 3557              		.loc 1 1546 0
 3558 0120 803B     		subs	r3, r3, #128
 3559              	.LVL284:
 3560 0122 19F80330 		ldrb	r3, [r9, r3]	@ zero_extendqisi2
 3561              	.LVL285:
1544:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			b |= 3;						/* Eliminate NT flag */
 3562              		.loc 1 1544 0
 3563 0126 42F00302 		orr	r2, r2, #3
 3564              	.LVL286:
 3565              	.L199:
1560:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 3566              		.loc 1 1560 0
 3567 012a DFF84481 		ldr	r8, .L237+16
 3568              	.LVL287:
 3569              	.L201:
 3570              	.LBB42:
 3571              	.LBB43:
 353:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (*str && *str != chr) str++;
 3572              		.loc 1 353 0
 3573 012e 18F801AB 		ldrb	sl, [r8], #1	@ zero_extendqisi2
 3574 0132 BAF1000F 		cmp	sl, #0
 3575 0136 02D0     		beq	.L200
 3576 0138 9A45     		cmp	sl, r3
 3577 013a F8D1     		bne	.L201
 3578 013c 8AE0     		b	.L222
 3579              	.L200:
 3580              	.LBE43:
 3581              	.LBE42:
1562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 3582              		.loc 1 1562 0
 3583 013e A3F14108 		sub	r8, r3, #65
 3584 0142 5FFA88F8 		uxtb	r8, r8
 3585 0146 B8F1190F 		cmp	r8, #25
1563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				b |= 2;
 3586              		.loc 1 1563 0
 3587 014a 98BF     		it	ls
 3588 014c 42F00202 		orrls	r2, r2, #2
 3589              	.LVL288:
1562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (IsUpper(c)) {			/* ASCII large capital? */
 3590              		.loc 1 1562 0
 3591 0150 0AD9     		bls	.L203
1565:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (IsLower(c)) {		/* ASCII small capital? */
 3592              		.loc 1 1565 0
 3593 0152 A3F1610E 		sub	lr, r3, #97
 3594 0156 5FFA8EF8 		uxtb	r8, lr
 3595 015a B8F1190F 		cmp	r8, #25
 3596 015e 03D8     		bhi	.L203
1566:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					b |= 1; c -= 0x20;
 3597              		.loc 1 1566 0
 3598 0160 203B     		subs	r3, r3, #32
 3599              	.LVL289:
 3600 0162 42F00102 		orr	r2, r2, #1
 3601              	.LVL290:
 3602 0166 DBB2     		uxtb	r3, r3
 3603              	.LVL291:
 3604              	.L203:
1569:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sfn[i++] = c;
 3605              		.loc 1 1569 0
 3606 0168 7354     		strb	r3, [r6, r1]
 3607 016a 0131     		adds	r1, r1, #1
 3608              	.LVL292:
 3609 016c A4E7     		b	.L233
 3610              	.L195:
 3611              	.LVL293:
1573:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 3612              		.loc 1 1573 0
 3613 016e 202B     		cmp	r3, #32
 3614 0170 94BF     		ite	ls
 3615 0172 0423     		movls	r3, #4
 3616 0174 0023     		movhi	r3, #0
 3617              	.LVL294:
 3618 0176 00E0     		b	.L196
 3619              	.LVL295:
 3620              	.L219:
 3621 0178 4346     		mov	r3, r8
 3622              	.LVL296:
 3623              	.L196:
1575:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 3624              		.loc 1 1575 0
 3625 017a 0029     		cmp	r1, #0
 3626 017c 6AD0     		beq	.L222
1576:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (sfn[0] == 0xE5) sfn[0] = 0x05;	/* When first char collides with 0xE5, replace it with 0x05 */
 3627              		.loc 1 1576 0
 3628 017e 3178     		ldrb	r1, [r6, #0]	@ zero_extendqisi2
 3629              	.LVL297:
 3630 0180 E529     		cmp	r1, #229
 3631 0182 01D1     		bne	.L204
 3632 0184 0521     		movs	r1, #5
 3633 0186 3170     		strb	r1, [r6, #0]
 3634              	.L204:
1578:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (ni == 8) b <<= 2;
 3635              		.loc 1 1578 0
 3636 0188 BCF1080F 		cmp	ip, #8
 3637 018c 01D1     		bne	.L205
 3638 018e 9200     		lsls	r2, r2, #2
 3639              	.LVL298:
 3640 0190 D2B2     		uxtb	r2, r2
 3641              	.LVL299:
 3642              	.L205:
1579:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 3643              		.loc 1 1579 0
 3644 0192 02F0030E 		and	lr, r2, #3
 3645 0196 BEF1010F 		cmp	lr, #1
1580:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 3646              		.loc 1 1580 0
 3647 019a 02F00C0C 		and	ip, r2, #12
 3648              	.LVL300:
1579:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 3649              		.loc 1 1579 0
 3650 019e 08BF     		it	eq
 3651 01a0 43F01003 		orreq	r3, r3, #16
 3652              	.LVL301:
1580:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 3653              		.loc 1 1580 0
 3654 01a4 BCF1040F 		cmp	ip, #4
 3655 01a8 08BF     		it	eq
 3656 01aa 43F00803 		orreq	r3, r3, #8
 3657              	.LVL302:
1572:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*path = &p[si];						/* Return pointer to the next segment */
 3658              		.loc 1 1572 0
 3659 01ae 2D18     		adds	r5, r5, r0
 3660              	.LVL303:
 3661              	.L236:
1582:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	sfn[NS] = c;		/* Store NT flag, File name is created */
 3662              		.loc 1 1582 0
 3663 01b0 F372     		strb	r3, [r6, #11]
 3664              	.LVL304:
 3665              	.LBE44:
 3666              	.LBE46:
 3667              	.LBB47:
 3668              	.LBB48:
1122:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);			/* Rewind directory object */
 3669              		.loc 1 1122 0
 3670 01b2 2046     		mov	r0, r4
 3671 01b4 0021     		movs	r1, #0
 3672 01b6 2B4A     		ldr	r2, .L237+4
 3673 01b8 9047     		blx	r2
 3674              	.LVL305:
1123:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) return res;
 3675              		.loc 1 1123 0
 3676 01ba 00BB     		cbnz	r0, .L208
 3677              	.L234:
1129:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3678              		.loc 1 1129 0
 3679 01bc DFF8B480 		ldr	r8, .L237+20
1159:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
 3680              		.loc 1 1159 0
 3681 01c0 294E     		ldr	r6, .L237+8
 3682              	.LVL306:
 3683              	.L227:
1129:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3684              		.loc 1 1129 0
 3685 01c2 2068     		ldr	r0, [r4, #0]
 3686 01c4 2169     		ldr	r1, [r4, #16]
 3687 01c6 C047     		blx	r8
 3688              	.LVL307:
1130:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
 3689              		.loc 1 1130 0
 3690 01c8 C8B9     		cbnz	r0, .L208
1131:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3691              		.loc 1 1131 0
 3692 01ca 6269     		ldr	r2, [r4, #20]
 3693              	.LVL308:
1133:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3694              		.loc 1 1133 0
 3695 01cc 1378     		ldrb	r3, [r2, #0]	@ zero_extendqisi2
 3696 01ce ABB1     		cbz	r3, .L223
1156:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
 3697              		.loc 1 1156 0
 3698 01d0 D37A     		ldrb	r3, [r2, #11]	@ zero_extendqisi2
 3699 01d2 1907     		lsls	r1, r3, #28
 3700 01d4 5CBF     		itt	pl
 3701 01d6 A169     		ldrpl	r1, [r4, #24]
 3702              	.LVL309:
 3703 01d8 0346     		movpl	r3, r0
 3704 01da 02D5     		bpl	.L210
 3705 01dc 08E0     		b	.L209
 3706              	.LVL310:
 3707              	.L211:
 3708              	.LBB49:
 3709              	.LBB50:
 346:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (cnt-- && (r = *d++ - *s++) == 0) ;
 3710              		.loc 1 346 0
 3711 01de 0B2B     		cmp	r3, #11
 3712 01e0 0DD0     		beq	.L208
 3713              	.L210:
 3714 01e2 12F80390 		ldrb	r9, [r2, r3]	@ zero_extendqisi2
 3715 01e6 11F803C0 		ldrb	ip, [r1, r3]	@ zero_extendqisi2
 3716              	.LVL311:
 3717 01ea 0133     		adds	r3, r3, #1
 3718 01ec E145     		cmp	r9, ip
 3719 01ee F6D0     		beq	.L211
 3720              	.LVL312:
 3721              	.L209:
 3722              	.LBE50:
 3723              	.LBE49:
1159:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 0);		/* Next entry */
 3724              		.loc 1 1159 0
 3725 01f0 2046     		mov	r0, r4
 3726              	.LVL313:
 3727 01f2 0021     		movs	r1, #0
 3728              	.LVL314:
 3729 01f4 B047     		blx	r6
 3730              	.LVL315:
1160:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	} while (res == FR_OK);
 3731              		.loc 1 1160 0
 3732 01f6 0028     		cmp	r0, #0
 3733 01f8 E3D0     		beq	.L227
 3734 01fa 00E0     		b	.L208
 3735              	.LVL316:
 3736              	.L223:
1133:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3737              		.loc 1 1133 0
 3738 01fc 0420     		movs	r0, #4
 3739              	.LVL317:
 3740              	.L208:
 3741              	.LBE48:
 3742              	.LBE47:
1708:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ns = *(dj->fn+NS);
 3743              		.loc 1 1708 0
 3744 01fe A169     		ldr	r1, [r4, #24]
 3745 0200 CB7A     		ldrb	r3, [r1, #11]	@ zero_extendqisi2
 3746              	.LVL318:
1709:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 3747              		.loc 1 1709 0
 3748 0202 A0B1     		cbz	r0, .L213
1710:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res != FR_NO_FILE) break;	/* Abort if any hard error occured */
 3749              		.loc 1 1710 0
 3750 0204 0428     		cmp	r0, #4
 3751 0206 29D1     		bne	.L188
1712:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exit */
 3752              		.loc 1 1712 0
 3753 0208 13F0200F 		tst	r3, #32
 3754 020c 03F00403 		and	r3, r3, #4
 3755              	.LVL319:
 3756 0210 07D0     		beq	.L214
1713:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->sclust = 0; dj->dir = 0;	/* It is the root dir */
 3757              		.loc 1 1713 0
 3758 0212 0020     		movs	r0, #0
 3759 0214 A060     		str	r0, [r4, #8]
 3760 0216 6061     		str	r0, [r4, #20]
 3761              	.LVL320:
1715:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) continue;
 3762              		.loc 1 1715 0
 3763 0218 002B     		cmp	r3, #0
 3764 021a 3FF417AF 		beq	.L231
 3765 021e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 3766              	.LVL321:
 3767              	.L214:
1717:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!(ns & NS_LAST)) res = FR_NO_PATH;
 3768              		.loc 1 1717 0
 3769 0222 002B     		cmp	r3, #0
 3770 0224 14BF     		ite	ne
 3771 0226 0420     		movne	r0, #4
 3772 0228 0520     		moveq	r0, #5
 3773 022a BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 3774              	.LVL322:
 3775              	.L213:
1721:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment match. Function completed. */
 3776              		.loc 1 1721 0
 3777 022e 5B07     		lsls	r3, r3, #29
 3778              	.LVL323:
 3779 0230 14D4     		bmi	.L188
1722:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj->dir;						/* There is next segment. Follow the sub directory */
 3780              		.loc 1 1722 0
 3781 0232 6369     		ldr	r3, [r4, #20]
 3782              	.LVL324:
1723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!(dir[DIR_Attr] & AM_DIR)) {	/* Cannot follow because it is a file */
 3783              		.loc 1 1723 0
 3784 0234 D87A     		ldrb	r0, [r3, #11]	@ zero_extendqisi2
 3785 0236 C106     		lsls	r1, r0, #27
 3786 0238 0FD5     		bpl	.L225
1726:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->sclust = LD_CLUST(dir);
 3787              		.loc 1 1726 0
 3788 023a 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 3789 023c 187D     		ldrb	r0, [r3, #20]	@ zero_extendqisi2
 3790 023e 93F81BC0 		ldrb	ip, [r3, #27]	@ zero_extendqisi2
 3791 0242 9B7E     		ldrb	r3, [r3, #26]	@ zero_extendqisi2
 3792 0244 40EA0122 		orr	r2, r0, r1, lsl #8
 3793 0248 43EA0C2E 		orr	lr, r3, ip, lsl #8
 3794 024c 4EEA0246 		orr	r6, lr, r2, lsl #16
 3795 0250 A660     		str	r6, [r4, #8]
 3796 0252 FBE6     		b	.L231
 3797              	.LVL325:
 3798              	.L222:
 3799              	.LBB51:
 3800              	.LBB45:
1575:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 3801              		.loc 1 1575 0
 3802 0254 0620     		movs	r0, #6
 3803 0256 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 3804              	.LVL326:
 3805              	.L225:
 3806              	.LBE45:
 3807              	.LBE51:
1724:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_PATH; break;
 3808              		.loc 1 1724 0
 3809 025a 0520     		movs	r0, #5
 3810              	.LVL327:
 3811              	.L188:
1731:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 3812              		.loc 1 1731 0
 3813 025c BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 3814              	.L238:
 3815              		.align	2
 3816              	.L237:
 3817 0260 00000000 		.word	mem_set
 3818 0264 00000000 		.word	dir_sdi
 3819 0268 00000000 		.word	dir_next
 3820 026c 00000000 		.word	.LANCHOR3
 3821 0270 00000000 		.word	.LC0
 3822 0274 00000000 		.word	move_window
 3823              		.cfi_endproc
 3824              	.LFE19:
 3826              		.section	.text.dir_register,"ax",%progbits
 3827              		.align	1
 3828              		.thumb
 3829              		.thumb_func
 3831              	dir_register:
 3832              	.LFB15:
1233:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3833              		.loc 1 1233 0
 3834              		.cfi_startproc
 3835              		@ args = 0, pretend = 0, frame = 0
 3836              		@ frame_needed = 0, uses_anonymous_args = 0
 3837              	.LVL328:
 3838 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3839              	.LCFI14:
 3840              		.cfi_def_cfa_offset 24
 3841              		.cfi_offset 14, -4
 3842              		.cfi_offset 7, -8
 3843              		.cfi_offset 6, -12
 3844              		.cfi_offset 5, -16
 3845              		.cfi_offset 4, -20
 3846              		.cfi_offset 3, -24
1300:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
 3847              		.loc 1 1300 0
 3848 0002 0021     		movs	r1, #0
 3849 0004 1C4B     		ldr	r3, .L248
1233:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3850              		.loc 1 1233 0
 3851 0006 0446     		mov	r4, r0
1300:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = dir_sdi(dj, 0);
 3852              		.loc 1 1300 0
 3853 0008 9847     		blx	r3
 3854              	.LVL329:
 3855 000a 0546     		mov	r5, r0
 3856              	.LVL330:
1301:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 3857              		.loc 1 1301 0
 3858 000c 0028     		cmp	r0, #0
 3859 000e 29D1     		bne	.L243
1303:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
 3860              		.loc 1 1303 0
 3861 0010 1A4F     		ldr	r7, .L248+4
1307:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 3862              		.loc 1 1307 0
 3863 0012 1B4E     		ldr	r6, .L248+8
 3864              	.LVL331:
 3865              	.L245:
1303:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(dj->fs, dj->sect);
 3866              		.loc 1 1303 0
 3867 0014 2068     		ldr	r0, [r4, #0]
 3868 0016 2169     		ldr	r1, [r4, #16]
 3869 0018 B847     		blx	r7
 3870 001a 0546     		mov	r5, r0
 3871              	.LVL332:
1304:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 3872              		.loc 1 1304 0
 3873 001c 10BB     		cbnz	r0, .L243
1305:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			c = *dj->dir;
 3874              		.loc 1 1305 0
 3875 001e 6369     		ldr	r3, [r4, #20]
 3876 0020 1978     		ldrb	r1, [r3, #0]	@ zero_extendqisi2
 3877              	.LVL333:
1306:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (c == 0xE5 || c == 0) break;	/* Is it a blank entry? */
 3878              		.loc 1 1306 0
 3879 0022 A1F1E50C 		sub	ip, r1, #229
 3880 0026 DCF10005 		rsbs	r5, ip, #0
 3881 002a 45EB0C02 		adc	r2, r5, ip
 3882 002e 0029     		cmp	r1, #0
 3883 0030 14BF     		ite	ne
 3884 0032 1046     		movne	r0, r2
 3885 0034 42F00100 		orreq	r0, r2, #1
 3886              	.LVL334:
 3887 0038 B0B9     		cbnz	r0, .L241
1307:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_next(dj, 1);			/* Next entry with table stretch */
 3888              		.loc 1 1307 0
 3889 003a 2046     		mov	r0, r4
 3890 003c 0121     		movs	r1, #1
 3891              	.LVL335:
 3892 003e B047     		blx	r6
 3893              	.LVL336:
 3894 0040 0546     		mov	r5, r0
 3895              	.LVL337:
1308:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		} while (res == FR_OK);
 3896              		.loc 1 1308 0
 3897 0042 0028     		cmp	r0, #0
 3898 0044 E6D0     		beq	.L245
 3899 0046 0DE0     		b	.L243
 3900              	.LVL338:
 3901              	.L247:
 3902              	.LBB54:
 3903              	.LBB55:
1315:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj->dir;
 3904              		.loc 1 1315 0
 3905 0048 6669     		ldr	r6, [r4, #20]
 3906              	.LVL339:
1316:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_set(dir, 0, 32);		/* Clean the entry */
 3907              		.loc 1 1316 0
 3908 004a 2946     		mov	r1, r5
 3909 004c 3046     		mov	r0, r6
 3910              	.LVL340:
 3911 004e 2022     		movs	r2, #32
 3912 0050 0C4B     		ldr	r3, .L248+12
 3913 0052 9847     		blx	r3
 3914              	.LVL341:
1317:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mem_cpy(dir, dj->fn, 11);	/* Put SFN */
 3915              		.loc 1 1317 0
 3916 0054 3046     		mov	r0, r6
 3917 0056 A169     		ldr	r1, [r4, #24]
 3918 0058 0B22     		movs	r2, #11
 3919 005a 0B4B     		ldr	r3, .L248+16
 3920 005c 9847     		blx	r3
1321:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj->fs->wflag = 1;
 3921              		.loc 1 1321 0
 3922 005e 2168     		ldr	r1, [r4, #0]
 3923 0060 0120     		movs	r0, #1
 3924 0062 0871     		strb	r0, [r1, #4]
 3925              	.LVL342:
 3926              	.L243:
 3927              	.LBE55:
 3928              	.LBE54:
1326:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 3929              		.loc 1 1326 0
 3930 0064 2846     		mov	r0, r5
 3931 0066 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3932              	.LVL343:
 3933              	.L241:
 3934              	.LBB57:
 3935              	.LBB56:
1313:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3936              		.loc 1 1313 0
 3937 0068 2068     		ldr	r0, [r4, #0]
 3938 006a 2169     		ldr	r1, [r4, #16]
 3939              	.LVL344:
 3940 006c 034A     		ldr	r2, .L248+4
 3941 006e 9047     		blx	r2
 3942              	.LVL345:
 3943 0070 0546     		mov	r5, r0
 3944              	.LVL346:
1314:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
 3945              		.loc 1 1314 0
 3946 0072 0028     		cmp	r0, #0
 3947 0074 F6D1     		bne	.L243
 3948 0076 E7E7     		b	.L247
 3949              	.L249:
 3950              		.align	2
 3951              	.L248:
 3952 0078 00000000 		.word	dir_sdi
 3953 007c 00000000 		.word	move_window
 3954 0080 00000000 		.word	dir_next
 3955 0084 00000000 		.word	mem_set
 3956 0088 00000000 		.word	mem_cpy
 3957              	.LBE56:
 3958              	.LBE57:
 3959              		.cfi_endproc
 3960              	.LFE15:
 3962              		.section	.text.dir_read,"ax",%progbits
 3963              		.align	1
 3964              		.thumb
 3965              		.thumb_func
 3967              	dir_read:
 3968              	.LFB14:
1176:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3969              		.loc 1 1176 0
 3970              		.cfi_startproc
 3971              		@ args = 0, pretend = 0, frame = 0
 3972              		@ frame_needed = 0, uses_anonymous_args = 0
 3973              	.LVL347:
 3974 0000 70B5     		push	{r4, r5, r6, lr}
 3975              	.LCFI15:
 3976              		.cfi_def_cfa_offset 16
 3977              		.cfi_offset 14, -4
 3978              		.cfi_offset 6, -8
 3979              		.cfi_offset 5, -12
 3980              		.cfi_offset 4, -16
1183:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = FR_NO_FILE;
 3981              		.loc 1 1183 0
 3982 0002 0423     		movs	r3, #4
1176:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 3983              		.loc 1 1176 0
 3984 0004 0446     		mov	r4, r0
1185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3985              		.loc 1 1185 0
 3986 0006 0F4E     		ldr	r6, .L259
1213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
 3987              		.loc 1 1213 0
 3988 0008 0F4D     		ldr	r5, .L259+4
1184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (dj->sect) {
 3989              		.loc 1 1184 0
 3990 000a 0FE0     		b	.L251
 3991              	.LVL348:
 3992              	.L255:
1185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = move_window(dj->fs, dj->sect);
 3993              		.loc 1 1185 0
 3994 000c 2068     		ldr	r0, [r4, #0]
 3995 000e B047     		blx	r6
 3996              	.LVL349:
1186:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
 3997              		.loc 1 1186 0
 3998 0010 B0B9     		cbnz	r0, .L252
1187:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dir = dj->dir;					/* Ptr to the directory entry of current index */
 3999              		.loc 1 1187 0
 4000 0012 6369     		ldr	r3, [r4, #20]
 4001              	.LVL350:
1188:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		c = dir[DIR_Name];
 4002              		.loc 1 1188 0
 4003 0014 1A78     		ldrb	r2, [r3, #0]	@ zero_extendqisi2
 4004              	.LVL351:
1189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 4005              		.loc 1 1189 0
 4006 0016 92B1     		cbz	r2, .L257
1210:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 4007              		.loc 1 1210 0
 4008 0018 E52A     		cmp	r2, #229
 4009 001a 02D0     		beq	.L253
1210:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c != 0xE5 && (_FS_RPATH || c != '.') && !(dir[DIR_Attr] & AM_VOL))	/* Is it a valid entry? */
 4010              		.loc 1 1210 0 is_stmt 0 discriminator 1
 4011 001c DB7A     		ldrb	r3, [r3, #11]	@ zero_extendqisi2
 4012 001e 1B07     		lsls	r3, r3, #28
 4013 0020 0CD5     		bpl	.L254
 4014              	.L253:
1213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = dir_next(dj, 0);				/* Next entry */
 4015              		.loc 1 1213 0 is_stmt 1
 4016 0022 2046     		mov	r0, r4
 4017              	.LVL352:
 4018 0024 0021     		movs	r1, #0
 4019 0026 A847     		blx	r5
 4020              	.LVL353:
 4021 0028 0346     		mov	r3, r0
 4022              	.LVL354:
1214:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) break;
 4023              		.loc 1 1214 0
 4024 002a 48B9     		cbnz	r0, .L252
 4025              	.LVL355:
 4026              	.L251:
1184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (dj->sect) {
 4027              		.loc 1 1184 0 discriminator 1
 4028 002c 2169     		ldr	r1, [r4, #16]
 4029 002e 0029     		cmp	r1, #0
 4030 0030 ECD1     		bne	.L255
1184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (dj->sect) {
 4031              		.loc 1 1184 0 is_stmt 0
 4032 0032 1846     		mov	r0, r3
 4033              	.LVL356:
1217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 4034              		.loc 1 1217 0 is_stmt 1
 4035 0034 13B1     		cbz	r3, .L254
 4036              	.LVL357:
 4037              	.L256:
1217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) dj->sect = 0;
 4038              		.loc 1 1217 0 is_stmt 0 discriminator 1
 4039 0036 0022     		movs	r2, #0
 4040 0038 2261     		str	r2, [r4, #16]
 4041 003a 1846     		mov	r0, r3
 4042              	.L254:
1220:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 4043              		.loc 1 1220 0 is_stmt 1
 4044 003c 70BD     		pop	{r4, r5, r6, pc}
 4045              	.LVL358:
 4046              	.L257:
1189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 4047              		.loc 1 1189 0
 4048 003e 0420     		movs	r0, #4
 4049              	.LVL359:
 4050              	.L252:
1184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	while (dj->sect) {
 4051              		.loc 1 1184 0
 4052 0040 0346     		mov	r3, r0
 4053 0042 F8E7     		b	.L256
 4054              	.L260:
 4055              		.align	2
 4056              	.L259:
 4057 0044 00000000 		.word	move_window
 4058 0048 00000000 		.word	dir_next
 4059              		.cfi_endproc
 4060              	.LFE14:
 4062              		.section	.text.remove_chain,"ax",%progbits
 4063              		.align	1
 4064              		.thumb
 4065              		.thumb_func
 4067              	remove_chain:
 4068              	.LFB9:
 716:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4069              		.loc 1 716 0
 4070              		.cfi_startproc
 4071              		@ args = 0, pretend = 0, frame = 0
 4072              		@ frame_needed = 0, uses_anonymous_args = 0
 4073              	.LVL360:
 723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 4074              		.loc 1 723 0
 4075 0000 0129     		cmp	r1, #1
 716:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4076              		.loc 1 716 0
 4077 0002 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 4078              	.LCFI16:
 4079              		.cfi_def_cfa_offset 32
 4080              		.cfi_offset 14, -4
 4081              		.cfi_offset 9, -8
 4082              		.cfi_offset 8, -12
 4083              		.cfi_offset 7, -16
 4084              		.cfi_offset 6, -20
 4085              		.cfi_offset 5, -24
 4086              		.cfi_offset 4, -28
 4087              		.cfi_offset 3, -32
 716:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4088              		.loc 1 716 0
 4089 0006 0446     		mov	r4, r0
 4090 0008 8946     		mov	r9, r1
 723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 4091              		.loc 1 723 0
 4092 000a 28D9     		bls	.L267
 723:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 4093              		.loc 1 723 0 is_stmt 0 discriminator 1
 4094 000c C369     		ldr	r3, [r0, #28]
 4095 000e 9942     		cmp	r1, r3
 4096 0010 16D3     		bcc	.L272
 4097 0012 27E0     		b	.L274
 4098              	.LVL361:
 4099              	.L266:
 4100              	.LBB60:
 4101              	.LBB61:
 729:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 4102              		.loc 1 729 0 is_stmt 1
 4103 0014 2046     		mov	r0, r4
 4104 0016 4946     		mov	r1, r9
 4105 0018 C047     		blx	r8
 4106 001a 0546     		mov	r5, r0
 4107              	.LVL362:
 730:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 0) break;				/* Empty cluster? */
 4108              		.loc 1 730 0
 4109 001c D0B1     		cbz	r0, .L269
 731:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 4110              		.loc 1 731 0
 4111 001e 0128     		cmp	r0, #1
 4112 0020 1DD0     		beq	.L267
 732:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 4113              		.loc 1 732 0
 4114 0022 411C     		adds	r1, r0, #1
 4115 0024 18D0     		beq	.L271
 733:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 4116              		.loc 1 733 0
 4117 0026 2046     		mov	r0, r4
 4118              	.LVL363:
 4119 0028 4946     		mov	r1, r9
 4120 002a 0022     		movs	r2, #0
 4121 002c B847     		blx	r7
 4122              	.LVL364:
 734:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 4123              		.loc 1 734 0
 4124 002e D0B9     		cbnz	r0, .L262
 735:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSInfo */
 4125              		.loc 1 735 0
 4126 0030 2369     		ldr	r3, [r4, #16]
 4127 0032 5A1C     		adds	r2, r3, #1
 4128 0034 02D0     		beq	.L265
 736:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->free_clust++;
 4129              		.loc 1 736 0
 4130 0036 581C     		adds	r0, r3, #1
 4131              	.LVL365:
 4132 0038 2061     		str	r0, [r4, #16]
 737:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->fsi_flag = 1;
 4133              		.loc 1 737 0
 4134 003a 6671     		strb	r6, [r4, #5]
 4135              	.L265:
 4136              	.LBE61:
 4137              	.LBE60:
 716:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4138              		.loc 1 716 0
 4139 003c A946     		mov	r9, r5
 4140              	.LVL366:
 4141 003e 03E0     		b	.L273
 4142              	.LVL367:
 4143              	.L272:
 4144              	.LBB63:
 4145              	.LBB62:
 729:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			nxt = get_fat(fs, clst);			/* Get cluster status */
 4146              		.loc 1 729 0
 4147 0040 DFF82C80 		ldr	r8, .L275+4
 733:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 4148              		.loc 1 733 0
 4149 0044 094F     		ldr	r7, .L275
 737:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fs->fsi_flag = 1;
 4150              		.loc 1 737 0
 4151 0046 0126     		movs	r6, #1
 4152              	.LVL368:
 4153              	.L273:
 728:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while (clst < fs->n_fatent) {			/* Not a last link? */
 4154              		.loc 1 728 0
 4155 0048 E169     		ldr	r1, [r4, #28]
 4156 004a 8945     		cmp	r9, r1
 4157 004c E2D3     		bcc	.L266
 4158 004e 0020     		movs	r0, #0
 4159 0050 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4160              	.LVL369:
 4161              	.L269:
 4162 0054 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4163              	.L271:
 732:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 4164              		.loc 1 732 0
 4165 0058 0120     		movs	r0, #1
 4166              	.LVL370:
 4167 005a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4168              	.LVL371:
 4169              	.L267:
 4170              	.LBE62:
 4171              	.LBE63:
 724:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = FR_INT_ERR;
 4172              		.loc 1 724 0
 4173 005e 0220     		movs	r0, #2
 4174 0060 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4175              	.LVL372:
 4176              	.L274:
 4177 0064 0220     		movs	r0, #2
 4178              	.LVL373:
 4179              	.L262:
 754:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 4180              		.loc 1 754 0
 4181 0066 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 4182              	.L276:
 4183 006a 00BF     		.align	2
 4184              	.L275:
 4185 006c 00000000 		.word	put_fat
 4186 0070 00000000 		.word	get_fat
 4187              		.cfi_endproc
 4188              	.LFE9:
 4190              		.section	.text.f_mount,"ax",%progbits
 4191              		.align	1
 4192              		.global	f_mount
 4193              		.thumb
 4194              		.thumb_func
 4196              	f_mount:
 4197              	.LFB23:
1967:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4198              		.loc 1 1967 0
 4199              		.cfi_startproc
 4200              		@ args = 0, pretend = 0, frame = 0
 4201              		@ frame_needed = 0, uses_anonymous_args = 0
 4202              	.LVL374:
 4203 0000 38B5     		push	{r3, r4, r5, lr}
 4204              	.LCFI17:
 4205              		.cfi_def_cfa_offset 16
 4206              		.cfi_offset 14, -4
 4207              		.cfi_offset 5, -8
 4208              		.cfi_offset 4, -12
 4209              		.cfi_offset 3, -16
1967:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4210              		.loc 1 1967 0
 4211 0002 0C46     		mov	r4, r1
1971:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (vol >= _VOLUMES)			/* Check if the drive number is valid */
 4212              		.loc 1 1971 0
 4213 0004 68B9     		cbnz	r0, .L282
1973:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	rfs = FatFs[vol];				/* Get current fs object */
 4214              		.loc 1 1973 0
 4215 0006 084D     		ldr	r5, .L283
 4216 0008 2B68     		ldr	r3, [r5, #0]
 4217              	.LVL375:
1975:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (rfs) {
 4218              		.loc 1 1975 0
 4219 000a 03B1     		cbz	r3, .L279
1982:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rfs->fs_type = 0;			/* Clear old fs object */
 4220              		.loc 1 1982 0
 4221 000c 1870     		strb	r0, [r3, #0]
 4222              	.L279:
1985:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fs) {
 4223              		.loc 1 1985 0
 4224 000e 14B1     		cbz	r4, .L280
1986:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fs->fs_type = 0;			/* Clear new fs object */
 4225              		.loc 1 1986 0
 4226 0010 0023     		movs	r3, #0
 4227 0012 2370     		strb	r3, [r4, #0]
 4228 0014 02E0     		b	.L281
 4229              	.L280:
1992:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		disk_deinitialize( vol );
 4230              		.loc 1 1992 0
 4231 0016 2046     		mov	r0, r4
 4232              	.LVL376:
 4233 0018 0449     		ldr	r1, .L283+4
 4234              	.LVL377:
 4235 001a 8847     		blx	r1
 4236              	.LVL378:
 4237              	.L281:
1993:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	FatFs[vol] = fs;				/* Register new fs object */
 4238              		.loc 1 1993 0
 4239 001c 2C60     		str	r4, [r5, #0]
1995:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 4240              		.loc 1 1995 0
 4241 001e 0020     		movs	r0, #0
 4242 0020 38BD     		pop	{r3, r4, r5, pc}
 4243              	.LVL379:
 4244              	.L282:
1972:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		return FR_INVALID_DRIVE;
 4245              		.loc 1 1972 0
 4246 0022 0B20     		movs	r0, #11
 4247              	.LVL380:
1996:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 4248              		.loc 1 1996 0
 4249 0024 38BD     		pop	{r3, r4, r5, pc}
 4250              	.L284:
 4251 0026 00BF     		.align	2
 4252              	.L283:
 4253 0028 00000000 		.word	.LANCHOR1
 4254 002c 00000000 		.word	disk_deinitialize
 4255              		.cfi_endproc
 4256              	.LFE23:
 4258              		.section	.text.f_open,"ax",%progbits
 4259              		.align	1
 4260              		.global	f_open
 4261              		.thumb
 4262              		.thumb_func
 4264              	f_open:
 4265              	.LFB24:
2010:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4266              		.loc 1 2010 0
 4267              		.cfi_startproc
 4268              		@ args = 0, pretend = 0, frame = 48
 4269              		@ frame_needed = 0, uses_anonymous_args = 0
 4270              	.LVL381:
 4271 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 4272              	.LCFI18:
 4273              		.cfi_def_cfa_offset 24
 4274              		.cfi_offset 14, -4
 4275              		.cfi_offset 8, -8
 4276              		.cfi_offset 7, -12
 4277              		.cfi_offset 6, -16
 4278              		.cfi_offset 5, -20
 4279              		.cfi_offset 4, -24
 4280 0004 8CB0     		sub	sp, sp, #48
 4281              	.LCFI19:
 4282              		.cfi_def_cfa_offset 72
2010:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4283              		.loc 1 2010 0
 4284 0006 0546     		mov	r5, r0
 4285 0008 0CA8     		add	r0, sp, #48
 4286              	.LVL382:
 4287 000a 40F82C1D 		str	r1, [r0, #-44]!
2020:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 4288              		.loc 1 2020 0
 4289 000e 02F01F04 		and	r4, r2, #31
 4290              	.LVL383:
2017:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fp->fs = 0;			/* Clear file object */
 4291              		.loc 1 2017 0
 4292 0012 0021     		movs	r1, #0
 4293              	.LVL384:
 4294 0014 2960     		str	r1, [r5, #0]
2021:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, (BYTE)(mode & ~FA_READ));
 4295              		.loc 1 2021 0
 4296 0016 04F01E02 		and	r2, r4, #30
 4297 001a 02A9     		add	r1, sp, #8
 4298 001c 484E     		ldr	r6, .L304
 4299 001e B047     		blx	r6
 4300              	.LVL385:
2026:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	INIT_BUF(dj);
 4301              		.loc 1 2026 0
 4302 0020 09AB     		add	r3, sp, #36
 4303 0022 0893     		str	r3, [sp, #32]
2027:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK)
 4304              		.loc 1 2027 0
 4305 0024 18B9     		cbnz	r0, .L286
2028:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 4306              		.loc 1 2028 0
 4307 0026 02A8     		add	r0, sp, #8
 4308              	.LVL386:
 4309 0028 0199     		ldr	r1, [sp, #4]
 4310 002a 464A     		ldr	r2, .L304+4
 4311 002c 9047     		blx	r2
 4312              	.LVL387:
 4313              	.L286:
2029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	dir = dj.dir;
 4314              		.loc 1 2029 0
 4315 002e 079E     		ldr	r6, [sp, #28]
 4316              	.LVL388:
2032:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 4317              		.loc 1 2032 0
 4318 0030 18B9     		cbnz	r0, .L287
2034:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 4319              		.loc 1 2034 0
 4320 0032 002E     		cmp	r6, #0
 4321 0034 0CBF     		ite	eq
 4322 0036 0620     		moveq	r0, #6
 4323 0038 0020     		movne	r0, #0
 4324              	.LVL389:
 4325              	.L287:
2041:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 4326              		.loc 1 2041 0
 4327 003a 14F01C0F 		tst	r4, #28
 4328 003e 46D0     		beq	.L288
 4329              	.LBB64:
2044:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) {					/* No file, create new */
 4330              		.loc 1 2044 0
 4331 0040 50B1     		cbz	r0, .L289
2045:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 4332              		.loc 1 2045 0
 4333 0042 0428     		cmp	r0, #4
 4334 0044 02D1     		bne	.L290
2049:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_register(&dj);
 4335              		.loc 1 2049 0
 4336 0046 02A8     		add	r0, sp, #8
 4337              	.LVL390:
 4338 0048 3F4B     		ldr	r3, .L304+8
 4339 004a 9847     		blx	r3
 4340              	.LVL391:
 4341              	.L290:
2052:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;					/* New entry */
 4342              		.loc 1 2052 0
 4343 004c 079E     		ldr	r6, [sp, #28]
 4344              	.LVL392:
2062:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 4345              		.loc 1 2062 0
 4346 004e 0028     		cmp	r0, #0
 4347 0050 71D1     		bne	.L298
2051:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mode |= FA_CREATE_ALWAYS;		/* File is created */
 4348              		.loc 1 2051 0
 4349 0052 44F00804 		orr	r4, r4, #8
 4350              	.LVL393:
 4351 0056 06E0     		b	.L292
 4352              	.LVL394:
 4353              	.L289:
2056:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_EXIST;
 4354              		.loc 1 2056 0
 4355 0058 0820     		movs	r0, #8
 4356              	.LVL395:
2055:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (mode & FA_CREATE_NEW) {		/* Cannot create new */
 4357              		.loc 1 2055 0
 4358 005a 6307     		lsls	r3, r4, #29
 4359 005c 6BD4     		bmi	.L298
2058:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dir[DIR_Attr] & (AM_RDO | AM_DIR))	/* Cannot overwrite it (R/O or DIR) */
 4360              		.loc 1 2058 0
 4361 005e F07A     		ldrb	r0, [r6, #11]	@ zero_extendqisi2
 4362 0060 10F0110F 		tst	r0, #17
 4363 0064 6AD1     		bne	.L303
 4364              	.LVL396:
 4365              	.L292:
2062:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 4366              		.loc 1 2062 0 discriminator 1
 4367 0066 2007     		lsls	r0, r4, #28
 4368 0068 3BD5     		bpl	.L295
2063:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dw = get_fattime();					/* Created time */
 4369              		.loc 1 2063 0
 4370 006a 3848     		ldr	r0, .L304+12
 4371 006c 8047     		blx	r0
 4372              	.LVL397:
2064:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 4373              		.loc 1 2064 0
 4374 006e C0F30722 		ubfx	r2, r0, #8, #8
 4375 0072 030C     		lsrs	r3, r0, #16
 4376 0074 010E     		lsrs	r1, r0, #24
2067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cl = LD_CLUST(dir);					/* Get start cluster */
 4377              		.loc 1 2067 0
 4378 0076 96F814C0 		ldrb	ip, [r6, #20]	@ zero_extendqisi2
 4379 007a 777D     		ldrb	r7, [r6, #21]	@ zero_extendqisi2
2064:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 4380              		.loc 1 2064 0
 4381 007c B073     		strb	r0, [r6, #14]
 4382 007e F273     		strb	r2, [r6, #15]
2067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			cl = LD_CLUST(dir);					/* Get start cluster */
 4383              		.loc 1 2067 0
 4384 0080 F07E     		ldrb	r0, [r6, #27]	@ zero_extendqisi2
 4385              	.LVL398:
 4386 0082 B27E     		ldrb	r2, [r6, #26]	@ zero_extendqisi2
 4387 0084 4CEA0727 		orr	r7, ip, r7, lsl #8
 4388 0088 42EA002C 		orr	ip, r2, r0, lsl #8
 4389              	.LVL399:
2069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj.fs->wflag = 1;
 4390              		.loc 1 2069 0
 4391 008c 0298     		ldr	r0, [sp, #8]
2064:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_CrtTime, dw);
 4392              		.loc 1 2064 0
 4393 008e 3374     		strb	r3, [r6, #16]
 4394 0090 7174     		strb	r1, [r6, #17]
2065:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 4395              		.loc 1 2065 0
 4396 0092 0023     		movs	r3, #0
2069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj.fs->wflag = 1;
 4397              		.loc 1 2069 0
 4398 0094 0121     		movs	r1, #1
2070:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
 4399              		.loc 1 2070 0
 4400 0096 5CEA0747 		orrs	r7, ip, r7, lsl #16
 4401              	.LVL400:
2065:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir[DIR_Attr] = 0;					/* Reset attribute */
 4402              		.loc 1 2065 0
 4403 009a F372     		strb	r3, [r6, #11]
2066:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_DWORD(dir+DIR_FileSize, 0);		/* size = 0 */
 4404              		.loc 1 2066 0
 4405 009c 3377     		strb	r3, [r6, #28]
 4406 009e 7377     		strb	r3, [r6, #29]
 4407 00a0 B377     		strb	r3, [r6, #30]
 4408 00a2 F377     		strb	r3, [r6, #31]
2068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			ST_CLUST(dir, 0);					/* cluster = 0 */
 4409              		.loc 1 2068 0
 4410 00a4 B376     		strb	r3, [r6, #26]
 4411 00a6 F376     		strb	r3, [r6, #27]
 4412 00a8 3375     		strb	r3, [r6, #20]
 4413 00aa 7375     		strb	r3, [r6, #21]
2069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj.fs->wflag = 1;
 4414              		.loc 1 2069 0
 4415 00ac 0171     		strb	r1, [r0, #4]
2070:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cl) {							/* Remove the cluster chain if exist */
 4416              		.loc 1 2070 0
 4417 00ae 18D0     		beq	.L295
2072:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = remove_chain(dj.fs, cl);
 4418              		.loc 1 2072 0
 4419 00b0 3946     		mov	r1, r7
 4420 00b2 274B     		ldr	r3, .L304+16
2071:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dw = dj.fs->winsect;
 4421              		.loc 1 2071 0
 4422 00b4 D0F83080 		ldr	r8, [r0, #48]
 4423              	.LVL401:
2072:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = remove_chain(dj.fs, cl);
 4424              		.loc 1 2072 0
 4425 00b8 9847     		blx	r3
 4426              	.LVL402:
2073:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) {
 4427              		.loc 1 2073 0
 4428 00ba 0028     		cmp	r0, #0
 4429 00bc 3BD1     		bne	.L298
2074:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 4430              		.loc 1 2074 0
 4431 00be 0298     		ldr	r0, [sp, #8]
 4432              	.LVL403:
 4433 00c0 013F     		subs	r7, r7, #1
 4434              	.LVL404:
 4435 00c2 C760     		str	r7, [r0, #12]
2075:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = move_window(dj.fs, dw);
 4436              		.loc 1 2075 0
 4437 00c4 4146     		mov	r1, r8
 4438 00c6 234A     		ldr	r2, .L304+20
 4439 00c8 9047     		blx	r2
 4440              	.LVL405:
 4441              	.LBE64:
2090:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 4442              		.loc 1 2090 0
 4443 00ca 50B1     		cbz	r0, .L295
 4444 00cc 33E0     		b	.L298
 4445              	.LVL406:
 4446              	.L288:
2081:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow succeeded */
 4447              		.loc 1 2081 0
 4448 00ce 0028     		cmp	r0, #0
 4449 00d0 31D1     		bne	.L298
2082:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 4450              		.loc 1 2082 0
 4451 00d2 F37A     		ldrb	r3, [r6, #11]	@ zero_extendqisi2
2083:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_FILE;
 4452              		.loc 1 2083 0
 4453 00d4 0420     		movs	r0, #4
 4454              	.LVL407:
2082:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dir[DIR_Attr] & AM_DIR) {		/* It is a directory */
 4455              		.loc 1 2082 0
 4456 00d6 D906     		lsls	r1, r3, #27
 4457 00d8 2DD4     		bmi	.L298
2085:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 4458              		.loc 1 2085 0
 4459 00da A207     		lsls	r2, r4, #30
 4460 00dc 01D5     		bpl	.L295
2085:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 4461              		.loc 1 2085 0 is_stmt 0 discriminator 1
 4462 00de DB07     		lsls	r3, r3, #31
 4463 00e0 2CD4     		bmi	.L303
 4464              	.LVL408:
 4465              	.L295:
2093:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 4466              		.loc 1 2093 0 is_stmt 1
 4467 00e2 029B     		ldr	r3, [sp, #8]
2091:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (mode & FA_CREATE_ALWAYS)			/* Set file change flag if created or overwritten */
 4468              		.loc 1 2091 0
 4469 00e4 2007     		lsls	r0, r4, #28
2093:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 4470              		.loc 1 2093 0
 4471 00e6 196B     		ldr	r1, [r3, #48]
2092:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			mode |= FA__WRITTEN;
 4472              		.loc 1 2092 0
 4473 00e8 48BF     		it	mi
 4474 00ea 44F02004 		orrmi	r4, r4, #32
 4475              	.LVL409:
2114:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->flag = mode;					/* File access mode */
 4476              		.loc 1 2114 0
 4477 00ee AC71     		strb	r4, [r5, #6]
2093:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dir_sect = dj.fs->winsect;			/* Pointer to the directory entry */
 4478              		.loc 1 2093 0
 4479 00f0 E961     		str	r1, [r5, #28]
2094:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dir_ptr = dir;
 4480              		.loc 1 2094 0
 4481 00f2 2E62     		str	r6, [r5, #32]
2115:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->org_clust =	LD_CLUST(dir);		/* File start cluster */
 4482              		.loc 1 2115 0
 4483 00f4 707D     		ldrb	r0, [r6, #21]	@ zero_extendqisi2
 4484 00f6 96F814C0 		ldrb	ip, [r6, #20]	@ zero_extendqisi2
 4485 00fa F27E     		ldrb	r2, [r6, #27]	@ zero_extendqisi2
 4486 00fc B17E     		ldrb	r1, [r6, #26]	@ zero_extendqisi2
 4487 00fe 4CEA002E 		orr	lr, ip, r0, lsl #8
 4488 0102 41EA022C 		orr	ip, r1, r2, lsl #8
 4489 0106 4CEA0E40 		orr	r0, ip, lr, lsl #16
 4490 010a 2861     		str	r0, [r5, #16]
2116:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 4491              		.loc 1 2116 0
 4492 010c B27F     		ldrb	r2, [r6, #30]	@ zero_extendqisi2
 4493 010e F17F     		ldrb	r1, [r6, #31]	@ zero_extendqisi2
 4494 0110 96F81CE0 		ldrb	lr, [r6, #28]	@ zero_extendqisi2
 4495 0114 1004     		lsls	r0, r2, #16
 4496 0116 40EA0162 		orr	r2, r0, r1, lsl #24
 4497 011a 707F     		ldrb	r0, [r6, #29]	@ zero_extendqisi2
 4498 011c 42EA0E0C 		orr	ip, r2, lr
2122:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 4499              		.loc 1 2122 0
 4500 0120 B3F806E0 		ldrh	lr, [r3, #6]
2116:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 4501              		.loc 1 2116 0
 4502 0124 4CEA0021 		orr	r1, ip, r0, lsl #8
2117:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = 0;						/* File pointer */
 4503              		.loc 1 2117 0
 4504 0128 0020     		movs	r0, #0
2116:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
 4505              		.loc 1 2116 0
 4506 012a E960     		str	r1, [r5, #12]
2117:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = 0;						/* File pointer */
 4507              		.loc 1 2117 0
 4508 012c A860     		str	r0, [r5, #8]
2118:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->dsect = 0;
 4509              		.loc 1 2118 0
 4510 012e A861     		str	r0, [r5, #24]
2122:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fs = dj.fs; fp->id = dj.fs->id;	/* Validate file object */
 4511              		.loc 1 2122 0
 4512 0130 2B60     		str	r3, [r5, #0]
 4513 0132 A5F804E0 		strh	lr, [r5, #4]	@ movhi
 4514              	.LVL410:
 4515              	.L298:
2126:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 4516              		.loc 1 2126 0
 4517 0136 0CB0     		add	sp, sp, #48
 4518 0138 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 4519              	.LVL411:
 4520              	.L303:
2086:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_DENIED;
 4521              		.loc 1 2086 0
 4522 013c 0720     		movs	r0, #7
 4523              	.LVL412:
 4524 013e FAE7     		b	.L298
 4525              	.L305:
 4526              		.align	2
 4527              	.L304:
 4528 0140 00000000 		.word	chk_mounted
 4529 0144 00000000 		.word	follow_path
 4530 0148 00000000 		.word	dir_register
 4531 014c 00000000 		.word	get_fattime
 4532 0150 00000000 		.word	remove_chain
 4533 0154 00000000 		.word	move_window
 4534              		.cfi_endproc
 4535              	.LFE24:
 4537              		.section	.text.f_read,"ax",%progbits
 4538              		.align	1
 4539              		.global	f_read
 4540              		.thumb
 4541              		.thumb_func
 4543              	f_read:
 4544              	.LFB25:
2141:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4545              		.loc 1 2141 0
 4546              		.cfi_startproc
 4547              		@ args = 0, pretend = 0, frame = 8
 4548              		@ frame_needed = 0, uses_anonymous_args = 0
 4549              	.LVL413:
 4550 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4551              	.LCFI20:
 4552              		.cfi_def_cfa_offset 48
 4553              		.cfi_offset 14, -4
 4554              		.cfi_offset 11, -8
 4555              		.cfi_offset 10, -12
 4556              		.cfi_offset 9, -16
 4557              		.cfi_offset 8, -20
 4558              		.cfi_offset 7, -24
 4559              		.cfi_offset 6, -28
 4560              		.cfi_offset 5, -32
 4561              		.cfi_offset 4, -36
 4562              		.cfi_offset 2, -40
 4563              		.cfi_offset 1, -44
 4564              		.cfi_offset 0, -48
2141:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4565              		.loc 1 2141 0
 4566 0004 0193     		str	r3, [sp, #4]
2148:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*br = 0;	/* Initialize byte counter */
 4567              		.loc 1 2148 0
 4568 0006 019D     		ldr	r5, [sp, #4]
2141:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4569              		.loc 1 2141 0
 4570 0008 0446     		mov	r4, r0
2148:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*br = 0;	/* Initialize byte counter */
 4571              		.loc 1 2148 0
 4572 000a 0020     		movs	r0, #0
 4573              	.LVL414:
 4574 000c 2860     		str	r0, [r5, #0]
2141:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4575              		.loc 1 2141 0
 4576 000e 8946     		mov	r9, r1
 4577              	.LVL415:
2150:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 4578              		.loc 1 2150 0
 4579 0010 2068     		ldr	r0, [r4, #0]
 4580 0012 A188     		ldrh	r1, [r4, #4]
 4581              	.LVL416:
 4582 0014 584B     		ldr	r3, .L330
 4583              	.LVL417:
2141:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4584              		.loc 1 2141 0
 4585 0016 1646     		mov	r6, r2
2150:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 4586              		.loc 1 2150 0
 4587 0018 9847     		blx	r3
 4588              	.LVL418:
 4589 001a 0546     		mov	r5, r0
 4590              	.LVL419:
2151:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4591              		.loc 1 2151 0
 4592 001c 0028     		cmp	r0, #0
 4593 001e 40F0A880 		bne	.L307
2152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
 4594              		.loc 1 2152 0
 4595 0022 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4596 0024 1A06     		lsls	r2, r3, #24
 4597 0026 00F1A180 		bmi	.L325
2154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 4598              		.loc 1 2154 0
 4599 002a DB07     		lsls	r3, r3, #31
 4600 002c 40F1A080 		bpl	.L326
 4601              	.LVL420:
2156:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	remain = fp->fsize - fp->fptr;
 4602              		.loc 1 2156 0
 4603 0030 E268     		ldr	r2, [r4, #12]
 4604 0032 A168     		ldr	r1, [r4, #8]
 4605 0034 0746     		mov	r7, r0
 4606 0036 C1EB0208 		rsb	r8, r1, r2
2154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(fp->flag & FA_READ)) 						/* Check access mode */
 4607              		.loc 1 2154 0
 4608 003a 4645     		cmp	r6, r8
 4609 003c 38BF     		it	cc
 4610 003e B046     		movcc	r8, r6
 4611 0040 8EE0     		b	.L308
 4612              	.LVL421:
 4613              	.L324:
2161:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 4614              		.loc 1 2161 0
 4615 0042 A368     		ldr	r3, [r4, #8]
 4616 0044 5FEAC35C 		lsls	ip, r3, #23
 4617 0048 6ED1     		bne	.L309
2162:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 4618              		.loc 1 2162 0
 4619 004a 2068     		ldr	r0, [r4, #0]
 4620 004c 90F802E0 		ldrb	lr, [r0, #2]	@ zero_extendqisi2
 4621 0050 0EF1FF3C 		add	ip, lr, #-1
 4622 0054 0CEA532B 		and	fp, ip, r3, lsr #9
 4623 0058 5FFA8BFB 		uxtb	fp, fp
 4624              	.LVL422:
2163:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
 4625              		.loc 1 2163 0
 4626 005c BBF1000F 		cmp	fp, #0
 4627 0060 0AD1     		bne	.L310
2165:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 4628              		.loc 1 2165 0
 4629 0062 0BB9     		cbnz	r3, .L311
2165:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 4630              		.loc 1 2165 0 is_stmt 0 discriminator 1
 4631 0064 2069     		ldr	r0, [r4, #16]
 4632 0066 02E0     		b	.L312
 4633              	.L311:
2165:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->org_clust : get_fat(fp->fs, fp->curr_clust);
 4634              		.loc 1 2165 0 discriminator 2
 4635 0068 6169     		ldr	r1, [r4, #20]
 4636 006a 444B     		ldr	r3, .L330+4
 4637 006c 9847     		blx	r3
 4638              	.L312:
 4639              	.LVL423:
2166:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst <= 1) ABORT(fp->fs, FR_INT_ERR);
 4640              		.loc 1 2166 0 is_stmt 1
 4641 006e 0128     		cmp	r0, #1
 4642 0070 09D9     		bls	.L327
 4643              	.L313:
2167:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4644              		.loc 1 2167 0
 4645 0072 451C     		adds	r5, r0, #1
 4646 0074 50D0     		beq	.L328
 4647              	.L314:
2168:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
 4648              		.loc 1 2168 0
 4649 0076 6061     		str	r0, [r4, #20]
 4650              	.LVL424:
 4651              	.L310:
2170:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 4652              		.loc 1 2170 0
 4653 0078 D4F800A0 		ldr	sl, [r4, #0]
 4654 007c 6169     		ldr	r1, [r4, #20]
 4655 007e 5046     		mov	r0, sl
 4656 0080 3F4D     		ldr	r5, .L330+8
 4657 0082 A847     		blx	r5
 4658              	.LVL425:
2171:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4659              		.loc 1 2171 0
 4660 0084 20B9     		cbnz	r0, .L315
 4661              	.LVL426:
 4662              	.L327:
2171:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4663              		.loc 1 2171 0 is_stmt 0 discriminator 1
 4664 0086 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 4665 0088 62F07F00 		orn	r0, r2, #127
 4666 008c A071     		strb	r0, [r4, #6]
 4667 008e 6DE0     		b	.L325
 4668              	.LVL427:
 4669              	.L315:
2174:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
 4670              		.loc 1 2174 0 is_stmt 1
 4671 0090 5FEA5825 		lsrs	r5, r8, #9
2172:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect += csect;
 4672              		.loc 1 2172 0
 4673 0094 00EB0B06 		add	r6, r0, fp
 4674              	.LVL428:
2174:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cc) {								/* Read maximum contiguous sectors directly */
 4675              		.loc 1 2174 0
 4676 0098 22D0     		beq	.L316
2175:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
 4677              		.loc 1 2175 0
 4678 009a 9AF80210 		ldrb	r1, [sl, #2]	@ zero_extendqisi2
 4679 009e 05EB0B0E 		add	lr, r5, fp
 4680 00a2 8E45     		cmp	lr, r1
2176:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					cc = fp->fs->csize - csect;
 4681              		.loc 1 2176 0
 4682 00a4 88BF     		it	hi
 4683 00a6 CBEB0105 		rsbhi	r5, fp, r1
 4684              	.LVL429:
2177:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_read(fp->fs->drv, rbuff, sect, (BYTE)cc) != RES_OK)
 4685              		.loc 1 2177 0
 4686 00aa EBB2     		uxtb	r3, r5
 4687 00ac 9AF80100 		ldrb	r0, [sl, #1]	@ zero_extendqisi2
 4688 00b0 4946     		mov	r1, r9
 4689 00b2 3246     		mov	r2, r6
 4690 00b4 DFF8D4C0 		ldr	ip, .L330+20
 4691 00b8 E047     		blx	ip
 4692 00ba A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4693 00bc 0028     		cmp	r0, #0
 4694 00be 2CD1     		bne	.L329
 4695              	.L318:
2184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 4696              		.loc 1 2184 0
 4697 00c0 5906     		lsls	r1, r3, #25
 4698 00c2 0BD5     		bpl	.L319
2184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 4699              		.loc 1 2184 0 is_stmt 0 discriminator 1
 4700 00c4 A369     		ldr	r3, [r4, #24]
 4701 00c6 9E1B     		subs	r6, r3, r6
 4702              	.LVL430:
 4703 00c8 AE42     		cmp	r6, r5
 4704 00ca 07D2     		bcs	.L319
2185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 4705              		.loc 1 2185 0 is_stmt 1
 4706 00cc 09EB4620 		add	r0, r9, r6, lsl #9
 4707 00d0 04F12401 		add	r1, r4, #36
 4708 00d4 4FF40072 		mov	r2, #512
 4709 00d8 2A4B     		ldr	r3, .L330+12
 4710 00da 9847     		blx	r3
 4711              	.L319:
2188:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				rcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 4712              		.loc 1 2188 0
 4713 00dc 6D02     		lsls	r5, r5, #9
 4714              	.LVL431:
2189:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				continue;
 4715              		.loc 1 2189 0
 4716 00de 32E0     		b	.L320
 4717              	.LVL432:
 4718              	.L316:
2193:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {				/* Write sector I/O buffer if needed */
 4719              		.loc 1 2193 0
 4720 00e0 A579     		ldrb	r5, [r4, #6]	@ zero_extendqisi2
 4721              	.LVL433:
 4722 00e2 6A06     		lsls	r2, r5, #25
 4723 00e4 0CD5     		bpl	.L321
2194:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 4724              		.loc 1 2194 0
 4725 00e6 0123     		movs	r3, #1
 4726 00e8 9AF80100 		ldrb	r0, [sl, #1]	@ zero_extendqisi2
 4727 00ec 04F12401 		add	r1, r4, #36
 4728 00f0 A269     		ldr	r2, [r4, #24]
 4729 00f2 254D     		ldr	r5, .L330+16
 4730 00f4 A847     		blx	r5
 4731 00f6 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4732 00f8 78B9     		cbnz	r0, .L329
 4733              	.L322:
2196:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 4734              		.loc 1 2196 0
 4735 00fa 23F04000 		bic	r0, r3, #64
 4736 00fe A071     		strb	r0, [r4, #6]
 4737              	.L321:
2199:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 4738              		.loc 1 2199 0
 4739 0100 A269     		ldr	r2, [r4, #24]
 4740 0102 B242     		cmp	r2, r6
 4741 0104 0FD0     		beq	.L323
2200:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 4742              		.loc 1 2200 0
 4743 0106 2146     		mov	r1, r4
 4744 0108 51F8243B 		ldr	r3, [r1], #36
 4745 010c 3246     		mov	r2, r6
 4746 010e 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4747 0110 1E4D     		ldr	r5, .L330+20
 4748 0112 0123     		movs	r3, #1
 4749 0114 A847     		blx	r5
 4750 0116 30B1     		cbz	r0, .L323
 4751              	.LVL434:
 4752              	.L328:
2201:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ABORT(fp->fs, FR_DISK_ERR);
 4753              		.loc 1 2201 0
 4754 0118 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4755              	.L329:
 4756 011a 63F07F0C 		orn	ip, r3, #127
 4757 011e 84F806C0 		strb	ip, [r4, #6]
 4758 0122 0125     		movs	r5, #1
 4759 0124 25E0     		b	.L307
 4760              	.LVL435:
 4761              	.L323:
2204:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->dsect = sect;
 4762              		.loc 1 2204 0
 4763 0126 A661     		str	r6, [r4, #24]
 4764              	.LVL436:
 4765              	.L309:
2206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 4766              		.loc 1 2206 0
 4767 0128 A268     		ldr	r2, [r4, #8]
2213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 4768              		.loc 1 2213 0
 4769 012a DFF858C0 		ldr	ip, .L330+12
2206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 4770              		.loc 1 2206 0
 4771 012e D005     		lsls	r0, r2, #23
 4772 0130 C10D     		lsrs	r1, r0, #23
 4773 0132 C1F50075 		rsb	r5, r1, #512
 4774              	.LVL437:
 4775 0136 A845     		cmp	r8, r5
 4776 0138 38BF     		it	cc
 4777 013a 4546     		movcc	r5, r8
 4778              	.LVL438:
2213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 4779              		.loc 1 2213 0
 4780 013c 6118     		adds	r1, r4, r1
 4781 013e 2431     		adds	r1, r1, #36
 4782 0140 4846     		mov	r0, r9
 4783 0142 2A46     		mov	r2, r5
 4784 0144 E047     		blx	ip
 4785              	.L320:
2160:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 4786              		.loc 1 2160 0
 4787 0146 DDF804E0 		ldr	lr, [sp, #4]
 4788 014a A268     		ldr	r2, [r4, #8]
 4789 014c DEF80010 		ldr	r1, [lr, #0]
 4790 0150 5019     		adds	r0, r2, r5
 4791 0152 4B19     		adds	r3, r1, r5
 4792 0154 A060     		str	r0, [r4, #8]
 4793 0156 A944     		add	r9, r9, r5
 4794              	.LVL439:
 4795 0158 CEF80030 		str	r3, [lr, #0]
 4796 015c C5EB0808 		rsb	r8, r5, r8
 4797              	.LVL440:
 4798              	.L308:
2159:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for ( ;  btr;									/* Repeat until all data transferred */
 4799              		.loc 1 2159 0 discriminator 1
 4800 0160 B8F1000F 		cmp	r8, #0
 4801 0164 7FF46DAF 		bne	.L324
 4802 0168 3D46     		mov	r5, r7
 4803 016a 02E0     		b	.L307
 4804              	.LVL441:
 4805              	.L325:
2153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 4806              		.loc 1 2153 0
 4807 016c 0225     		movs	r5, #2
 4808 016e 00E0     		b	.L307
 4809              	.LVL442:
 4810              	.L326:
2155:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 4811              		.loc 1 2155 0
 4812 0170 0725     		movs	r5, #7
 4813              	.LVL443:
 4814              	.L307:
2218:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 4815              		.loc 1 2218 0
 4816 0172 2846     		mov	r0, r5
 4817 0174 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 4818              	.L331:
 4819              		.align	2
 4820              	.L330:
 4821 0178 00000000 		.word	validate
 4822 017c 00000000 		.word	get_fat
 4823 0180 00000000 		.word	clust2sect
 4824 0184 00000000 		.word	mem_cpy
 4825 0188 00000000 		.word	disk_write
 4826 018c 00000000 		.word	disk_read
 4827              		.cfi_endproc
 4828              	.LFE25:
 4830              		.section	.text.f_write,"ax",%progbits
 4831              		.align	1
 4832              		.global	f_write
 4833              		.thumb
 4834              		.thumb_func
 4836              	f_write:
 4837              	.LFB26:
2234:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4838              		.loc 1 2234 0
 4839              		.cfi_startproc
 4840              		@ args = 0, pretend = 0, frame = 8
 4841              		@ frame_needed = 0, uses_anonymous_args = 0
 4842              	.LVL444:
 4843 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 4844              	.LCFI21:
 4845              		.cfi_def_cfa_offset 48
 4846              		.cfi_offset 14, -4
 4847              		.cfi_offset 11, -8
 4848              		.cfi_offset 10, -12
 4849              		.cfi_offset 9, -16
 4850              		.cfi_offset 8, -20
 4851              		.cfi_offset 7, -24
 4852              		.cfi_offset 6, -28
 4853              		.cfi_offset 5, -32
 4854              		.cfi_offset 4, -36
 4855              		.cfi_offset 2, -40
 4856              		.cfi_offset 1, -44
 4857              		.cfi_offset 0, -48
2234:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4858              		.loc 1 2234 0
 4859 0004 0193     		str	r3, [sp, #4]
2242:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*bw = 0;	/* Initialize byte counter */
 4860              		.loc 1 2242 0
 4861 0006 019D     		ldr	r5, [sp, #4]
2234:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4862              		.loc 1 2234 0
 4863 0008 0446     		mov	r4, r0
2242:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*bw = 0;	/* Initialize byte counter */
 4864              		.loc 1 2242 0
 4865 000a 0020     		movs	r0, #0
 4866              	.LVL445:
 4867 000c 2860     		str	r0, [r5, #0]
2234:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4868              		.loc 1 2234 0
 4869 000e 8A46     		mov	sl, r1
 4870              	.LVL446:
2244:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 4871              		.loc 1 2244 0
 4872 0010 2068     		ldr	r0, [r4, #0]
 4873 0012 A188     		ldrh	r1, [r4, #4]
 4874              	.LVL447:
 4875 0014 624B     		ldr	r3, .L362
 4876              	.LVL448:
2234:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 4877              		.loc 1 2234 0
 4878 0016 9146     		mov	r9, r2
2244:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);					/* Check validity of the object */
 4879              		.loc 1 2244 0
 4880 0018 9847     		blx	r3
 4881              	.LVL449:
 4882 001a 0546     		mov	r5, r0
 4883              	.LVL450:
2245:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 4884              		.loc 1 2245 0
 4885 001c 0028     		cmp	r0, #0
 4886 001e 40F0BC80 		bne	.L333
2246:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)						/* Check abort flag */
 4887              		.loc 1 2246 0
 4888 0022 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4889 0024 1A06     		lsls	r2, r3, #24
 4890 0026 4CD4     		bmi	.L359
2248:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (!(fp->flag & FA_WRITE))						/* Check access mode */
 4891              		.loc 1 2248 0
 4892 0028 9B07     		lsls	r3, r3, #30
 4893 002a 40F1B580 		bpl	.L356
2250:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->fsize + btw < fp->fsize) btw = 0;		/* File size cannot reach 4GB */
 4894              		.loc 1 2250 0
 4895 002e E168     		ldr	r1, [r4, #12]
 4896 0030 8346     		mov	fp, r0
 4897 0032 19EB010F 		cmn	r9, r1
 4898 0036 28BF     		it	cs
 4899 0038 4FF00009 		movcs	r9, #0
 4900              	.LVL451:
 4901 003c 9BE0     		b	.L335
 4902              	.LVL452:
 4903              	.L353:
2254:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((fp->fptr % SS(fp->fs)) == 0) {			/* On the sector boundary? */
 4904              		.loc 1 2254 0
 4905 003e A368     		ldr	r3, [r4, #8]
 4906 0040 DA05     		lsls	r2, r3, #23
 4907 0042 7CD1     		bne	.L336
2255:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 4908              		.loc 1 2255 0
 4909 0044 2068     		ldr	r0, [r4, #0]
 4910 0046 90F802C0 		ldrb	ip, [r0, #2]	@ zero_extendqisi2
 4911 004a 0CF1FF32 		add	r2, ip, #-1
 4912 004e 02EA5328 		and	r8, r2, r3, lsr #9
 4913 0052 5FFA88F8 		uxtb	r8, r8
 4914              	.LVL453:
2256:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!csect) {							/* On the cluster boundary? */
 4915              		.loc 1 2256 0
 4916 0056 B8F1000F 		cmp	r8, #0
 4917 005a 14D1     		bne	.L337
2257:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fptr == 0) {				/* On the top of the file? */
 4918              		.loc 1 2257 0
 4919 005c 33B9     		cbnz	r3, .L338
2258:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = fp->org_clust;			/* Follow from the origin */
 4920              		.loc 1 2258 0
 4921 005e 2169     		ldr	r1, [r4, #16]
 4922              	.LVL454:
2259:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0)					/* When there is no cluster chain, */
 4923              		.loc 1 2259 0
 4924 0060 59B9     		cbnz	r1, .L339
2260:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						fp->org_clust = clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 4925              		.loc 1 2260 0
 4926 0062 504B     		ldr	r3, .L362+4
 4927 0064 9847     		blx	r3
 4928              	.LVL455:
 4929 0066 0146     		mov	r1, r0
 4930              	.LVL456:
 4931 0068 2061     		str	r0, [r4, #16]
 4932 006a 03E0     		b	.L340
 4933              	.LVL457:
 4934              	.L338:
2262:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(fp->fs, fp->curr_clust);			/* Follow or stretch cluster chain */
 4935              		.loc 1 2262 0
 4936 006c 6169     		ldr	r1, [r4, #20]
 4937 006e 4D4D     		ldr	r5, .L362+4
 4938 0070 A847     		blx	r5
 4939 0072 0146     		mov	r1, r0
 4940              	.LVL458:
 4941              	.L340:
2264:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0) break;				/* Could not allocate a new cluster (disk full) */
 4942              		.loc 1 2264 0
 4943 0074 0029     		cmp	r1, #0
 4944 0076 00F08280 		beq	.L341
 4945              	.LVL459:
 4946              	.L339:
2265:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 4947              		.loc 1 2265 0
 4948 007a 0129     		cmp	r1, #1
 4949 007c A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4950 007e 1CD0     		beq	.L358
 4951              	.L342:
2266:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 4952              		.loc 1 2266 0
 4953 0080 481C     		adds	r0, r1, #1
 4954 0082 55D0     		beq	.L361
 4955              	.L343:
2267:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = clst;				/* Update current cluster */
 4956              		.loc 1 2267 0
 4957 0084 6161     		str	r1, [r4, #20]
 4958              	.LVL460:
 4959              	.L337:
2273:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {		/* Write back data buffer prior to following direct transfer */
 4960              		.loc 1 2273 0
 4961 0086 94F806E0 		ldrb	lr, [r4, #6]	@ zero_extendqisi2
 4962 008a 5FEA4E61 		lsls	r1, lr, #25
 4963 008e 0DD5     		bpl	.L344
2274:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 4964              		.loc 1 2274 0
 4965 0090 2146     		mov	r1, r4
 4966 0092 51F8240B 		ldr	r0, [r1], #36
 4967 0096 0123     		movs	r3, #1
 4968 0098 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 4969 009a A269     		ldr	r2, [r4, #24]
 4970 009c 424D     		ldr	r5, .L362+8
 4971 009e A847     		blx	r5
 4972 00a0 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4973 00a2 0028     		cmp	r0, #0
 4974 00a4 44D1     		bne	.L361
 4975              	.L345:
2276:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 4976              		.loc 1 2276 0
 4977 00a6 23F04001 		bic	r1, r3, #64
 4978 00aa A171     		strb	r1, [r4, #6]
 4979              	.L344:
2279:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect = clust2sect(fp->fs, fp->curr_clust);	/* Get current sector */
 4980              		.loc 1 2279 0
 4981 00ac 2568     		ldr	r5, [r4, #0]
 4982 00ae 6169     		ldr	r1, [r4, #20]
 4983 00b0 2846     		mov	r0, r5
 4984 00b2 3E4A     		ldr	r2, .L362+12
 4985 00b4 9047     		blx	r2
 4986              	.LVL461:
2280:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4987              		.loc 1 2280 0
 4988 00b6 30B9     		cbnz	r0, .L346
2280:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 4989              		.loc 1 2280 0 is_stmt 0 discriminator 1
 4990 00b8 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 4991              	.LVL462:
 4992              	.L358:
 4993 00ba 63F07F0C 		orn	ip, r3, #127
 4994 00be 84F806C0 		strb	ip, [r4, #6]
 4995              	.LVL463:
 4996              	.L359:
 4997 00c2 0225     		movs	r5, #2
 4998 00c4 69E0     		b	.L333
 4999              	.LVL464:
 5000              	.L346:
2283:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
 5001              		.loc 1 2283 0 is_stmt 1
 5002 00c6 5FEA5926 		lsrs	r6, r9, #9
2281:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			sect += csect;
 5003              		.loc 1 2281 0
 5004 00ca 00EB0807 		add	r7, r0, r8
 5005              	.LVL465:
2283:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (cc) {								/* Write maximum contiguous sectors directly */
 5006              		.loc 1 2283 0
 5007 00ce 1FD0     		beq	.L347
2284:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (csect + cc > fp->fs->csize)		/* Clip at cluster boundary */
 5008              		.loc 1 2284 0
 5009 00d0 AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 5010 00d2 06EB080E 		add	lr, r6, r8
 5011 00d6 9E45     		cmp	lr, r3
2285:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					cc = fp->fs->csize - csect;
 5012              		.loc 1 2285 0
 5013 00d8 88BF     		it	hi
 5014 00da C8EB0306 		rsbhi	r6, r8, r3
 5015              	.LVL466:
2286:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, wbuff, sect, (BYTE)cc) != RES_OK)
 5016              		.loc 1 2286 0
 5017 00de 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 5018 00e0 F3B2     		uxtb	r3, r6
 5019 00e2 5146     		mov	r1, sl
 5020 00e4 3A46     		mov	r2, r7
 5021 00e6 304D     		ldr	r5, .L362+8
 5022 00e8 A847     		blx	r5
 5023 00ea 00BB     		cbnz	r0, .L360
 5024              	.L349:
2294:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->dsect - sect < cc) {		/* Refill sector cache if it gets dirty by the direct write */
 5025              		.loc 1 2294 0
 5026 00ec A069     		ldr	r0, [r4, #24]
 5027 00ee C71B     		subs	r7, r0, r7
 5028              	.LVL467:
 5029 00f0 B742     		cmp	r7, r6
 5030 00f2 0BD2     		bcs	.L350
2295:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 5031              		.loc 1 2295 0
 5032 00f4 0AEB4721 		add	r1, sl, r7, lsl #9
 5033 00f8 4FF40072 		mov	r2, #512
 5034 00fc 04F12400 		add	r0, r4, #36
 5035 0100 2B4D     		ldr	r5, .L362+16
 5036 0102 A847     		blx	r5
2296:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->flag &= ~FA__DIRTY;
 5037              		.loc 1 2296 0
 5038 0104 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 5039 0106 22F04001 		bic	r1, r2, #64
 5040 010a A171     		strb	r1, [r4, #6]
 5041              	.L350:
2299:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				wcnt = SS(fp->fs) * cc;				/* Number of bytes transferred */
 5042              		.loc 1 2299 0
 5043 010c 7602     		lsls	r6, r6, #9
 5044              	.LVL468:
2300:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				continue;
 5045              		.loc 1 2300 0
 5046 010e 28E0     		b	.L351
 5047              	.LVL469:
 5048              	.L347:
2308:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->dsect != sect) {				/* Fill sector buffer with file data */
 5049              		.loc 1 2308 0
 5050 0110 A369     		ldr	r3, [r4, #24]
 5051 0112 BB42     		cmp	r3, r7
 5052 0114 12D0     		beq	.L352
2309:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fptr < fp->fsize &&
 5053              		.loc 1 2309 0
 5054 0116 A068     		ldr	r0, [r4, #8]
 5055 0118 E168     		ldr	r1, [r4, #12]
 5056 011a 8842     		cmp	r0, r1
 5057 011c 0ED2     		bcs	.L352
2310:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 5058              		.loc 1 2310 0 discriminator 1
 5059 011e 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 5060 0120 04F12401 		add	r1, r4, #36
 5061 0124 3A46     		mov	r2, r7
 5062 0126 0123     		movs	r3, #1
 5063 0128 224D     		ldr	r5, .L362+20
 5064 012a A847     		blx	r5
2309:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (fp->fptr < fp->fsize &&
 5065              		.loc 1 2309 0 discriminator 1
 5066 012c 30B1     		cbz	r0, .L352
 5067              	.L360:
2311:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						ABORT(fp->fs, FR_DISK_ERR);
 5068              		.loc 1 2311 0
 5069 012e A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5070              	.LVL470:
 5071              	.L361:
 5072 0130 63F07F0C 		orn	ip, r3, #127
 5073 0134 84F806C0 		strb	ip, [r4, #6]
 5074 0138 0125     		movs	r5, #1
 5075 013a 2EE0     		b	.L333
 5076              	.LVL471:
 5077              	.L352:
2314:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->dsect = sect;
 5078              		.loc 1 2314 0
 5079 013c A761     		str	r7, [r4, #24]
 5080              	.LVL472:
 5081              	.L336:
2316:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 5082              		.loc 1 2316 0
 5083 013e A168     		ldr	r1, [r4, #8]
2324:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 5084              		.loc 1 2324 0
 5085 0140 1B4D     		ldr	r5, .L362+16
2316:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wcnt = SS(fp->fs) - (fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 5086              		.loc 1 2316 0
 5087 0142 CE05     		lsls	r6, r1, #23
 5088 0144 F00D     		lsrs	r0, r6, #23
 5089 0146 C0F50076 		rsb	r6, r0, #512
 5090              	.LVL473:
 5091 014a B145     		cmp	r9, r6
 5092 014c 38BF     		it	cc
 5093 014e 4E46     		movcc	r6, r9
 5094              	.LVL474:
2324:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 5095              		.loc 1 2324 0
 5096 0150 2018     		adds	r0, r4, r0
 5097 0152 3246     		mov	r2, r6
 5098 0154 2430     		adds	r0, r0, #36
 5099 0156 5146     		mov	r1, sl
 5100 0158 A847     		blx	r5
2325:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->flag |= FA__DIRTY;
 5101              		.loc 1 2325 0
 5102 015a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5103 015c 43F04002 		orr	r2, r3, #64
 5104 0160 A271     		strb	r2, [r4, #6]
 5105              	.L351:
2253:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 5106              		.loc 1 2253 0
 5107 0162 019D     		ldr	r5, [sp, #4]
 5108 0164 A168     		ldr	r1, [r4, #8]
 5109 0166 2B68     		ldr	r3, [r5, #0]
 5110 0168 8819     		adds	r0, r1, r6
 5111 016a 9A19     		adds	r2, r3, r6
 5112 016c A060     		str	r0, [r4, #8]
 5113 016e B244     		add	sl, sl, r6
 5114              	.LVL475:
 5115 0170 2A60     		str	r2, [r5, #0]
 5116 0172 C6EB0909 		rsb	r9, r6, r9
 5117              	.LVL476:
 5118              	.L335:
2252:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	for ( ;  btw;									/* Repeat until all data transferred */
 5119              		.loc 1 2252 0 discriminator 1
 5120 0176 B9F1000F 		cmp	r9, #0
 5121 017a 7FF460AF 		bne	.L353
 5122              	.L341:
2329:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 5123              		.loc 1 2329 0
 5124 017e A368     		ldr	r3, [r4, #8]
 5125 0180 E268     		ldr	r2, [r4, #12]
2330:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 5126              		.loc 1 2330 0
 5127 0182 94F806C0 		ldrb	ip, [r4, #6]	@ zero_extendqisi2
2329:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 5128              		.loc 1 2329 0
 5129 0186 9342     		cmp	r3, r2
2330:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 5130              		.loc 1 2330 0
 5131 0188 4CF0200E 		orr	lr, ip, #32
 5132 018c 5D46     		mov	r5, fp
2329:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 5133              		.loc 1 2329 0
 5134 018e 88BF     		it	hi
 5135 0190 E360     		strhi	r3, [r4, #12]
2330:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 5136              		.loc 1 2330 0
 5137 0192 84F806E0 		strb	lr, [r4, #6]
2332:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	LEAVE_FF(fp->fs, FR_OK);
 5138              		.loc 1 2332 0
 5139 0196 00E0     		b	.L333
 5140              	.LVL477:
 5141              	.L356:
2249:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_DENIED);
 5142              		.loc 1 2249 0
 5143 0198 0725     		movs	r5, #7
 5144              	.LVL478:
 5145              	.L333:
2333:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 5146              		.loc 1 2333 0
 5147 019a 2846     		mov	r0, r5
 5148 019c BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5149              	.L363:
 5150              		.align	2
 5151              	.L362:
 5152 01a0 00000000 		.word	validate
 5153 01a4 00000000 		.word	create_chain
 5154 01a8 00000000 		.word	disk_write
 5155 01ac 00000000 		.word	clust2sect
 5156 01b0 00000000 		.word	mem_cpy
 5157 01b4 00000000 		.word	disk_read
 5158              		.cfi_endproc
 5159              	.LFE26:
 5161              		.section	.text.f_sync,"ax",%progbits
 5162              		.align	1
 5163              		.global	f_sync
 5164              		.thumb
 5165              		.thumb_func
 5167              	f_sync:
 5168              	.LFB27:
2345:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5169              		.loc 1 2345 0
 5170              		.cfi_startproc
 5171              		@ args = 0, pretend = 0, frame = 0
 5172              		@ frame_needed = 0, uses_anonymous_args = 0
 5173              	.LVL479:
 5174 0000 38B5     		push	{r3, r4, r5, lr}
 5175              	.LCFI22:
 5176              		.cfi_def_cfa_offset 16
 5177              		.cfi_offset 14, -4
 5178              		.cfi_offset 5, -8
 5179              		.cfi_offset 4, -12
 5180              		.cfi_offset 3, -16
2351:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5181              		.loc 1 2351 0
 5182 0002 8188     		ldrh	r1, [r0, #4]
2345:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5183              		.loc 1 2345 0
 5184 0004 0446     		mov	r4, r0
2351:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5185              		.loc 1 2351 0
 5186 0006 2A4B     		ldr	r3, .L368
 5187 0008 0068     		ldr	r0, [r0, #0]
 5188              	.LVL480:
 5189 000a 9847     		blx	r3
 5190              	.LVL481:
2352:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 5191              		.loc 1 2352 0
 5192 000c 0028     		cmp	r0, #0
 5193 000e 4ED1     		bne	.L365
2353:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 5194              		.loc 1 2353 0
 5195 0010 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 5196 0012 9A06     		lsls	r2, r3, #26
 5197 0014 4BD5     		bpl	.L365
2355:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {
 5198              		.loc 1 2355 0
 5199 0016 5906     		lsls	r1, r3, #25
 5200 0018 0DD5     		bpl	.L366
2356:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 5201              		.loc 1 2356 0
 5202 001a 2146     		mov	r1, r4
 5203 001c 51F8240B 		ldr	r0, [r1], #36
 5204              	.LVL482:
 5205 0020 A269     		ldr	r2, [r4, #24]
 5206 0022 4078     		ldrb	r0, [r0, #1]	@ zero_extendqisi2
 5207 0024 0123     		movs	r3, #1
 5208 0026 234D     		ldr	r5, .L368+4
 5209 0028 A847     		blx	r5
 5210 002a 0028     		cmp	r0, #0
 5211 002c 3ED1     		bne	.L367
2358:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 5212              		.loc 1 2358 0
 5213 002e A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 5214 0030 22F04001 		bic	r1, r2, #64
 5215 0034 A171     		strb	r1, [r4, #6]
 5216              	.L366:
2362:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = move_window(fp->fs, fp->dir_sect);
 5217              		.loc 1 2362 0
 5218 0036 2068     		ldr	r0, [r4, #0]
 5219 0038 E169     		ldr	r1, [r4, #28]
 5220 003a 1F4B     		ldr	r3, .L368+8
 5221 003c 9847     		blx	r3
 5222              	.LVL483:
2363:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {
 5223              		.loc 1 2363 0
 5224 003e 0028     		cmp	r0, #0
 5225 0040 35D1     		bne	.L365
2364:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir = fp->dir_ptr;
 5226              		.loc 1 2364 0
 5227 0042 256A     		ldr	r5, [r4, #32]
 5228              	.LVL484:
2365:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 5229              		.loc 1 2365 0
 5230 0044 95F80BC0 		ldrb	ip, [r5, #11]	@ zero_extendqisi2
 5231 0048 4CF0200E 		orr	lr, ip, #32
 5232 004c 85F80BE0 		strb	lr, [r5, #11]
2366:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_FileSize, fp->fsize);		/* Update file size */
 5233              		.loc 1 2366 0
 5234 0050 E368     		ldr	r3, [r4, #12]
 5235 0052 2B77     		strb	r3, [r5, #28]
 5236 0054 A089     		ldrh	r0, [r4, #12]
 5237              	.LVL485:
 5238 0056 020A     		lsrs	r2, r0, #8
 5239 0058 6A77     		strb	r2, [r5, #29]
 5240 005a E189     		ldrh	r1, [r4, #14]
 5241 005c A977     		strb	r1, [r5, #30]
 5242 005e 94F80FC0 		ldrb	ip, [r4, #15]	@ zero_extendqisi2
 5243 0062 85F81FC0 		strb	ip, [r5, #31]
2367:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
 5244              		.loc 1 2367 0
 5245 0066 2369     		ldr	r3, [r4, #16]
 5246 0068 AB76     		strb	r3, [r5, #26]
 5247 006a 208A     		ldrh	r0, [r4, #16]
 5248 006c 020A     		lsrs	r2, r0, #8
 5249 006e EA76     		strb	r2, [r5, #27]
 5250 0070 B4F812E0 		ldrh	lr, [r4, #18]
2368:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				tim = get_fattime();						/* Update updated time */
 5251              		.loc 1 2368 0
 5252 0074 1148     		ldr	r0, .L368+12
2367:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, fp->org_clust);				/* Update start cluster */
 5253              		.loc 1 2367 0
 5254 0076 85F814E0 		strb	lr, [r5, #20]
 5255 007a 618A     		ldrh	r1, [r4, #18]
 5256 007c 0B0A     		lsrs	r3, r1, #8
 5257 007e 6B75     		strb	r3, [r5, #21]
2368:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				tim = get_fattime();						/* Update updated time */
 5258              		.loc 1 2368 0
 5259 0080 8047     		blx	r0
 5260              	.LVL486:
2369:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 5261              		.loc 1 2369 0
 5262 0082 020C     		lsrs	r2, r0, #16
 5263 0084 010E     		lsrs	r1, r0, #24
 5264 0086 C0F3072C 		ubfx	ip, r0, #8, #8
 5265 008a A875     		strb	r0, [r5, #22]
 5266 008c 85F817C0 		strb	ip, [r5, #23]
 5267 0090 6976     		strb	r1, [r5, #25]
 5268 0092 2A76     		strb	r2, [r5, #24]
2370:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 5269              		.loc 1 2370 0
 5270 0094 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
2371:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fs->wflag = 1;
 5271              		.loc 1 2371 0
 5272 0096 2268     		ldr	r2, [r4, #0]
 5273 0098 0120     		movs	r0, #1
 5274              	.LVL487:
2370:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__WRITTEN;
 5275              		.loc 1 2370 0
 5276 009a 23F0200C 		bic	ip, r3, #32
 5277 009e 84F806C0 		strb	ip, [r4, #6]
2371:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fs->wflag = 1;
 5278              		.loc 1 2371 0
 5279 00a2 1071     		strb	r0, [r2, #4]
2372:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(fp->fs);
 5280              		.loc 1 2372 0
 5281 00a4 2068     		ldr	r0, [r4, #0]
 5282 00a6 0649     		ldr	r1, .L368+16
 5283 00a8 8847     		blx	r1
 5284              	.LVL488:
 5285 00aa 38BD     		pop	{r3, r4, r5, pc}
 5286              	.LVL489:
 5287              	.L367:
2357:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					LEAVE_FF(fp->fs, FR_DISK_ERR);
 5288              		.loc 1 2357 0
 5289 00ac 0120     		movs	r0, #1
 5290              	.L365:
2378:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 5291              		.loc 1 2378 0
 5292 00ae 38BD     		pop	{r3, r4, r5, pc}
 5293              	.L369:
 5294              		.align	2
 5295              	.L368:
 5296 00b0 00000000 		.word	validate
 5297 00b4 00000000 		.word	disk_write
 5298 00b8 00000000 		.word	move_window
 5299 00bc 00000000 		.word	get_fattime
 5300 00c0 00000000 		.word	sync
 5301              		.cfi_endproc
 5302              	.LFE27:
 5304              		.section	.text.f_close,"ax",%progbits
 5305              		.align	1
 5306              		.global	f_close
 5307              		.thumb
 5308              		.thumb_func
 5310              	f_close:
 5311              	.LFB28:
2392:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5312              		.loc 1 2392 0
 5313              		.cfi_startproc
 5314              		@ args = 0, pretend = 0, frame = 0
 5315              		@ frame_needed = 0, uses_anonymous_args = 0
 5316              	.LVL490:
 5317 0000 10B5     		push	{r4, lr}
 5318              	.LCFI23:
 5319              		.cfi_def_cfa_offset 8
 5320              		.cfi_offset 14, -4
 5321              		.cfi_offset 4, -8
2402:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
 5322              		.loc 1 2402 0
 5323 0002 034B     		ldr	r3, .L372
2392:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5324              		.loc 1 2392 0
 5325 0004 0446     		mov	r4, r0
2402:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = f_sync(fp);		/* Flush cached data */
 5326              		.loc 1 2402 0
 5327 0006 9847     		blx	r3
 5328              	.LVL491:
2416:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 5329              		.loc 1 2416 0
 5330 0008 00B9     		cbnz	r0, .L371
2416:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) fp->fs = 0;	/* Discard file object */
 5331              		.loc 1 2416 0 is_stmt 0 discriminator 1
 5332 000a 2060     		str	r0, [r4, #0]
 5333              	.L371:
2419:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 5334              		.loc 1 2419 0 is_stmt 1
 5335 000c 10BD     		pop	{r4, pc}
 5336              	.L373:
 5337 000e 00BF     		.align	2
 5338              	.L372:
 5339 0010 00000000 		.word	f_sync
 5340              		.cfi_endproc
 5341              	.LFE28:
 5343              		.section	.text.f_chdrive,"ax",%progbits
 5344              		.align	1
 5345              		.global	f_chdrive
 5346              		.thumb
 5347              		.thumb_func
 5349              	f_chdrive:
 5350              	.LFB29:
2433:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5351              		.loc 1 2433 0
 5352              		.cfi_startproc
 5353              		@ args = 0, pretend = 0, frame = 0
 5354              		@ frame_needed = 0, uses_anonymous_args = 0
 5355              		@ link register save eliminated.
 5356              	.LVL492:
2434:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
 5357              		.loc 1 2434 0
 5358 0000 10B9     		cbnz	r0, .L376
2436:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	CurrVol = drv;
 5359              		.loc 1 2436 0
 5360 0002 024B     		ldr	r3, .L377
 5361 0004 1870     		strb	r0, [r3, #0]
2438:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	return FR_OK;
 5362              		.loc 1 2438 0
 5363 0006 7047     		bx	lr
 5364              	.L376:
2434:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (drv >= _VOLUMES) return FR_INVALID_DRIVE;
 5365              		.loc 1 2434 0
 5366 0008 0B20     		movs	r0, #11
 5367              	.LVL493:
2439:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 5368              		.loc 1 2439 0
 5369 000a 7047     		bx	lr
 5370              	.L378:
 5371              		.align	2
 5372              	.L377:
 5373 000c 00000000 		.word	.LANCHOR0
 5374              		.cfi_endproc
 5375              	.LFE29:
 5377              		.section	.text.f_chdir,"ax",%progbits
 5378              		.align	1
 5379              		.global	f_chdir
 5380              		.thumb
 5381              		.thumb_func
 5383              	f_chdir:
 5384              	.LFB30:
2446:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5385              		.loc 1 2446 0
 5386              		.cfi_startproc
 5387              		@ args = 0, pretend = 0, frame = 48
 5388              		@ frame_needed = 0, uses_anonymous_args = 0
 5389              	.LVL494:
 5390 0000 00B5     		push	{lr}
 5391              	.LCFI24:
 5392              		.cfi_def_cfa_offset 4
 5393              		.cfi_offset 14, -4
 5394 0002 8DB0     		sub	sp, sp, #52
 5395              	.LCFI25:
 5396              		.cfi_def_cfa_offset 56
2446:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5397              		.loc 1 2446 0
 5398 0004 0CA9     		add	r1, sp, #48
 5399 0006 41F82C0D 		str	r0, [r1, #-44]!
2452:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 5400              		.loc 1 2452 0
 5401 000a 0846     		mov	r0, r1
 5402              	.LVL495:
 5403 000c 0022     		movs	r2, #0
 5404 000e 02A9     		add	r1, sp, #8
 5405 0010 144B     		ldr	r3, .L388
 5406 0012 9847     		blx	r3
 5407              	.LVL496:
2453:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 5408              		.loc 1 2453 0
 5409 0014 08BB     		cbnz	r0, .L380
2454:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 5410              		.loc 1 2454 0
 5411 0016 09A8     		add	r0, sp, #36
 5412              	.LVL497:
 5413 0018 0890     		str	r0, [sp, #32]
2455:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 5414              		.loc 1 2455 0
 5415 001a 0199     		ldr	r1, [sp, #4]
 5416 001c 02A8     		add	r0, sp, #8
 5417 001e 124A     		ldr	r2, .L388+4
 5418 0020 9047     		blx	r2
 5419              	.LVL498:
2457:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 5420              		.loc 1 2457 0
 5421 0022 B8B9     		cbnz	r0, .L381
2458:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dj.dir) {
 5422              		.loc 1 2458 0
 5423 0024 079B     		ldr	r3, [sp, #28]
 5424 0026 0BB9     		cbnz	r3, .L382
2459:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->cdir = dj.sclust;	/* Start directory itself */
 5425              		.loc 1 2459 0
 5426 0028 049A     		ldr	r2, [sp, #16]
 5427 002a 10E0     		b	.L387
 5428              	.L382:
2461:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.dir[DIR_Attr] & AM_DIR)	/* Reached to the directory */
 5429              		.loc 1 2461 0
 5430 002c 93F80BC0 		ldrb	ip, [r3, #11]	@ zero_extendqisi2
 5431 0030 5FEACC61 		lsls	r1, ip, #27
 5432 0034 13D5     		bpl	.L385
2462:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->cdir = LD_CLUST(dj.dir);
 5433              		.loc 1 2462 0
 5434 0036 93F815E0 		ldrb	lr, [r3, #21]	@ zero_extendqisi2
 5435 003a 93F814C0 		ldrb	ip, [r3, #20]	@ zero_extendqisi2
 5436 003e 9A7E     		ldrb	r2, [r3, #26]	@ zero_extendqisi2
 5437 0040 D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 5438 0042 4CEA0E2E 		orr	lr, ip, lr, lsl #8
 5439 0046 42EA0123 		orr	r3, r2, r1, lsl #8
 5440 004a 43EA0E42 		orr	r2, r3, lr, lsl #16
 5441              	.L387:
 5442 004e 029B     		ldr	r3, [sp, #8]
 5443 0050 9A61     		str	r2, [r3, #24]
 5444 0052 02E0     		b	.L380
 5445              	.L381:
2467:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 5446              		.loc 1 2467 0
 5447 0054 0428     		cmp	r0, #4
 5448 0056 08BF     		it	eq
 5449 0058 0520     		moveq	r0, #5
 5450              	.LVL499:
 5451              	.L380:
2471:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 5452              		.loc 1 2471 0
 5453 005a 0DB0     		add	sp, sp, #52
 5454 005c 00BD     		pop	{pc}
 5455              	.L385:
2464:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 5456              		.loc 1 2464 0
 5457 005e 0520     		movs	r0, #5
 5458              	.LVL500:
 5459 0060 FBE7     		b	.L380
 5460              	.L389:
 5461 0062 00BF     		.align	2
 5462              	.L388:
 5463 0064 00000000 		.word	chk_mounted
 5464 0068 00000000 		.word	follow_path
 5465              		.cfi_endproc
 5466              	.LFE30:
 5468              		.section	.text.f_getcwd,"ax",%progbits
 5469              		.align	1
 5470              		.global	f_getcwd
 5471              		.thumb
 5472              		.thumb_func
 5474              	f_getcwd:
 5475              	.LFB31:
2479:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5476              		.loc 1 2479 0
 5477              		.cfi_startproc
 5478              		@ args = 0, pretend = 0, frame = 72
 5479              		@ frame_needed = 0, uses_anonymous_args = 0
 5480              	.LVL501:
 5481 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 5482              	.LCFI26:
 5483              		.cfi_def_cfa_offset 36
 5484              		.cfi_offset 14, -4
 5485              		.cfi_offset 11, -8
 5486              		.cfi_offset 10, -12
 5487              		.cfi_offset 9, -16
 5488              		.cfi_offset 8, -20
 5489              		.cfi_offset 7, -24
 5490              		.cfi_offset 6, -28
 5491              		.cfi_offset 5, -32
 5492              		.cfi_offset 4, -36
 5493 0004 93B0     		sub	sp, sp, #76
 5494              	.LCFI27:
 5495              		.cfi_def_cfa_offset 112
2479:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5496              		.loc 1 2479 0
 5497 0006 12AF     		add	r7, sp, #72
 5498 0008 47F8440D 		str	r0, [r7, #-68]!
 5499              	.LVL502:
2489:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*path = 0;
 5500              		.loc 1 2489 0
 5501 000c 0022     		movs	r2, #0
2490:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
 5502              		.loc 1 2490 0
 5503 000e 02AD     		add	r5, sp, #8
2489:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	*path = 0;
 5504              		.loc 1 2489 0
 5505 0010 0270     		strb	r2, [r0, #0]
2479:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5506              		.loc 1 2479 0
 5507 0012 0C46     		mov	r4, r1
2490:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted((const TCHAR**)&path, &dj.fs, 0);	/* Get current volume */
 5508              		.loc 1 2490 0
 5509 0014 3846     		mov	r0, r7
 5510 0016 2946     		mov	r1, r5
 5511              	.LVL503:
 5512 0018 4C4B     		ldr	r3, .L413
 5513 001a 9847     		blx	r3
 5514 001c 0746     		mov	r7, r0
 5515              	.LVL504:
2491:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 5516              		.loc 1 2491 0
 5517 001e 0028     		cmp	r0, #0
 5518 0020 40F09080 		bne	.L391
2494:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
 5519              		.loc 1 2494 0
 5520 0024 0299     		ldr	r1, [sp, #8]
2492:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 5521              		.loc 1 2492 0
 5522 0026 0FAA     		add	r2, sp, #60
2494:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
 5523              		.loc 1 2494 0
 5524 0028 8869     		ldr	r0, [r1, #24]
 5525              	.LVL505:
2492:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 5526              		.loc 1 2492 0
 5527 002a 0892     		str	r2, [sp, #32]
 5528              	.LVL506:
2494:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		dj.sclust = dj.fs->cdir;			/* Start to follow upper dir from current dir */
 5529              		.loc 1 2494 0
 5530 002c 0490     		str	r0, [sp, #16]
2495:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
 5531              		.loc 1 2495 0
 5532 002e 2646     		mov	r6, r4
2496:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
 5533              		.loc 1 2496 0
 5534 0030 A846     		mov	r8, r5
2498:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_read(&dj);
 5535              		.loc 1 2498 0
 5536 0032 DFF82891 		ldr	r9, .L413+16
2495:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
 5537              		.loc 1 2495 0
 5538 0036 60E0     		b	.L392
 5539              	.LVL507:
 5540              	.L401:
2496:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(&dj, 1);			/* Get parent dir */
 5541              		.loc 1 2496 0
 5542 0038 4046     		mov	r0, r8
 5543 003a 0121     		movs	r1, #1
 5544 003c 444D     		ldr	r5, .L413+4
 5545 003e A847     		blx	r5
 5546              	.LVL508:
2497:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 5547              		.loc 1 2497 0
 5548 0040 0028     		cmp	r0, #0
 5549 0042 62D1     		bne	.L407
2498:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_read(&dj);
 5550              		.loc 1 2498 0
 5551 0044 4046     		mov	r0, r8
 5552              	.LVL509:
 5553 0046 C847     		blx	r9
 5554 0048 0146     		mov	r1, r0
 5555              	.LVL510:
2499:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 5556              		.loc 1 2499 0
 5557 004a 0028     		cmp	r0, #0
 5558 004c 5BD1     		bne	.L406
2500:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dj.sclust = LD_CLUST(dj.dir);	/* Goto parent dir */
 5559              		.loc 1 2500 0
 5560 004e 079B     		ldr	r3, [sp, #28]
 5561 0050 93F814C0 		ldrb	ip, [r3, #20]	@ zero_extendqisi2
 5562 0054 D87E     		ldrb	r0, [r3, #27]	@ zero_extendqisi2
 5563              	.LVL511:
 5564 0056 93F815E0 		ldrb	lr, [r3, #21]	@ zero_extendqisi2
 5565 005a 9A7E     		ldrb	r2, [r3, #26]	@ zero_extendqisi2
 5566 005c 4CEA0E2E 		orr	lr, ip, lr, lsl #8
 5567 0060 42EA002C 		orr	ip, r2, r0, lsl #8
 5568 0064 4CEA0E43 		orr	r3, ip, lr, lsl #16
 5569 0068 0493     		str	r3, [sp, #16]
2501:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(&dj, 0);
 5570              		.loc 1 2501 0
 5571 006a 4046     		mov	r0, r8
 5572 006c A847     		blx	r5
 5573              	.LVL512:
2502:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) break;
 5574              		.loc 1 2502 0
 5575 006e 0028     		cmp	r0, #0
 5576 0070 4BD1     		bne	.L407
2507:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_next(&dj, 0);	
 5577              		.loc 1 2507 0
 5578 0072 DFF8ECB0 		ldr	fp, .L413+20
 5579              	.LVL513:
 5580              	.L410:
2504:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_read(&dj);
 5581              		.loc 1 2504 0
 5582 0076 4046     		mov	r0, r8
 5583 0078 C847     		blx	r9
 5584 007a 0546     		mov	r5, r0
 5585              	.LVL514:
2505:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res != FR_OK) break;
 5586              		.loc 1 2505 0
 5587 007c A0B9     		cbnz	r0, .L394
2506:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ccl == LD_CLUST(dj.dir)) break;	/* Found the entry */
 5588              		.loc 1 2506 0
 5589 007e 0798     		ldr	r0, [sp, #28]
 5590              	.LVL515:
 5591 0080 417D     		ldrb	r1, [r0, #21]	@ zero_extendqisi2
 5592 0082 90F814E0 		ldrb	lr, [r0, #20]	@ zero_extendqisi2
 5593 0086 90F81BC0 		ldrb	ip, [r0, #27]	@ zero_extendqisi2
 5594 008a 837E     		ldrb	r3, [r0, #26]	@ zero_extendqisi2
 5595 008c 4EEA0122 		orr	r2, lr, r1, lsl #8
 5596 0090 43EA0C20 		orr	r0, r3, ip, lsl #8
 5597 0094 40EA0241 		orr	r1, r0, r2, lsl #16
 5598 0098 8A45     		cmp	sl, r1
 5599 009a 0AD0     		beq	.L395
2507:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_next(&dj, 0);	
 5600              		.loc 1 2507 0
 5601 009c 2946     		mov	r1, r5
 5602 009e 4046     		mov	r0, r8
 5603 00a0 D847     		blx	fp
 5604 00a2 0546     		mov	r5, r0
 5605              	.LVL516:
2508:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			} while (res == FR_OK);
 5606              		.loc 1 2508 0
 5607 00a4 0028     		cmp	r0, #0
 5608 00a6 E6D0     		beq	.L410
 5609              	.LVL517:
 5610              	.L394:
2509:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 5611              		.loc 1 2509 0
 5612 00a8 042D     		cmp	r5, #4
 5613 00aa 14BF     		ite	ne
 5614 00ac 2F46     		movne	r7, r5
 5615 00ae 0227     		moveq	r7, #2
 5616 00b0 2EE0     		b	.L393
 5617              	.L395:
2515:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			get_fileinfo(&dj, &fno);		/* Get the dir name and push it to the buffer */
 5618              		.loc 1 2515 0
 5619 00b2 4046     		mov	r0, r8
 5620 00b4 09A9     		add	r1, sp, #36
 5621 00b6 274A     		ldr	r2, .L413+8
 5622 00b8 9047     		blx	r2
 5623              	.LVL518:
2516:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			tp = fno.fname;
 5624              		.loc 1 2516 0
 5625 00ba 0DF12D03 		add	r3, sp, #45
2518:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
 5626              		.loc 1 2518 0
 5627 00be 00E0     		b	.L397
 5628              	.LVL519:
 5629              	.L398:
2518:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
 5630              		.loc 1 2518 0 is_stmt 0 discriminator 2
 5631 00c0 0135     		adds	r5, r5, #1
 5632              	.LVL520:
 5633              	.L397:
2518:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
 5634              		.loc 1 2518 0 discriminator 1
 5635 00c2 13F8010B 		ldrb	r0, [r3], #1	@ zero_extendqisi2
 5636 00c6 0028     		cmp	r0, #0
 5637 00c8 FAD1     		bne	.L398
2519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i < n + 3) {
 5638              		.loc 1 2519 0 is_stmt 1
 5639 00ca EB1C     		adds	r3, r5, #3
 5640 00cc 9E42     		cmp	r6, r3
2518:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			for (n = 0; tp[n]; n++) ;
 5641              		.loc 1 2518 0
 5642 00ce 2A46     		mov	r2, r5
2519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i < n + 3) {
 5643              		.loc 1 2519 0
 5644 00d0 1DD3     		bcc	.L409
2519:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i < n + 3) {
 5645              		.loc 1 2519 0 is_stmt 0 discriminator 1
 5646 00d2 3346     		mov	r3, r6
 5647 00d4 0AE0     		b	.L399
 5648              	.LVL521:
 5649              	.L400:
2522:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			while (n) path[--i] = tp[--n];
 5650              		.loc 1 2522 0 is_stmt 1 discriminator 2
 5651 00d6 013D     		subs	r5, r5, #1
 5652              	.LVL522:
 5653 00d8 0DF1240E 		add	lr, sp, #36
 5654 00dc 05EB0E0C 		add	ip, r5, lr
 5655 00e0 9CF809A0 		ldrb	sl, [ip, #9]	@ zero_extendqisi2
 5656 00e4 0199     		ldr	r1, [sp, #4]
 5657 00e6 013B     		subs	r3, r3, #1
 5658              	.LVL523:
 5659 00e8 01F803A0 		strb	sl, [r1, r3]
 5660              	.L399:
2522:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			while (n) path[--i] = tp[--n];
 5661              		.loc 1 2522 0 is_stmt 0 discriminator 1
 5662 00ec 002D     		cmp	r5, #0
 5663 00ee F2D1     		bne	.L400
2522:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			while (n) path[--i] = tp[--n];
 5664              		.loc 1 2522 0
 5665 00f0 D343     		mvns	r3, r2
 5666              	.LVL524:
2523:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			path[--i] = '/';
 5667              		.loc 1 2523 0 is_stmt 1
 5668 00f2 0198     		ldr	r0, [sp, #4]
 5669 00f4 F618     		adds	r6, r6, r3
 5670              	.LVL525:
 5671 00f6 2F22     		movs	r2, #47
 5672 00f8 8255     		strb	r2, [r0, r6]
 5673              	.LVL526:
 5674              	.L392:
2495:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		while ((ccl = dj.sclust) != 0) {	/* Repeat while current dir is a sub-dir */
 5675              		.loc 1 2495 0 discriminator 1
 5676 00fa DDF810A0 		ldr	sl, [sp, #16]
 5677              	.LVL527:
 5678 00fe BAF1000F 		cmp	sl, #0
 5679 0102 99D1     		bne	.L401
 5680 0104 04E0     		b	.L393
 5681              	.LVL528:
 5682              	.L406:
2498:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_read(&dj);
 5683              		.loc 1 2498 0
 5684 0106 0746     		mov	r7, r0
 5685 0108 02E0     		b	.L393
 5686              	.LVL529:
 5687              	.L407:
2501:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(&dj, 0);
 5688              		.loc 1 2501 0
 5689 010a 0746     		mov	r7, r0
 5690 010c 00E0     		b	.L393
 5691              	.LVL530:
 5692              	.L409:
2520:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NOT_ENOUGH_CORE; break;
 5693              		.loc 1 2520 0
 5694 010e 1127     		movs	r7, #17
 5695              	.LVL531:
 5696              	.L393:
2525:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		tp = path;
 5697              		.loc 1 2525 0
 5698 0110 019B     		ldr	r3, [sp, #4]
 5699              	.LVL532:
2526:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {
 5700              		.loc 1 2526 0
 5701 0112 AFB9     		cbnz	r7, .L402
2527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
 5702              		.loc 1 2527 0
 5703 0114 1048     		ldr	r0, .L413+12
2528:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = ':';
 5704              		.loc 1 2528 0
 5705 0116 3A21     		movs	r1, #58
2527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
 5706              		.loc 1 2527 0
 5707 0118 0278     		ldrb	r2, [r0, #0]	@ zero_extendqisi2
2528:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = ':';
 5708              		.loc 1 2528 0
 5709 011a 5970     		strb	r1, [r3, #1]
2527:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = '0' + CurrVol;			/* Put drive number */
 5710              		.loc 1 2527 0
 5711 011c 3032     		adds	r2, r2, #48
 5712 011e 1A70     		strb	r2, [r3, #0]
 5713              	.LVL533:
2528:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*tp++ = ':';
 5714              		.loc 1 2528 0
 5715 0120 9A1C     		adds	r2, r3, #2
2529:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (i == sz_path) {				/* Root-dir */
 5716              		.loc 1 2529 0
 5717 0122 A642     		cmp	r6, r4
 5718 0124 03D1     		bne	.L404
2530:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				*tp++ = '/';
 5719              		.loc 1 2530 0
 5720 0126 2F21     		movs	r1, #47
 5721 0128 9970     		strb	r1, [r3, #2]
 5722 012a 0333     		adds	r3, r3, #3
 5723              	.LVL534:
 5724 012c 08E0     		b	.L402
 5725              	.LVL535:
 5726              	.L404:
2533:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					*tp++ = path[i++];
 5727              		.loc 1 2533 0 discriminator 1
 5728 012e 019B     		ldr	r3, [sp, #4]
 5729 0130 13F806C0 		ldrb	ip, [r3, r6]	@ zero_extendqisi2
 5730 0134 0136     		adds	r6, r6, #1
 5731              	.LVL536:
 5732 0136 02F801CB 		strb	ip, [r2], #1
2534:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				while (i < sz_path);
 5733              		.loc 1 2534 0 discriminator 1
 5734 013a A642     		cmp	r6, r4
2533:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					*tp++ = path[i++];
 5735              		.loc 1 2533 0 discriminator 1
 5736 013c 1346     		mov	r3, r2
 5737              	.LVL537:
2534:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				while (i < sz_path);
 5738              		.loc 1 2534 0 discriminator 1
 5739 013e F6D3     		bcc	.L404
 5740              	.LVL538:
 5741              	.L402:
2537:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		*tp = 0;
 5742              		.loc 1 2537 0
 5743 0140 0022     		movs	r2, #0
 5744 0142 1A70     		strb	r2, [r3, #0]
 5745              	.LVL539:
 5746              	.L391:
2542:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 5747              		.loc 1 2542 0
 5748 0144 3846     		mov	r0, r7
 5749 0146 13B0     		add	sp, sp, #76
 5750 0148 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 5751              	.L414:
 5752              		.align	2
 5753              	.L413:
 5754 014c 00000000 		.word	chk_mounted
 5755 0150 00000000 		.word	dir_sdi
 5756 0154 00000000 		.word	get_fileinfo
 5757 0158 00000000 		.word	.LANCHOR0
 5758 015c 00000000 		.word	dir_read
 5759 0160 00000000 		.word	dir_next
 5760              		.cfi_endproc
 5761              	.LFE31:
 5763              		.section	.text.f_lseek,"ax",%progbits
 5764              		.align	1
 5765              		.global	f_lseek
 5766              		.thumb
 5767              		.thumb_func
 5769              	f_lseek:
 5770              	.LFB32:
2557:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5771              		.loc 1 2557 0
 5772              		.cfi_startproc
 5773              		@ args = 0, pretend = 0, frame = 0
 5774              		@ frame_needed = 0, uses_anonymous_args = 0
 5775              	.LVL540:
 5776 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 5777              	.LCFI28:
 5778              		.cfi_def_cfa_offset 32
 5779              		.cfi_offset 14, -4
 5780              		.cfi_offset 9, -8
 5781              		.cfi_offset 8, -12
 5782              		.cfi_offset 7, -16
 5783              		.cfi_offset 6, -20
 5784              		.cfi_offset 5, -24
 5785              		.cfi_offset 4, -28
 5786              		.cfi_offset 3, -32
2557:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 5787              		.loc 1 2557 0
 5788 0004 0446     		mov	r4, r0
 5789 0006 0F46     		mov	r7, r1
2561:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 5790              		.loc 1 2561 0
 5791 0008 544B     		ldr	r3, .L450
 5792 000a 8188     		ldrh	r1, [r0, #4]
 5793              	.LVL541:
 5794 000c 0068     		ldr	r0, [r0, #0]
 5795              	.LVL542:
 5796 000e 9847     		blx	r3
 5797 0010 0546     		mov	r5, r0
 5798              	.LVL543:
2562:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 5799              		.loc 1 2562 0
 5800 0012 0028     		cmp	r0, #0
 5801 0014 40F09F80 		bne	.L416
2563:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (fp->flag & FA__ERROR)			/* Check abort flag */
 5802              		.loc 1 2563 0
 5803 0018 A279     		ldrb	r2, [r4, #6]	@ zero_extendqisi2
 5804 001a 1306     		lsls	r3, r2, #24
 5805 001c 00F19A80 		bmi	.L437
 5806              	.LBB65:
2633:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 5807              		.loc 1 2633 0
 5808 0020 E368     		ldr	r3, [r4, #12]
 5809 0022 9F42     		cmp	r7, r3
 5810 0024 03D9     		bls	.L417
2635:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			 && !(fp->flag & FA_WRITE)
 5811              		.loc 1 2635 0
 5812 0026 12F0020F 		tst	r2, #2
 5813 002a 08BF     		it	eq
 5814 002c 1F46     		moveq	r7, r3
 5815              	.LVL544:
 5816              	.L417:
2640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
 5817              		.loc 1 2640 0
 5818 002e 0022     		movs	r2, #0
2639:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		ifptr = fp->fptr;
 5819              		.loc 1 2639 0
 5820 0030 A368     		ldr	r3, [r4, #8]
 5821              	.LVL545:
2640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
 5822              		.loc 1 2640 0
 5823 0032 A260     		str	r2, [r4, #8]
2641:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (ofs) {
 5824              		.loc 1 2641 0
 5825 0034 002F     		cmp	r7, #0
 5826 0036 5BD0     		beq	.L439
2642:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 5827              		.loc 1 2642 0
 5828 0038 2068     		ldr	r0, [r4, #0]
 5829              	.LVL546:
 5830 003a 90F80280 		ldrb	r8, [r0, #2]	@ zero_extendqisi2
 5831 003e 4FEA4828 		lsl	r8, r8, #9
 5832              	.LVL547:
2643:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ifptr > 0 &&
 5833              		.loc 1 2643 0
 5834 0042 7BB1     		cbz	r3, .L419
2644:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 5835              		.loc 1 2644 0 discriminator 1
 5836 0044 013B     		subs	r3, r3, #1
 5837 0046 7A1E     		subs	r2, r7, #1
 5838 0048 B2FBF8F1 		udiv	r1, r2, r8
 5839 004c B3FBF8FC 		udiv	ip, r3, r8
2643:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (ifptr > 0 &&
 5840              		.loc 1 2643 0 discriminator 1
 5841 0050 6145     		cmp	r1, ip
 5842 0052 07D3     		bcc	.L419
2645:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 5843              		.loc 1 2645 0
 5844 0054 C8F10006 		rsb	r6, r8, #0
 5845 0058 06EA0300 		and	r0, r6, r3
 5846 005c A060     		str	r0, [r4, #8]
2646:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ofs -= fp->fptr;
 5847              		.loc 1 2646 0
 5848 005e 3F1A     		subs	r7, r7, r0
 5849              	.LVL548:
2647:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = fp->curr_clust;
 5850              		.loc 1 2647 0
 5851 0060 6169     		ldr	r1, [r4, #20]
 5852              	.LVL549:
 5853 0062 0BE0     		b	.L420
 5854              	.LVL550:
 5855              	.L419:
2649:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				clst = fp->org_clust;					/* start from the first cluster */
 5856              		.loc 1 2649 0
 5857 0064 2169     		ldr	r1, [r4, #16]
 5858              	.LVL551:
2651:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 5859              		.loc 1 2651 0
 5860 0066 41B9     		cbnz	r1, .L421
2652:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(fp->fs, 0);
 5861              		.loc 1 2652 0
 5862 0068 3D4B     		ldr	r3, .L450+4
 5863 006a 9847     		blx	r3
 5864              	.LVL552:
2653:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5865              		.loc 1 2653 0
 5866 006c 0128     		cmp	r0, #1
2652:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					clst = create_chain(fp->fs, 0);
 5867              		.loc 1 2652 0
 5868 006e 0146     		mov	r1, r0
 5869              	.LVL553:
2653:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 5870              		.loc 1 2653 0
 5871 0070 36D0     		beq	.L447
 5872              	.L422:
2654:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5873              		.loc 1 2654 0
 5874 0072 0130     		adds	r0, r0, #1
 5875              	.LVL554:
2655:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->org_clust = clst;
 5876              		.loc 1 2655 0
 5877 0074 18BF     		it	ne
 5878 0076 2161     		strne	r1, [r4, #16]
2654:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5879              		.loc 1 2654 0
 5880 0078 5AD0     		beq	.L445
 5881              	.L421:
2658:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->curr_clust = clst;
 5882              		.loc 1 2658 0
 5883 007a 6161     		str	r1, [r4, #20]
 5884              	.L420:
2640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
 5885              		.loc 1 2640 0
 5886 007c 0E46     		mov	r6, r1
2660:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (clst != 0) {
 5887              		.loc 1 2660 0
 5888 007e 0029     		cmp	r1, #0
 5889 0080 37D0     		beq	.L418
 5890 0082 1CE0     		b	.L448
 5891              	.L431:
2663:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 5892              		.loc 1 2663 0
 5893 0084 94F806E0 		ldrb	lr, [r4, #6]	@ zero_extendqisi2
 5894 0088 5FEA8E72 		lsls	r2, lr, #30
 5895 008c 04D5     		bpl	.L425
2664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 5896              		.loc 1 2664 0
 5897 008e 2068     		ldr	r0, [r4, #0]
 5898 0090 B047     		blx	r6
 5899              	.LVL555:
 5900 0092 0146     		mov	r1, r0
 5901              	.LVL556:
2665:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 5902              		.loc 1 2665 0
 5903 0094 18B9     		cbnz	r0, .L427
 5904 0096 18E0     		b	.L449
 5905              	.LVL557:
 5906              	.L425:
2670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 5907              		.loc 1 2670 0
 5908 0098 2068     		ldr	r0, [r4, #0]
 5909 009a C847     		blx	r9
 5910              	.LVL558:
 5911 009c 0146     		mov	r1, r0
 5912              	.LVL559:
 5913              	.L427:
2671:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 5914              		.loc 1 2671 0
 5915 009e 4B1C     		adds	r3, r1, #1
 5916 00a0 46D0     		beq	.L445
 5917              	.L428:
2672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 5918              		.loc 1 2672 0
 5919 00a2 0129     		cmp	r1, #1
 5920 00a4 1CD9     		bls	.L447
2672:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 5921              		.loc 1 2672 0 is_stmt 0 discriminator 2
 5922 00a6 2068     		ldr	r0, [r4, #0]
 5923              	.LVL560:
 5924 00a8 C269     		ldr	r2, [r0, #28]
 5925 00aa 9142     		cmp	r1, r2
 5926 00ac 18D2     		bcs	.L447
 5927              	.L430:
2674:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->fptr += bcs;
 5928              		.loc 1 2674 0 is_stmt 1
 5929 00ae A268     		ldr	r2, [r4, #8]
2673:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->curr_clust = clst;
 5930              		.loc 1 2673 0
 5931 00b0 6161     		str	r1, [r4, #20]
2674:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					fp->fptr += bcs;
 5932              		.loc 1 2674 0
 5933 00b2 02EB0803 		add	r3, r2, r8
 5934 00b6 A360     		str	r3, [r4, #8]
2675:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					ofs -= bcs;
 5935              		.loc 1 2675 0
 5936 00b8 C8EB0707 		rsb	r7, r8, r7
 5937              	.LVL561:
 5938 00bc 02E0     		b	.L444
 5939              	.L448:
2670:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 5940              		.loc 1 2670 0 discriminator 1
 5941 00be DFF8B090 		ldr	r9, .L450+20
2664:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 5942              		.loc 1 2664 0 discriminator 1
 5943 00c2 274E     		ldr	r6, .L450+4
 5944              	.L444:
2661:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 5945              		.loc 1 2661 0 discriminator 1
 5946 00c4 4745     		cmp	r7, r8
 5947 00c6 DDD8     		bhi	.L431
 5948 00c8 00E0     		b	.L426
 5949              	.LVL562:
 5950              	.L449:
2665:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (clst == 0) {				/* When disk gets full, clip file size */
 5951              		.loc 1 2665 0
 5952 00ca 4746     		mov	r7, r8
 5953              	.LVL563:
 5954              	.L426:
2677:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fptr += ofs;
 5955              		.loc 1 2677 0
 5956 00cc A368     		ldr	r3, [r4, #8]
2678:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ofs % SS(fp->fs)) {
 5957              		.loc 1 2678 0
 5958 00ce F805     		lsls	r0, r7, #23
2677:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->fptr += ofs;
 5959              		.loc 1 2677 0
 5960 00d0 DE19     		adds	r6, r3, r7
 5961 00d2 A660     		str	r6, [r4, #8]
2678:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ofs % SS(fp->fs)) {
 5962              		.loc 1 2678 0
 5963 00d4 C60D     		lsrs	r6, r0, #23
 5964 00d6 60B1     		cbz	r0, .L418
2679:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 5965              		.loc 1 2679 0
 5966 00d8 2068     		ldr	r0, [r4, #0]
 5967 00da 224A     		ldr	r2, .L450+8
 5968 00dc 9047     		blx	r2
 5969              	.LVL564:
2680:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 5970              		.loc 1 2680 0
 5971 00de 20B9     		cbnz	r0, .L432
 5972              	.LVL565:
 5973              	.L447:
2680:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 5974              		.loc 1 2680 0 is_stmt 0 discriminator 1
 5975 00e0 A179     		ldrb	r1, [r4, #6]	@ zero_extendqisi2
 5976 00e2 61F07F05 		orn	r5, r1, #127
 5977              	.LVL566:
 5978 00e6 A571     		strb	r5, [r4, #6]
 5979 00e8 34E0     		b	.L437
 5980              	.LVL567:
 5981              	.L432:
2681:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					nsect += ofs / SS(fp->fs);
 5982              		.loc 1 2681 0 is_stmt 1
 5983 00ea 00EB5726 		add	r6, r0, r7, lsr #9
 5984              	.LVL568:
 5985 00ee 00E0     		b	.L418
 5986              	.LVL569:
 5987              	.L439:
2640:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		fp->fptr = nsect = 0;
 5988              		.loc 1 2640 0
 5989 00f0 3E46     		mov	r6, r7
 5990              	.LVL570:
 5991              	.L418:
2685:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 5992              		.loc 1 2685 0
 5993 00f2 A068     		ldr	r0, [r4, #8]
 5994 00f4 C305     		lsls	r3, r0, #23
 5995 00f6 23D0     		beq	.L433
2685:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {
 5996              		.loc 1 2685 0 is_stmt 0 discriminator 1
 5997 00f8 A269     		ldr	r2, [r4, #24]
 5998 00fa 9642     		cmp	r6, r2
 5999 00fc 20D0     		beq	.L433
2688:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->flag & FA__DIRTY) {			/* Flush dirty buffer if needed */
 6000              		.loc 1 2688 0 is_stmt 1
 6001 00fe A779     		ldrb	r7, [r4, #6]	@ zero_extendqisi2
 6002              	.LVL571:
 6003 0100 7806     		lsls	r0, r7, #25
 6004 0102 0CD5     		bpl	.L434
2689:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 6005              		.loc 1 2689 0
 6006 0104 2146     		mov	r1, r4
 6007 0106 51F8243B 		ldr	r3, [r1], #36
 6008 010a 174F     		ldr	r7, .L450+12
 6009 010c 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 6010 010e 0123     		movs	r3, #1
 6011 0110 B847     		blx	r7
 6012 0112 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 6013 0114 68B9     		cbnz	r0, .L446
 6014              	.L435:
2691:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->flag &= ~FA__DIRTY;
 6015              		.loc 1 2691 0
 6016 0116 23F0400C 		bic	ip, r3, #64
 6017 011a 84F806C0 		strb	ip, [r4, #6]
 6018              	.L434:
2694:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)
 6019              		.loc 1 2694 0
 6020 011e 2146     		mov	r1, r4
 6021 0120 51F8242B 		ldr	r2, [r1], #36
 6022 0124 0123     		movs	r3, #1
 6023 0126 5078     		ldrb	r0, [r2, #1]	@ zero_extendqisi2
 6024 0128 104F     		ldr	r7, .L450+16
 6025 012a 3246     		mov	r2, r6
 6026 012c B847     		blx	r7
 6027 012e 30B1     		cbz	r0, .L436
 6028              	.LVL572:
 6029              	.L445:
2695:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ABORT(fp->fs, FR_DISK_ERR);
 6030              		.loc 1 2695 0
 6031 0130 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 6032              	.L446:
 6033 0132 63F07F0E 		orn	lr, r3, #127
 6034 0136 84F806E0 		strb	lr, [r4, #6]
 6035 013a 0125     		movs	r5, #1
 6036              	.LVL573:
 6037 013c 0BE0     		b	.L416
 6038              	.LVL574:
 6039              	.L436:
2697:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->dsect = nsect;
 6040              		.loc 1 2697 0
 6041 013e A661     		str	r6, [r4, #24]
 6042              	.L433:
2700:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fptr > fp->fsize) {			/* Set change flag if the file size is extended */
 6043              		.loc 1 2700 0
 6044 0140 A368     		ldr	r3, [r4, #8]
 6045 0142 E168     		ldr	r1, [r4, #12]
 6046 0144 8B42     		cmp	r3, r1
 6047 0146 06D9     		bls	.L416
2701:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->fsize = fp->fptr;
 6048              		.loc 1 2701 0
 6049 0148 E360     		str	r3, [r4, #12]
2702:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 6050              		.loc 1 2702 0
 6051 014a A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 6052 014c 43F02000 		orr	r0, r3, #32
 6053 0150 A071     		strb	r0, [r4, #6]
 6054 0152 00E0     		b	.L416
 6055              	.LVL575:
 6056              	.L437:
 6057              	.LBE65:
2564:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		LEAVE_FF(fp->fs, FR_INT_ERR);
 6058              		.loc 1 2564 0
 6059 0154 0225     		movs	r5, #2
 6060              	.LVL576:
 6061              	.L416:
2708:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6062              		.loc 1 2708 0
 6063 0156 2846     		mov	r0, r5
 6064 0158 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 6065              	.L451:
 6066              		.align	2
 6067              	.L450:
 6068 015c 00000000 		.word	validate
 6069 0160 00000000 		.word	create_chain
 6070 0164 00000000 		.word	clust2sect
 6071 0168 00000000 		.word	disk_write
 6072 016c 00000000 		.word	disk_read
 6073 0170 00000000 		.word	get_fat
 6074              		.cfi_endproc
 6075              	.LFE32:
 6077              		.section	.text.f_opendir,"ax",%progbits
 6078              		.align	1
 6079              		.global	f_opendir
 6080              		.thumb
 6081              		.thumb_func
 6083              	f_opendir:
 6084              	.LFB33:
2721:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6085              		.loc 1 2721 0
 6086              		.cfi_startproc
 6087              		@ args = 0, pretend = 0, frame = 24
 6088              		@ frame_needed = 0, uses_anonymous_args = 0
 6089              	.LVL577:
 6090 0000 10B5     		push	{r4, lr}
 6091              	.LCFI29:
 6092              		.cfi_def_cfa_offset 8
 6093              		.cfi_offset 14, -4
 6094              		.cfi_offset 4, -8
 6095 0002 86B0     		sub	sp, sp, #24
 6096              	.LCFI30:
 6097              		.cfi_def_cfa_offset 32
2721:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6098              		.loc 1 2721 0
 6099 0004 0446     		mov	r4, r0
 6100 0006 06A8     		add	r0, sp, #24
 6101              	.LVL578:
 6102 0008 40F8141D 		str	r1, [r0, #-20]!
2726:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj->fs, 0);
 6103              		.loc 1 2726 0
 6104 000c 0022     		movs	r2, #0
 6105 000e 2146     		mov	r1, r4
 6106              	.LVL579:
 6107 0010 154B     		ldr	r3, .L459
 6108 0012 9847     		blx	r3
 6109              	.LVL580:
2727:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6110              		.loc 1 2727 0
 6111 0014 28BB     		cbnz	r0, .L453
2728:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(*dj);
 6112              		.loc 1 2728 0
 6113 0016 03A8     		add	r0, sp, #12
 6114              	.LVL581:
 6115 0018 A061     		str	r0, [r4, #24]
2729:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(dj, path);			/* Follow the path to the directory */
 6116              		.loc 1 2729 0
 6117 001a 0199     		ldr	r1, [sp, #4]
 6118 001c 2046     		mov	r0, r4
 6119 001e 134A     		ldr	r2, .L459+4
 6120 0020 9047     		blx	r2
 6121              	.LVL582:
2731:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 6122              		.loc 1 2731 0
 6123 0022 C8B9     		cbnz	r0, .L454
2732:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dj->dir) {						/* It is not the root dir */
 6124              		.loc 1 2732 0
 6125 0024 6369     		ldr	r3, [r4, #20]
 6126 0026 73B1     		cbz	r3, .L455
2733:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj->dir[DIR_Attr] & AM_DIR) {	/* The object is a directory */
 6127              		.loc 1 2733 0
 6128 0028 D97A     		ldrb	r1, [r3, #11]	@ zero_extendqisi2
 6129 002a CA06     		lsls	r2, r1, #27
 6130 002c 18D5     		bpl	.L457
2734:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->sclust = LD_CLUST(dj->dir);
 6131              		.loc 1 2734 0
 6132 002e 93F814C0 		ldrb	ip, [r3, #20]	@ zero_extendqisi2
 6133 0032 597D     		ldrb	r1, [r3, #21]	@ zero_extendqisi2
 6134 0034 D87E     		ldrb	r0, [r3, #27]	@ zero_extendqisi2
 6135              	.LVL583:
 6136 0036 9A7E     		ldrb	r2, [r3, #26]	@ zero_extendqisi2
 6137 0038 4CEA012E 		orr	lr, ip, r1, lsl #8
 6138 003c 42EA002C 		orr	ip, r2, r0, lsl #8
 6139 0040 4CEA0E43 		orr	r3, ip, lr, lsl #16
 6140 0044 A360     		str	r3, [r4, #8]
 6141              	.L455:
 6142              	.LVL584:
2740:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->id = dj->fs->id;
 6143              		.loc 1 2740 0
 6144 0046 2268     		ldr	r2, [r4, #0]
2741:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 6145              		.loc 1 2741 0
 6146 0048 2046     		mov	r0, r4
2740:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->id = dj->fs->id;
 6147              		.loc 1 2740 0
 6148 004a B2F806E0 		ldrh	lr, [r2, #6]
2741:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 6149              		.loc 1 2741 0
 6150 004e 0021     		movs	r1, #0
2740:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->id = dj->fs->id;
 6151              		.loc 1 2740 0
 6152 0050 A4F804E0 		strh	lr, [r4, #4]	@ movhi
2741:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_sdi(dj, 0);			/* Rewind dir */
 6153              		.loc 1 2741 0
 6154 0054 064B     		ldr	r3, .L459+8
 6155 0056 9847     		blx	r3
 6156              	.LVL585:
 6157              	.L454:
2744:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 6158              		.loc 1 2744 0
 6159 0058 0428     		cmp	r0, #4
 6160 005a 08BF     		it	eq
 6161 005c 0520     		moveq	r0, #5
 6162 005e 00E0     		b	.L453
 6163              	.LVL586:
 6164              	.L457:
2736:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_NO_PATH;
 6165              		.loc 1 2736 0
 6166 0060 0520     		movs	r0, #5
 6167              	.LVL587:
 6168              	.L453:
2748:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6169              		.loc 1 2748 0
 6170 0062 06B0     		add	sp, sp, #24
 6171 0064 10BD     		pop	{r4, pc}
 6172              	.L460:
 6173 0066 00BF     		.align	2
 6174              	.L459:
 6175 0068 00000000 		.word	chk_mounted
 6176 006c 00000000 		.word	follow_path
 6177 0070 00000000 		.word	dir_sdi
 6178              		.cfi_endproc
 6179              	.LFE33:
 6181              		.section	.text.f_readdir,"ax",%progbits
 6182              		.align	1
 6183              		.global	f_readdir
 6184              		.thumb
 6185              		.thumb_func
 6187              	f_readdir:
 6188              	.LFB34:
2761:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6189              		.loc 1 2761 0
 6190              		.cfi_startproc
 6191              		@ args = 0, pretend = 0, frame = 16
 6192              		@ frame_needed = 0, uses_anonymous_args = 0
 6193              	.LVL588:
 6194 0000 7FB5     		push	{r0, r1, r2, r3, r4, r5, r6, lr}
 6195              	.LCFI31:
 6196              		.cfi_def_cfa_offset 32
 6197              		.cfi_offset 14, -4
 6198              		.cfi_offset 6, -8
 6199              		.cfi_offset 5, -12
 6200              		.cfi_offset 4, -16
 6201              		.cfi_offset 3, -20
 6202              		.cfi_offset 2, -24
 6203              		.cfi_offset 1, -28
 6204              		.cfi_offset 0, -32
2761:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6205              		.loc 1 2761 0
 6206 0002 0446     		mov	r4, r0
 6207 0004 0E46     		mov	r6, r1
2766:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(dj->fs, dj->id);			/* Check validity of the object */
 6208              		.loc 1 2766 0
 6209 0006 134B     		ldr	r3, .L468
 6210 0008 8188     		ldrh	r1, [r0, #4]
 6211              	.LVL589:
 6212 000a 0068     		ldr	r0, [r0, #0]
 6213              	.LVL590:
 6214 000c 9847     		blx	r3
 6215 000e 0546     		mov	r5, r0
 6216              	.LVL591:
2767:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6217              		.loc 1 2767 0
 6218 0010 E8B9     		cbnz	r0, .L462
2768:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (!fno) {
 6219              		.loc 1 2768 0
 6220 0012 26B9     		cbnz	r6, .L463
2769:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_sdi(dj, 0);			/* Rewind the directory object */
 6221              		.loc 1 2769 0
 6222 0014 2046     		mov	r0, r4
 6223              	.LVL592:
 6224 0016 2946     		mov	r1, r5
 6225 0018 0F4A     		ldr	r2, .L468+4
 6226 001a 9047     		blx	r2
 6227 001c 16E0     		b	.L467
 6228              	.L463:
2771:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			INIT_BUF(*dj);
 6229              		.loc 1 2771 0
 6230 001e 01A8     		add	r0, sp, #4
 6231 0020 A061     		str	r0, [r4, #24]
2772:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = dir_read(dj);				/* Read an directory item */
 6232              		.loc 1 2772 0
 6233 0022 0E49     		ldr	r1, .L468+8
 6234 0024 2046     		mov	r0, r4
 6235 0026 8847     		blx	r1
 6236              	.LVL593:
2773:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 6237              		.loc 1 2773 0
 6238 0028 0428     		cmp	r0, #4
2774:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj->sect = 0;
 6239              		.loc 1 2774 0
 6240 002a 08BF     		it	eq
 6241 002c 2561     		streq	r5, [r4, #16]
2773:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_NO_FILE) {		/* Reached end of dir */
 6242              		.loc 1 2773 0
 6243 002e 00D0     		beq	.L465
2777:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 6244              		.loc 1 2777 0
 6245 0030 60B9     		cbnz	r0, .L467
 6246              	.L465:
2778:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				get_fileinfo(dj, fno);		/* Get the object information */
 6247              		.loc 1 2778 0
 6248 0032 2046     		mov	r0, r4
 6249              	.LVL594:
 6250 0034 3146     		mov	r1, r6
 6251 0036 0A4A     		ldr	r2, .L468+12
 6252 0038 9047     		blx	r2
2779:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_next(dj, 0);		/* Increment index for next */
 6253              		.loc 1 2779 0
 6254 003a 0021     		movs	r1, #0
 6255 003c 2046     		mov	r0, r4
 6256 003e 094B     		ldr	r3, .L468+16
 6257 0040 9847     		blx	r3
 6258              	.LVL595:
2780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_NO_FILE) {
 6259              		.loc 1 2780 0
 6260 0042 0428     		cmp	r0, #4
 6261 0044 02D1     		bne	.L467
2781:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj->sect = 0;
 6262              		.loc 1 2781 0
 6263 0046 0021     		movs	r1, #0
 6264 0048 2161     		str	r1, [r4, #16]
 6265              	.LVL596:
 6266 004a 00E0     		b	.L462
 6267              	.LVL597:
 6268              	.L467:
2780:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_NO_FILE) {
 6269              		.loc 1 2780 0
 6270 004c 0546     		mov	r5, r0
 6271              	.L462:
 6272              	.LVL598:
2790:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6273              		.loc 1 2790 0
 6274 004e 2846     		mov	r0, r5
 6275 0050 04B0     		add	sp, sp, #16
 6276 0052 70BD     		pop	{r4, r5, r6, pc}
 6277              	.L469:
 6278              		.align	2
 6279              	.L468:
 6280 0054 00000000 		.word	validate
 6281 0058 00000000 		.word	dir_sdi
 6282 005c 00000000 		.word	dir_read
 6283 0060 00000000 		.word	get_fileinfo
 6284 0064 00000000 		.word	dir_next
 6285              		.cfi_endproc
 6286              	.LFE34:
 6288              		.section	.text.f_stat,"ax",%progbits
 6289              		.align	1
 6290              		.global	f_stat
 6291              		.thumb
 6292              		.thumb_func
 6294              	f_stat:
 6295              	.LFB35:
2803:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6296              		.loc 1 2803 0
 6297              		.cfi_startproc
 6298              		@ args = 0, pretend = 0, frame = 48
 6299              		@ frame_needed = 0, uses_anonymous_args = 0
 6300              	.LVL599:
 6301 0000 30B5     		push	{r4, r5, lr}
 6302              	.LCFI32:
 6303              		.cfi_def_cfa_offset 12
 6304              		.cfi_offset 14, -4
 6305              		.cfi_offset 5, -8
 6306              		.cfi_offset 4, -12
 6307 0002 8DB0     		sub	sp, sp, #52
 6308              	.LCFI33:
 6309              		.cfi_def_cfa_offset 64
2803:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6310              		.loc 1 2803 0
 6311 0004 0CAA     		add	r2, sp, #48
 6312 0006 42F82C0D 		str	r0, [r2, #-44]!
2809:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 6313              		.loc 1 2809 0
 6314 000a 1046     		mov	r0, r2
 6315              	.LVL600:
2803:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6316              		.loc 1 2803 0
 6317 000c 0C46     		mov	r4, r1
2809:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 0);
 6318              		.loc 1 2809 0
 6319 000e 0022     		movs	r2, #0
 6320 0010 02A9     		add	r1, sp, #8
 6321              	.LVL601:
 6322 0012 0B4B     		ldr	r3, .L473
 6323 0014 9847     		blx	r3
 6324 0016 0546     		mov	r5, r0
 6325              	.LVL602:
2810:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6326              		.loc 1 2810 0
 6327 0018 78B9     		cbnz	r0, .L471
2811:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 6328              		.loc 1 2811 0
 6329 001a 09A8     		add	r0, sp, #36
 6330              	.LVL603:
 6331 001c 0890     		str	r0, [sp, #32]
2812:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 6332              		.loc 1 2812 0
 6333 001e 094D     		ldr	r5, .L473+4
 6334              	.LVL604:
 6335 0020 02A8     		add	r0, sp, #8
 6336 0022 0199     		ldr	r1, [sp, #4]
 6337 0024 A847     		blx	r5
 6338 0026 0546     		mov	r5, r0
 6339              	.LVL605:
2813:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 6340              		.loc 1 2813 0
 6341 0028 38B9     		cbnz	r0, .L471
2814:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dj.dir)		/* Found an object */
 6342              		.loc 1 2814 0
 6343 002a 0799     		ldr	r1, [sp, #28]
 6344 002c 21B1     		cbz	r1, .L472
2815:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				get_fileinfo(&dj, fno);
 6345              		.loc 1 2815 0
 6346 002e 02A8     		add	r0, sp, #8
 6347              	.LVL606:
 6348 0030 2146     		mov	r1, r4
 6349 0032 054B     		ldr	r3, .L473+8
 6350 0034 9847     		blx	r3
 6351 0036 00E0     		b	.L471
 6352              	.L472:
2817:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
 6353              		.loc 1 2817 0
 6354 0038 0625     		movs	r5, #6
 6355              	.LVL607:
 6356              	.L471:
2823:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6357              		.loc 1 2823 0
 6358 003a 2846     		mov	r0, r5
 6359 003c 0DB0     		add	sp, sp, #52
 6360 003e 30BD     		pop	{r4, r5, pc}
 6361              	.L474:
 6362              		.align	2
 6363              	.L473:
 6364 0040 00000000 		.word	chk_mounted
 6365 0044 00000000 		.word	follow_path
 6366 0048 00000000 		.word	get_fileinfo
 6367              		.cfi_endproc
 6368              	.LFE35:
 6370              		.section	.text.f_getfree,"ax",%progbits
 6371              		.align	1
 6372              		.global	f_getfree
 6373              		.thumb
 6374              		.thumb_func
 6376              	f_getfree:
 6377              	.LFB36:
2837:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6378              		.loc 1 2837 0
 6379              		.cfi_startproc
 6380              		@ args = 0, pretend = 0, frame = 8
 6381              		@ frame_needed = 0, uses_anonymous_args = 0
 6382              	.LVL608:
 6383 0000 2DE9F74F 		push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 6384              	.LCFI34:
 6385              		.cfi_def_cfa_offset 48
 6386              		.cfi_offset 14, -4
 6387              		.cfi_offset 11, -8
 6388              		.cfi_offset 10, -12
 6389              		.cfi_offset 9, -16
 6390              		.cfi_offset 8, -20
 6391              		.cfi_offset 7, -24
 6392              		.cfi_offset 6, -28
 6393              		.cfi_offset 5, -32
 6394              		.cfi_offset 4, -36
 6395              		.cfi_offset 2, -40
 6396              		.cfi_offset 1, -44
 6397              		.cfi_offset 0, -48
2837:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6398              		.loc 1 2837 0
 6399 0004 02AE     		add	r6, sp, #8
 6400 0006 46F8040D 		str	r0, [r6, #-4]!
2845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
 6401              		.loc 1 2845 0
 6402 000a 3046     		mov	r0, r6
 6403              	.LVL609:
2837:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6404              		.loc 1 2837 0
 6405 000c 0D46     		mov	r5, r1
 6406 000e 1446     		mov	r4, r2
2845:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, fatfs, 0);
 6407              		.loc 1 2845 0
 6408 0010 1146     		mov	r1, r2
 6409              	.LVL610:
 6410 0012 384B     		ldr	r3, .L494
 6411 0014 0022     		movs	r2, #0
 6412              	.LVL611:
 6413 0016 9847     		blx	r3
 6414              	.LVL612:
 6415 0018 0646     		mov	r6, r0
 6416              	.LVL613:
2846:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6417              		.loc 1 2846 0
 6418 001a 0028     		cmp	r0, #0
 6419 001c 67D1     		bne	.L476
2848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
 6420              		.loc 1 2848 0
 6421 001e 2368     		ldr	r3, [r4, #0]
 6422 0020 D3F81C80 		ldr	r8, [r3, #28]
 6423 0024 1A69     		ldr	r2, [r3, #16]
 6424 0026 A8F10201 		sub	r1, r8, #2
 6425 002a 8A42     		cmp	r2, r1
2849:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*nclst = (*fatfs)->free_clust;
 6426              		.loc 1 2849 0
 6427 002c 98BF     		it	ls
 6428 002e 2A60     		strls	r2, [r5, #0]
2848:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if ((*fatfs)->free_clust <= (*fatfs)->n_fatent - 2) {
 6429              		.loc 1 2848 0
 6430 0030 5DD9     		bls	.L476
2852:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fat = (*fatfs)->fs_type;
 6431              		.loc 1 2852 0
 6432 0032 93F80090 		ldrb	r9, [r3, #0]	@ zero_extendqisi2
 6433              	.LVL614:
2854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT12) {
 6434              		.loc 1 2854 0
 6435 0036 B9F1010F 		cmp	r9, #1
 6436 003a 14D1     		bne	.L478
2857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					stat = get_fat(*fatfs, clst);
 6437              		.loc 1 2857 0
 6438 003c DFF8B8A0 		ldr	sl, .L494+4
2854:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT12) {
 6439              		.loc 1 2854 0
 6440 0040 4FF00208 		mov	r8, #2
 6441 0044 0746     		mov	r7, r0
 6442              	.LVL615:
 6443              	.L481:
2857:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					stat = get_fat(*fatfs, clst);
 6444              		.loc 1 2857 0
 6445 0046 4146     		mov	r1, r8
 6446 0048 2068     		ldr	r0, [r4, #0]
 6447 004a D047     		blx	sl
 6448              	.LVL616:
2858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 6449              		.loc 1 2858 0
 6450 004c 411C     		adds	r1, r0, #1
 6451 004e 41D0     		beq	.L489
2859:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6452              		.loc 1 2859 0
 6453 0050 0128     		cmp	r0, #1
 6454 0052 41D0     		beq	.L490
2860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 0) n++;
 6455              		.loc 1 2860 0
 6456 0054 00B9     		cbnz	r0, .L480
2860:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 0) n++;
 6457              		.loc 1 2860 0 is_stmt 0 discriminator 1
 6458 0056 0137     		adds	r7, r7, #1
 6459              	.LVL617:
 6460              	.L480:
2861:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} while (++clst < (*fatfs)->n_fatent);
 6461              		.loc 1 2861 0 is_stmt 1
 6462 0058 2368     		ldr	r3, [r4, #0]
 6463 005a 08F10108 		add	r8, r8, #1
 6464              	.LVL618:
 6465 005e D869     		ldr	r0, [r3, #28]
 6466              	.LVL619:
 6467 0060 8045     		cmp	r8, r0
 6468 0062 F0D3     		bcc	.L481
 6469 0064 3BE0     		b	.L479
 6470              	.LVL620:
 6471              	.L478:
2868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 6472              		.loc 1 2868 0
 6473 0066 DFF894B0 		ldr	fp, .L494+8
2864:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				sect = (*fatfs)->fatbase;
 6474              		.loc 1 2864 0
 6475 006a D3F824A0 		ldr	sl, [r3, #36]
 6476              	.LVL621:
2865:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				i = 0; p = 0;
 6477              		.loc 1 2865 0
 6478 006e 0246     		mov	r2, r0
 6479 0070 0346     		mov	r3, r0
 6480              	.LVL622:
2853:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			n = 0;
 6481              		.loc 1 2853 0
 6482 0072 0746     		mov	r7, r0
 6483              	.LVL623:
 6484              	.L487:
2867:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (!i) {
 6485              		.loc 1 2867 0
 6486 0074 4AB9     		cbnz	r2, .L482
 6487              	.LVL624:
2868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 6488              		.loc 1 2868 0
 6489 0076 2068     		ldr	r0, [r4, #0]
 6490 0078 5146     		mov	r1, sl
 6491 007a D847     		blx	fp
 6492              	.LVL625:
2869:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res != FR_OK) break;
 6493              		.loc 1 2869 0
 6494 007c 70BB     		cbnz	r0, .L491
2870:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p = (*fatfs)->win;
 6495              		.loc 1 2870 0
 6496 007e 2368     		ldr	r3, [r4, #0]
2868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 6497              		.loc 1 2868 0
 6498 0080 0AF1010A 		add	sl, sl, #1
 6499              	.LVL626:
2870:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p = (*fatfs)->win;
 6500              		.loc 1 2870 0
 6501 0084 3433     		adds	r3, r3, #52
 6502              	.LVL627:
2871:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						i = SS(*fatfs);
 6503              		.loc 1 2871 0
 6504 0086 4FF40072 		mov	r2, #512
 6505              	.LVL628:
 6506              	.L482:
2873:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (fat == FS_FAT16) {
 6507              		.loc 1 2873 0
 6508 008a B9F1020F 		cmp	r9, #2
 6509 008e 0AD1     		bne	.L483
2874:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (LD_WORD(p) == 0) n++;
 6510              		.loc 1 2874 0
 6511 0090 93F801C0 		ldrb	ip, [r3, #1]	@ zero_extendqisi2
 6512 0094 93F800E0 		ldrb	lr, [r3, #0]	@ zero_extendqisi2
 6513 0098 5EEA0C21 		orrs	r1, lr, ip, lsl #8
 6514 009c 08BF     		it	eq
 6515 009e 0137     		addeq	r7, r7, #1
 6516              	.LVL629:
2875:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p += 2; i -= 2;
 6517              		.loc 1 2875 0
 6518 00a0 0233     		adds	r3, r3, #2
 6519              	.LVL630:
 6520 00a2 023A     		subs	r2, r2, #2
 6521              	.LVL631:
 6522 00a4 12E0     		b	.L485
 6523              	.L483:
2877:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 6524              		.loc 1 2877 0
 6525 00a6 9878     		ldrb	r0, [r3, #2]	@ zero_extendqisi2
 6526 00a8 93F803C0 		ldrb	ip, [r3, #3]	@ zero_extendqisi2
 6527 00ac 0104     		lsls	r1, r0, #16
 6528 00ae 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 6529 00b0 41EA0C61 		orr	r1, r1, ip, lsl #24
 6530 00b4 93F801E0 		ldrb	lr, [r3, #1]	@ zero_extendqisi2
 6531 00b8 41EA000C 		orr	ip, r1, r0
 6532 00bc 4CEA0E20 		orr	r0, ip, lr, lsl #8
 6533 00c0 20F07041 		bic	r1, r0, #-268435456
 6534 00c4 01B9     		cbnz	r1, .L486
2877:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if ((LD_DWORD(p) & 0x0FFFFFFF) == 0) n++;
 6535              		.loc 1 2877 0 is_stmt 0 discriminator 1
 6536 00c6 0137     		adds	r7, r7, #1
 6537              	.LVL632:
 6538              	.L486:
2878:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						p += 4; i -= 4;
 6539              		.loc 1 2878 0 is_stmt 1
 6540 00c8 0433     		adds	r3, r3, #4
 6541              	.LVL633:
 6542 00ca 043A     		subs	r2, r2, #4
 6543              	.LVL634:
 6544              	.L485:
2880:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				} while (--clst);
 6545              		.loc 1 2880 0
 6546 00cc B8F10108 		subs	r8, r8, #1
 6547              	.LVL635:
 6548 00d0 D0D1     		bne	.L487
 6549 00d2 04E0     		b	.L479
 6550              	.LVL636:
 6551              	.L489:
2858:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 6552              		.loc 1 2858 0
 6553 00d4 0126     		movs	r6, #1
 6554              	.LVL637:
 6555 00d6 02E0     		b	.L479
 6556              	.LVL638:
 6557              	.L490:
2859:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 6558              		.loc 1 2859 0
 6559 00d8 0226     		movs	r6, #2
 6560              	.LVL639:
 6561 00da 00E0     		b	.L479
 6562              	.LVL640:
 6563              	.L491:
2868:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = move_window(*fatfs, sect++);
 6564              		.loc 1 2868 0
 6565 00dc 0646     		mov	r6, r0
 6566              	.LVL641:
 6567              	.L479:
2882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			(*fatfs)->free_clust = n;
 6568              		.loc 1 2882 0
 6569 00de 2368     		ldr	r3, [r4, #0]
2883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 6570              		.loc 1 2883 0
 6571 00e0 B9F1030F 		cmp	r9, #3
2882:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			(*fatfs)->free_clust = n;
 6572              		.loc 1 2882 0
 6573 00e4 1F61     		str	r7, [r3, #16]
2883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 6574              		.loc 1 2883 0
 6575 00e6 01D1     		bne	.L488
2883:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fat == FS_FAT32) (*fatfs)->fsi_flag = 1;
 6576              		.loc 1 2883 0 is_stmt 0 discriminator 1
 6577 00e8 0122     		movs	r2, #1
 6578 00ea 5A71     		strb	r2, [r3, #5]
 6579              	.L488:
2884:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			*nclst = n;
 6580              		.loc 1 2884 0 is_stmt 1
 6581 00ec 2F60     		str	r7, [r5, #0]
 6582              	.LVL642:
 6583              	.L476:
2888:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6584              		.loc 1 2888 0
 6585 00ee 3046     		mov	r0, r6
 6586 00f0 BDE8FE8F 		pop	{r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 6587              	.L495:
 6588              		.align	2
 6589              	.L494:
 6590 00f4 00000000 		.word	chk_mounted
 6591 00f8 00000000 		.word	get_fat
 6592 00fc 00000000 		.word	move_window
 6593              		.cfi_endproc
 6594              	.LFE36:
 6596              		.section	.text.f_truncate,"ax",%progbits
 6597              		.align	1
 6598              		.global	f_truncate
 6599              		.thumb
 6600              		.thumb_func
 6602              	f_truncate:
 6603              	.LFB37:
2900:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6604              		.loc 1 2900 0
 6605              		.cfi_startproc
 6606              		@ args = 0, pretend = 0, frame = 0
 6607              		@ frame_needed = 0, uses_anonymous_args = 0
 6608              	.LVL643:
 6609 0000 70B5     		push	{r4, r5, r6, lr}
 6610              	.LCFI35:
 6611              		.cfi_def_cfa_offset 16
 6612              		.cfi_offset 14, -4
 6613              		.cfi_offset 6, -8
 6614              		.cfi_offset 5, -12
 6615              		.cfi_offset 4, -16
2905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 6616              		.loc 1 2905 0
 6617 0002 8188     		ldrh	r1, [r0, #4]
2900:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6618              		.loc 1 2900 0
 6619 0004 0446     		mov	r4, r0
2905:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = validate(fp->fs, fp->id);		/* Check validity of the object */
 6620              		.loc 1 2905 0
 6621 0006 234B     		ldr	r3, .L513
 6622 0008 0068     		ldr	r0, [r0, #0]
 6623              	.LVL644:
 6624 000a 9847     		blx	r3
 6625 000c 0646     		mov	r6, r0
 6626              	.LVL645:
2906:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6627              		.loc 1 2906 0
 6628 000e 0028     		cmp	r0, #0
 6629 0010 30D1     		bne	.L499
2907:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->flag & FA__ERROR) {			/* Check abort flag */
 6630              		.loc 1 2907 0
 6631 0012 A379     		ldrb	r3, [r4, #6]	@ zero_extendqisi2
 6632 0014 1906     		lsls	r1, r3, #24
 6633 0016 03D4     		bmi	.L507
2910:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 6634              		.loc 1 2910 0
 6635 0018 9A07     		lsls	r2, r3, #30
 6636 001a 2DD4     		bmi	.L498
2911:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_DENIED;
 6637              		.loc 1 2911 0
 6638 001c 0726     		movs	r6, #7
 6639 001e 29E0     		b	.L499
 6640              	.L507:
2908:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INT_ERR;
 6641              		.loc 1 2908 0
 6642 0020 0226     		movs	r6, #2
 6643              	.LVL646:
 6644 0022 27E0     		b	.L499
 6645              	.LVL647:
 6646              	.L504:
2917:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 6647              		.loc 1 2917 0
 6648 0024 43F02000 		orr	r0, r3, #32
2916:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 6649              		.loc 1 2916 0
 6650 0028 E560     		str	r5, [r4, #12]
2917:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			fp->flag |= FA__WRITTEN;
 6651              		.loc 1 2917 0
 6652 002a A071     		strb	r0, [r4, #6]
2918:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 6653              		.loc 1 2918 0
 6654 002c 35B9     		cbnz	r5, .L500
2919:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = remove_chain(fp->fs, fp->org_clust);
 6655              		.loc 1 2919 0
 6656 002e 2068     		ldr	r0, [r4, #0]
 6657 0030 2169     		ldr	r1, [r4, #16]
 6658 0032 194A     		ldr	r2, .L513+4
 6659 0034 9047     		blx	r2
2920:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				fp->org_clust = 0;
 6660              		.loc 1 2920 0
 6661 0036 2561     		str	r5, [r4, #16]
2919:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = remove_chain(fp->fs, fp->org_clust);
 6662              		.loc 1 2919 0
 6663 0038 0646     		mov	r6, r0
 6664              	.LVL648:
 6665 003a 15E0     		b	.L501
 6666              	.LVL649:
 6667              	.L500:
2922:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ncl = get_fat(fp->fs, fp->curr_clust);
 6668              		.loc 1 2922 0
 6669 003c 174D     		ldr	r5, .L513+8
 6670 003e 2068     		ldr	r0, [r4, #0]
 6671 0040 6169     		ldr	r1, [r4, #20]
 6672 0042 A847     		blx	r5
 6673 0044 0546     		mov	r5, r0
 6674              	.LVL650:
2924:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 6675              		.loc 1 2924 0
 6676 0046 0130     		adds	r0, r0, #1
 6677              	.LVL651:
 6678 0048 1BD0     		beq	.L508
2925:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 6679              		.loc 1 2925 0
 6680 004a 012D     		cmp	r5, #1
 6681 004c 1DD1     		bne	.L510
 6682 004e 1AE0     		b	.L511
 6683              	.L512:
2927:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = put_fat(fp->fs, fp->curr_clust, 0x0FFFFFFF);
 6684              		.loc 1 2927 0
 6685 0050 134E     		ldr	r6, .L513+12
 6686 0052 6169     		ldr	r1, [r4, #20]
 6687 0054 6FF07042 		mvn	r2, #-268435456
 6688 0058 B047     		blx	r6
 6689 005a 0646     		mov	r6, r0
 6690              	.LVL652:
2928:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 6691              		.loc 1 2928 0
 6692 005c 28B9     		cbnz	r0, .L505
2928:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 6693              		.loc 1 2928 0 is_stmt 0 discriminator 1
 6694 005e 2068     		ldr	r0, [r4, #0]
 6695              	.LVL653:
 6696 0060 2946     		mov	r1, r5
 6697 0062 0D4B     		ldr	r3, .L513+4
 6698 0064 9847     		blx	r3
 6699 0066 0646     		mov	r6, r0
 6700              	.LVL654:
 6701              	.L501:
2932:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
 6702              		.loc 1 2932 0 is_stmt 1
 6703 0068 26B1     		cbz	r6, .L499
 6704              	.LVL655:
 6705              	.L505:
2932:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res != FR_OK) fp->flag |= FA__ERROR;
 6706              		.loc 1 2932 0 is_stmt 0 discriminator 1
 6707 006a 94F806C0 		ldrb	ip, [r4, #6]	@ zero_extendqisi2
 6708 006e 6CF07F01 		orn	r1, ip, #127
 6709 0072 A171     		strb	r1, [r4, #6]
 6710              	.L499:
 6711              	.LVL656:
2936:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6712              		.loc 1 2936 0 is_stmt 1
 6713 0074 3046     		mov	r0, r6
 6714 0076 70BD     		pop	{r4, r5, r6, pc}
 6715              	.LVL657:
 6716              	.L498:
2915:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (fp->fsize > fp->fptr) {
 6717              		.loc 1 2915 0
 6718 0078 A568     		ldr	r5, [r4, #8]
 6719 007a E068     		ldr	r0, [r4, #12]
 6720 007c A842     		cmp	r0, r5
 6721 007e D1D8     		bhi	.L504
 6722 0080 F8E7     		b	.L499
 6723              	.LVL658:
 6724              	.L508:
2924:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 6725              		.loc 1 2924 0
 6726 0082 0126     		movs	r6, #1
 6727 0084 F1E7     		b	.L505
 6728              	.L511:
2925:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (ncl == 1) res = FR_INT_ERR;
 6729              		.loc 1 2925 0
 6730 0086 0226     		movs	r6, #2
 6731 0088 EFE7     		b	.L505
 6732              	.L510:
2926:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 6733              		.loc 1 2926 0
 6734 008a 2068     		ldr	r0, [r4, #0]
 6735 008c C269     		ldr	r2, [r0, #28]
 6736 008e 9542     		cmp	r5, r2
 6737 0090 F0D2     		bcs	.L499
 6738 0092 DDE7     		b	.L512
 6739              	.L514:
 6740              		.align	2
 6741              	.L513:
 6742 0094 00000000 		.word	validate
 6743 0098 00000000 		.word	remove_chain
 6744 009c 00000000 		.word	get_fat
 6745 00a0 00000000 		.word	put_fat
 6746              		.cfi_endproc
 6747              	.LFE37:
 6749              		.section	.text.f_unlink,"ax",%progbits
 6750              		.align	1
 6751              		.global	f_unlink
 6752              		.thumb
 6753              		.thumb_func
 6755              	f_unlink:
 6756              	.LFB38:
2948:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6757              		.loc 1 2948 0
 6758              		.cfi_startproc
 6759              		@ args = 0, pretend = 0, frame = 80
 6760              		@ frame_needed = 0, uses_anonymous_args = 0
 6761              	.LVL659:
 6762 0000 30B5     		push	{r4, r5, lr}
 6763              	.LCFI36:
 6764              		.cfi_def_cfa_offset 12
 6765              		.cfi_offset 14, -4
 6766              		.cfi_offset 5, -8
 6767              		.cfi_offset 4, -12
 6768 0002 95B0     		sub	sp, sp, #84
 6769              	.LCFI37:
 6770              		.cfi_def_cfa_offset 96
2948:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6771              		.loc 1 2948 0
 6772 0004 14A9     		add	r1, sp, #80
 6773 0006 41F84C0D 		str	r0, [r1, #-76]!
2956:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 6774              		.loc 1 2956 0
 6775 000a 0846     		mov	r0, r1
 6776              	.LVL660:
 6777 000c 0122     		movs	r2, #1
 6778 000e 03A9     		add	r1, sp, #12
 6779 0010 2E4B     		ldr	r3, .L532
 6780 0012 9847     		blx	r3
 6781              	.LVL661:
2957:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6782              		.loc 1 2957 0
 6783 0014 0028     		cmp	r0, #0
 6784 0016 4CD1     		bne	.L516
2958:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 6785              		.loc 1 2958 0
 6786 0018 11A8     		add	r0, sp, #68
 6787              	.LVL662:
 6788 001a 0990     		str	r0, [sp, #36]
2959:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 6789              		.loc 1 2959 0
 6790 001c 0199     		ldr	r1, [sp, #4]
 6791 001e 03A8     		add	r0, sp, #12
 6792 0020 2B4A     		ldr	r2, .L532+4
 6793 0022 9047     		blx	r2
 6794              	.LVL663:
2960:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 6795              		.loc 1 2960 0
 6796 0024 0028     		cmp	r0, #0
 6797 0026 44D1     		bne	.L516
2960:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 6798              		.loc 1 2960 0 is_stmt 0 discriminator 1
 6799 0028 099B     		ldr	r3, [sp, #36]
 6800 002a 93F80BC0 		ldrb	ip, [r3, #11]	@ zero_extendqisi2
 6801 002e 5FEA8C63 		lsls	r3, ip, #26
 6802 0032 40D5     		bpl	.L518
2961:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 6803              		.loc 1 2961 0 is_stmt 1
 6804 0034 0620     		movs	r0, #6
 6805              	.LVL664:
 6806 0036 3CE0     		b	.L516
 6807              	.LVL665:
 6808              	.L530:
2970:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dir[DIR_Attr] & AM_RDO)
 6809              		.loc 1 2970 0
 6810 0038 DC7A     		ldrb	r4, [r3, #11]	@ zero_extendqisi2
2971:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 6811              		.loc 1 2971 0
 6812 003a 14F0010F 		tst	r4, #1
 6813 003e 0CBF     		ite	eq
 6814 0040 0020     		moveq	r0, #0
 6815 0042 0720     		movne	r0, #7
 6816 0044 00E0     		b	.L519
 6817              	.L531:
2968:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the start directory */
 6818              		.loc 1 2968 0
 6819 0046 0620     		movs	r0, #6
 6820              	.L519:
 6821              	.LVL666:
2973:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dclst = LD_CLUST(dir);
 6822              		.loc 1 2973 0
 6823 0048 5D7D     		ldrb	r5, [r3, #21]	@ zero_extendqisi2
 6824 004a 1C7D     		ldrb	r4, [r3, #20]	@ zero_extendqisi2
 6825 004c D97E     		ldrb	r1, [r3, #27]	@ zero_extendqisi2
 6826 004e 9A7E     		ldrb	r2, [r3, #26]	@ zero_extendqisi2
2974:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 6827              		.loc 1 2974 0
 6828 0050 0028     		cmp	r0, #0
 6829 0052 2ED1     		bne	.L516
2974:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 6830              		.loc 1 2974 0 is_stmt 0 discriminator 1
 6831 0054 93F80BE0 		ldrb	lr, [r3, #11]	@ zero_extendqisi2
2973:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dclst = LD_CLUST(dir);
 6832              		.loc 1 2973 0 is_stmt 1 discriminator 1
 6833 0058 44EA0520 		orr	r0, r4, r5, lsl #8
 6834              	.LVL667:
 6835 005c 42EA0121 		orr	r1, r2, r1, lsl #8
 6836 0060 41EA0044 		orr	r4, r1, r0, lsl #16
2974:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-dir? */
 6837              		.loc 1 2974 0 discriminator 1
 6838 0064 5FEACE60 		lsls	r0, lr, #27
 6839 0068 29D5     		bpl	.L521
2976:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = FR_INT_ERR;
 6840              		.loc 1 2976 0
 6841 006a 0220     		movs	r0, #2
2975:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dclst < 2) {
 6842              		.loc 1 2975 0
 6843 006c 012C     		cmp	r4, #1
 6844 006e 20D9     		bls	.L516
2978:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_cpy(&sdj, &dj, sizeof(DIR));	/* Check if the sub-dir is empty or not */
 6845              		.loc 1 2978 0
 6846 0070 0AA8     		add	r0, sp, #40
 6847 0072 03A9     		add	r1, sp, #12
 6848 0074 1C22     		movs	r2, #28
 6849 0076 174B     		ldr	r3, .L532+8
 6850              	.LVL668:
 6851 0078 9847     		blx	r3
 6852              	.LVL669:
2979:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					sdj.sclust = dclst;
 6853              		.loc 1 2979 0
 6854 007a 0C94     		str	r4, [sp, #48]
2980:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = dir_sdi(&sdj, 2);		/* Exclude dot entries */
 6855              		.loc 1 2980 0
 6856 007c 0AA8     		add	r0, sp, #40
 6857 007e 0221     		movs	r1, #2
 6858 0080 154A     		ldr	r2, .L532+12
 6859 0082 9047     		blx	r2
 6860              	.LVL670:
2981:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) {
 6861              		.loc 1 2981 0
 6862 0084 A8B9     		cbnz	r0, .L516
2982:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = dir_read(&sdj);
 6863              		.loc 1 2982 0
 6864 0086 0AA8     		add	r0, sp, #40
 6865              	.LVL671:
 6866 0088 1449     		ldr	r1, .L532+16
 6867 008a 8847     		blx	r1
 6868              	.LVL672:
2983:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res == FR_OK			/* Not empty dir */
 6869              		.loc 1 2983 0
 6870 008c 30B1     		cbz	r0, .L528
2985:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						|| dclst == sdj.fs->cdir	/* Current dir */
 6871              		.loc 1 2985 0
 6872 008e 0A9B     		ldr	r3, [sp, #40]
 6873 0090 9A69     		ldr	r2, [r3, #24]
 6874 0092 9442     		cmp	r4, r2
 6875 0094 02D0     		beq	.L528
2988:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (res == FR_NO_FILE) res = FR_OK;	/* Empty */
 6876              		.loc 1 2988 0
 6877 0096 0428     		cmp	r0, #4
 6878 0098 11D0     		beq	.L521
 6879 009a 0AE0     		b	.L516
 6880              	.L528:
2985:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						|| dclst == sdj.fs->cdir	/* Current dir */
 6881              		.loc 1 2985 0
 6882 009c 0720     		movs	r0, #7
 6883              	.LVL673:
 6884 009e 08E0     		b	.L516
 6885              	.LVL674:
 6886              	.L524:
2995:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (dclst)				/* Remove the cluster chain if exist */
 6887              		.loc 1 2995 0
 6888 00a0 24B1     		cbz	r4, .L522
2996:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						res = remove_chain(dj.fs, dclst);
 6889              		.loc 1 2996 0
 6890 00a2 0398     		ldr	r0, [sp, #12]
 6891              	.LVL675:
 6892 00a4 2146     		mov	r1, r4
 6893 00a6 0E4A     		ldr	r2, .L532+20
 6894 00a8 9047     		blx	r2
 6895              	.LVL676:
2997:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) res = sync(dj.fs);
 6896              		.loc 1 2997 0
 6897 00aa 10B9     		cbnz	r0, .L516
 6898              	.LVL677:
 6899              	.L522:
2997:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) res = sync(dj.fs);
 6900              		.loc 1 2997 0 is_stmt 0 discriminator 1
 6901 00ac 0398     		ldr	r0, [sp, #12]
 6902 00ae 0D49     		ldr	r1, .L532+24
 6903 00b0 8847     		blx	r1
 6904              	.LVL678:
 6905              	.L516:
3004:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 6906              		.loc 1 3004 0 is_stmt 1
 6907 00b2 15B0     		add	sp, sp, #84
 6908 00b4 30BD     		pop	{r4, r5, pc}
 6909              	.L518:
 6910              	.LVL679:
2966:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;
 6911              		.loc 1 2966 0
 6912 00b6 089B     		ldr	r3, [sp, #32]
 6913              	.LVL680:
2967:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dir) {
 6914              		.loc 1 2967 0
 6915 00b8 002B     		cmp	r3, #0
 6916 00ba BDD1     		bne	.L530
 6917 00bc C3E7     		b	.L531
 6918              	.LVL681:
 6919              	.L521:
2993:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = dir_remove(&dj);		/* Remove the directory entry */
 6920              		.loc 1 2993 0
 6921 00be 03A8     		add	r0, sp, #12
 6922 00c0 094B     		ldr	r3, .L532+28
 6923 00c2 9847     		blx	r3
 6924              	.LVL682:
2994:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) {
 6925              		.loc 1 2994 0
 6926 00c4 0028     		cmp	r0, #0
 6927 00c6 EBD0     		beq	.L524
 6928 00c8 F3E7     		b	.L516
 6929              	.L533:
 6930 00ca 00BF     		.align	2
 6931              	.L532:
 6932 00cc 00000000 		.word	chk_mounted
 6933 00d0 00000000 		.word	follow_path
 6934 00d4 00000000 		.word	mem_cpy
 6935 00d8 00000000 		.word	dir_sdi
 6936 00dc 00000000 		.word	dir_read
 6937 00e0 00000000 		.word	remove_chain
 6938 00e4 00000000 		.word	sync
 6939 00e8 00000000 		.word	dir_remove
 6940              		.cfi_endproc
 6941              	.LFE38:
 6943              		.section	.text.f_mkdir,"ax",%progbits
 6944              		.align	1
 6945              		.global	f_mkdir
 6946              		.thumb
 6947              		.thumb_func
 6949              	f_mkdir:
 6950              	.LFB39:
3016:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6951              		.loc 1 3016 0
 6952              		.cfi_startproc
 6953              		@ args = 0, pretend = 0, frame = 56
 6954              		@ frame_needed = 0, uses_anonymous_args = 0
 6955              	.LVL683:
 6956 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 6957              	.LCFI38:
 6958              		.cfi_def_cfa_offset 36
 6959              		.cfi_offset 14, -4
 6960              		.cfi_offset 11, -8
 6961              		.cfi_offset 10, -12
 6962              		.cfi_offset 9, -16
 6963              		.cfi_offset 8, -20
 6964              		.cfi_offset 7, -24
 6965              		.cfi_offset 6, -28
 6966              		.cfi_offset 5, -32
 6967              		.cfi_offset 4, -36
 6968 0004 8FB0     		sub	sp, sp, #60
 6969              	.LCFI39:
 6970              		.cfi_def_cfa_offset 96
3016:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 6971              		.loc 1 3016 0
 6972 0006 0EAC     		add	r4, sp, #56
 6973 0008 44F82C0D 		str	r0, [r4, #-44]!
3020:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
 6974              		.loc 1 3020 0
 6975 000c 7448     		ldr	r0, .L556
 6976              	.LVL684:
 6977 000e 8047     		blx	r0
3024:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 6978              		.loc 1 3024 0
 6979 0010 04A9     		add	r1, sp, #16
3020:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	DWORD dsc, dcl, pcl, tim = get_fattime();
 6980              		.loc 1 3020 0
 6981 0012 8146     		mov	r9, r0
 6982              	.LVL685:
3024:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 6983              		.loc 1 3024 0
 6984 0014 0122     		movs	r2, #1
 6985 0016 2046     		mov	r0, r4
 6986              	.LVL686:
 6987 0018 724B     		ldr	r3, .L556+4
 6988 001a 9847     		blx	r3
 6989 001c 8046     		mov	r8, r0
 6990              	.LVL687:
3025:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 6991              		.loc 1 3025 0
 6992 001e 0028     		cmp	r0, #0
 6993 0020 40F0C480 		bne	.L535
3026:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 6994              		.loc 1 3026 0
 6995 0024 0BA9     		add	r1, sp, #44
 6996 0026 0A91     		str	r1, [sp, #40]
3027:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 6997              		.loc 1 3027 0
 6998 0028 04A8     		add	r0, sp, #16
 6999              	.LVL688:
 7000 002a 0399     		ldr	r1, [sp, #12]
 7001 002c 6E4A     		ldr	r2, .L556+8
 7002 002e 9047     		blx	r2
 7003 0030 8046     		mov	r8, r0
 7004              	.LVL689:
3028:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 7005              		.loc 1 3028 0
 7006 0032 60B1     		cbz	r0, .L548
3029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 7007              		.loc 1 3029 0
 7008 0034 0428     		cmp	r0, #4
 7009 0036 40F0B980 		bne	.L535
3029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 7010              		.loc 1 3029 0 is_stmt 0 discriminator 1
 7011 003a 0A9B     		ldr	r3, [sp, #40]
 7012 003c DC7A     		ldrb	r4, [r3, #11]	@ zero_extendqisi2
 7013 003e 14F02004 		ands	r4, r4, #32
3030:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 7014              		.loc 1 3030 0 is_stmt 1 discriminator 1
 7015 0042 18BF     		it	ne
 7016 0044 4FF00608 		movne	r8, #6
3029:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NS] & NS_DOT))
 7017              		.loc 1 3029 0 discriminator 1
 7018 0048 40F0B080 		bne	.L535
 7019 004c B2E0     		b	.L554
 7020              	.L548:
3028:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 7021              		.loc 1 3028 0
 7022 004e 4FF00808 		mov	r8, #8
 7023              	.LVL690:
 7024 0052 ABE0     		b	.L535
 7025              	.LVL691:
 7026              	.L545:
3035:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;
 7027              		.loc 1 3035 0
 7028 0054 012D     		cmp	r5, #1
 7029 0056 08BF     		it	eq
 7030 0058 4FF00208 		moveq	r8, #2
 7031 005c 00F08280 		beq	.L546
3036:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 7032              		.loc 1 3036 0
 7033 0060 6A1C     		adds	r2, r5, #1
 7034 0062 08BF     		it	eq
 7035 0064 4FF00108 		moveq	r8, #1
 7036 0068 7CD0     		beq	.L546
 7037 006a AEE0     		b	.L555
 7038              	.LVL692:
 7039              	.L547:
3040:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 7040              		.loc 1 3040 0
 7041 006c 049C     		ldr	r4, [sp, #16]
 7042 006e 2946     		mov	r1, r5
 7043 0070 5E4E     		ldr	r6, .L556+12
 7044 0072 2046     		mov	r0, r4
 7045              	.LVL693:
 7046 0074 B047     		blx	r6
3041:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir = dj.fs->win;
 7047              		.loc 1 3041 0
 7048 0076 04F13406 		add	r6, r4, #52
3042:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
 7049              		.loc 1 3042 0
 7050 007a 5146     		mov	r1, sl
 7051 007c DFF87881 		ldr	r8, .L556+24
 7052              	.LVL694:
 7053 0080 4FF40072 		mov	r2, #512
3040:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dsc = clust2sect(dj.fs, dcl);
 7054              		.loc 1 3040 0
 7055 0084 0746     		mov	r7, r0
 7056              	.LVL695:
3042:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_set(dir, 0, SS(dj.fs));
 7057              		.loc 1 3042 0
 7058 0086 3046     		mov	r0, r6
 7059              	.LVL696:
 7060 0088 C047     		blx	r8
3043:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_set(dir+DIR_Name, ' ', 8+3);	/* Create "." entry */
 7061              		.loc 1 3043 0
 7062 008a 2021     		movs	r1, #32
 7063 008c 0B22     		movs	r2, #11
 7064 008e 3046     		mov	r0, r6
 7065 0090 C047     		blx	r8
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7066              		.loc 1 3046 0
 7067 0092 C9F3072A 		ubfx	sl, r9, #8, #8
 7068              	.LVL697:
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7069              		.loc 1 3047 0
 7070 0096 2A0C     		lsrs	r2, r5, #16
3045:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 7071              		.loc 1 3045 0
 7072 0098 1020     		movs	r0, #16
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7073              		.loc 1 3047 0
 7074 009a C5F3072B 		ubfx	fp, r5, #8, #8
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7075              		.loc 1 3046 0
 7076 009e 5FFA89F3 		uxtb	r3, r9
 7077 00a2 C9F30741 		ubfx	r1, r9, #16, #8
3044:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Name] = '.';
 7078              		.loc 1 3044 0
 7079 00a6 4FF02E08 		mov	r8, #46
3045:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;
 7080              		.loc 1 3045 0
 7081 00aa 84F83F00 		strb	r0, [r4, #63]
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7082              		.loc 1 3046 0
 7083 00ae 8DF809A0 		strb	sl, [sp, #9]
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7084              		.loc 1 3047 0
 7085 00b2 100A     		lsrs	r0, r2, #8
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7086              		.loc 1 3046 0
 7087 00b4 84F84BA0 		strb	sl, [r4, #75]
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7088              		.loc 1 3047 0
 7089 00b8 8DF80AB0 		strb	fp, [sp, #10]
 7090 00bc 84F84FB0 		strb	fp, [r4, #79]
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7091              		.loc 1 3046 0
 7092 00c0 4FEA1969 		lsr	r9, r9, #24
 7093              	.LVL698:
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7094              		.loc 1 3047 0
 7095 00c4 5FFA82FB 		uxtb	fp, r2
 7096 00c8 5FFA85FA 		uxtb	sl, r5
3048:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 7097              		.loc 1 3048 0
 7098 00cc 2022     		movs	r2, #32
3044:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Name] = '.';
 7099              		.loc 1 3044 0
 7100 00ce 84F83480 		strb	r8, [r4, #52]
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7101              		.loc 1 3046 0
 7102 00d2 0093     		str	r3, [sp, #0]
 7103 00d4 84F84A30 		strb	r3, [r4, #74]
 7104 00d8 0191     		str	r1, [sp, #4]
 7105 00da 84F84C10 		strb	r1, [r4, #76]
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7106              		.loc 1 3047 0
 7107 00de 8DF80B00 		strb	r0, [sp, #11]
 7108 00e2 84F84900 		strb	r0, [r4, #73]
3048:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 7109              		.loc 1 3048 0
 7110 00e6 424B     		ldr	r3, .L556+16
3046:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);
 7111              		.loc 1 3046 0
 7112 00e8 84F84D90 		strb	r9, [r4, #77]
3047:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);
 7113              		.loc 1 3047 0
 7114 00ec 84F84EA0 		strb	sl, [r4, #78]
 7115 00f0 84F848B0 		strb	fp, [r4, #72]
3048:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(dir+32, dir, 32); 			/* Create ".." entry */
 7116              		.loc 1 3048 0
 7117 00f4 04F15400 		add	r0, r4, #84
 7118 00f8 3146     		mov	r1, r6
 7119 00fa 9847     		blx	r3
3050:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 7120              		.loc 1 3050 0
 7121 00fc 049A     		ldr	r2, [sp, #16]
3049:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
 7122              		.loc 1 3049 0
 7123 00fe 84F85580 		strb	r8, [r4, #85]
3050:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 7124              		.loc 1 3050 0
 7125 0102 92F80080 		ldrb	r8, [r2, #0]	@ zero_extendqisi2
3049:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[33] = '.'; pcl = dj.sclust;
 7126              		.loc 1 3049 0
 7127 0106 069B     		ldr	r3, [sp, #24]
 7128              	.LVL699:
3050:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 7129              		.loc 1 3050 0
 7130 0108 B8F1030F 		cmp	r8, #3
 7131 010c 03D1     		bne	.L540
3050:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (dj.fs->fs_type == FS_FAT32 && pcl == dj.fs->dirbase)
 7132              		.loc 1 3050 0 is_stmt 0 discriminator 1
 7133 010e 916A     		ldr	r1, [r2, #40]
3051:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					pcl = 0;
 7134              		.loc 1 3051 0 is_stmt 1 discriminator 1
 7135 0110 8B42     		cmp	r3, r1
 7136 0112 08BF     		it	eq
 7137 0114 0023     		moveq	r3, #0
 7138              	.L540:
 7139              	.LVL700:
3052:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir+32, pcl);
 7140              		.loc 1 3052 0
 7141 0116 180C     		lsrs	r0, r3, #16
 7142 0118 84F86E30 		strb	r3, [r4, #110]
 7143 011c C3F3072C 		ubfx	ip, r3, #8, #8
 7144 0120 030A     		lsrs	r3, r0, #8
 7145              	.LVL701:
 7146 0122 84F86FC0 		strb	ip, [r4, #111]
 7147 0126 84F86800 		strb	r0, [r4, #104]
 7148 012a 84F86930 		strb	r3, [r4, #105]
3053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7149              		.loc 1 3053 0
 7150 012e 9478     		ldrb	r4, [r2, #2]	@ zero_extendqisi2
 7151              	.LVL702:
 7152 0130 11E0     		b	.L541
 7153              	.LVL703:
 7154              	.L543:
3054:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 7155              		.loc 1 3054 0
 7156 0132 0498     		ldr	r0, [sp, #16]
3055:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->wflag = 1;
 7157              		.loc 1 3055 0
 7158 0134 0121     		movs	r1, #1
 7159 0136 0171     		strb	r1, [r0, #4]
3054:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 7160              		.loc 1 3054 0
 7161 0138 0763     		str	r7, [r0, #48]
 7162              	.LVL704:
3056:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = move_window(dj.fs, 0);
 7163              		.loc 1 3056 0
 7164 013a 0021     		movs	r1, #0
 7165 013c 2D4A     		ldr	r2, .L556+20
 7166 013e 9047     		blx	r2
 7167 0140 0146     		mov	r1, r0
 7168 0142 8046     		mov	r8, r0
 7169              	.LVL705:
3057:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res != FR_OK) break;
 7170              		.loc 1 3057 0
 7171 0144 70B9     		cbnz	r0, .L546
3058:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					mem_set(dir, 0, SS(dj.fs));
 7172              		.loc 1 3058 0
 7173 0146 3046     		mov	r0, r6
 7174              	.LVL706:
 7175 0148 4FF40072 		mov	r2, #512
 7176 014c 2A4B     		ldr	r3, .L556+24
 7177 014e 9847     		blx	r3
 7178              	.LVL707:
3053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7179              		.loc 1 3053 0
 7180 0150 013C     		subs	r4, r4, #1
 7181              	.LVL708:
3054:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					dj.fs->winsect = dsc++;
 7182              		.loc 1 3054 0
 7183 0152 0137     		adds	r7, r7, #1
 7184              	.LVL709:
3053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7185              		.loc 1 3053 0
 7186 0154 E4B2     		uxtb	r4, r4
 7187              	.LVL710:
 7188              	.L541:
3053:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				for (n = dj.fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 7189              		.loc 1 3053 0 is_stmt 0 discriminator 1
 7190 0156 002C     		cmp	r4, #0
 7191 0158 EBD1     		bne	.L543
3061:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) res = dir_register(&dj);	/* Register the object to the directoy */
 7192              		.loc 1 3061 0 is_stmt 1 discriminator 1
 7193 015a 04A8     		add	r0, sp, #16
 7194 015c 274A     		ldr	r2, .L556+28
 7195 015e 9047     		blx	r2
 7196 0160 8046     		mov	r8, r0
 7197              	.LVL711:
3062:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res != FR_OK) {
 7198              		.loc 1 3062 0 discriminator 1
 7199 0162 20B1     		cbz	r0, .L544
 7200              	.LVL712:
 7201              	.L546:
3063:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				remove_chain(dj.fs, dcl);			/* Could not register, remove cluster chain */
 7202              		.loc 1 3063 0
 7203 0164 0498     		ldr	r0, [sp, #16]
 7204 0166 2946     		mov	r1, r5
 7205 0168 254B     		ldr	r3, .L556+32
 7206 016a 9847     		blx	r3
 7207 016c 1EE0     		b	.L535
 7208              	.LVL713:
 7209              	.L544:
3065:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir = dj.dir;
 7210              		.loc 1 3065 0
 7211 016e 0998     		ldr	r0, [sp, #36]
 7212              	.LVL714:
3067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 7213              		.loc 1 3067 0
 7214 0170 0099     		ldr	r1, [sp, #0]
3068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 7215              		.loc 1 3068 0
 7216 0172 9DF80A80 		ldrb	r8, [sp, #10]	@ zero_extendqisi2
 7217              	.LVL715:
3067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 7218              		.loc 1 3067 0
 7219 0176 9DF809C0 		ldrb	ip, [sp, #9]	@ zero_extendqisi2
 7220 017a 019B     		ldr	r3, [sp, #4]
3068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 7221              		.loc 1 3068 0
 7222 017c 9DF80BE0 		ldrb	lr, [sp, #11]	@ zero_extendqisi2
3066:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = AM_DIR;				/* Attribute */
 7223              		.loc 1 3066 0
 7224 0180 1022     		movs	r2, #16
 7225 0182 C272     		strb	r2, [r0, #11]
3067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 7226              		.loc 1 3067 0
 7227 0184 8175     		strb	r1, [r0, #22]
3068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 7228              		.loc 1 3068 0
 7229 0186 80F81B80 		strb	r8, [r0, #27]
3067:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_DWORD(dir+DIR_WrtTime, tim);		/* Created time */
 7230              		.loc 1 3067 0
 7231 018a 80F817C0 		strb	ip, [r0, #23]
 7232 018e 0376     		strb	r3, [r0, #24]
 7233 0190 80F81990 		strb	r9, [r0, #25]
3068:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_CLUST(dir, dcl);					/* Table start cluster */
 7234              		.loc 1 3068 0
 7235 0194 80F81AA0 		strb	sl, [r0, #26]
 7236 0198 80F814B0 		strb	fp, [r0, #20]
 7237 019c 80F815E0 		strb	lr, [r0, #21]
3069:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7238              		.loc 1 3069 0
 7239 01a0 0498     		ldr	r0, [sp, #16]
 7240 01a2 0122     		movs	r2, #1
 7241 01a4 0271     		strb	r2, [r0, #4]
3070:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
 7242              		.loc 1 3070 0
 7243 01a6 1749     		ldr	r1, .L556+36
 7244 01a8 8847     		blx	r1
 7245              	.LVL716:
 7246 01aa 8046     		mov	r8, r0
 7247              	.LVL717:
 7248              	.L535:
3077:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 7249              		.loc 1 3077 0
 7250 01ac 4046     		mov	r0, r8
 7251 01ae 0FB0     		add	sp, sp, #60
 7252 01b0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 7253              	.LVL718:
 7254              	.L554:
3032:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dcl = create_chain(dj.fs, 0);		/* Allocate a cluster for the new directory table */
 7255              		.loc 1 3032 0
 7256 01b4 144D     		ldr	r5, .L556+40
 7257 01b6 0498     		ldr	r0, [sp, #16]
 7258 01b8 2146     		mov	r1, r4
 7259 01ba A847     		blx	r5
 7260 01bc 0546     		mov	r5, r0
 7261              	.LVL719:
3034:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 7262              		.loc 1 3034 0
 7263 01be 0028     		cmp	r0, #0
 7264 01c0 7FF448AF 		bne	.L545
 7265 01c4 4FF00708 		mov	r8, #7
 7266 01c8 CCE7     		b	.L546
 7267              	.L555:
3038:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = move_window(dj.fs, 0);
 7268              		.loc 1 3038 0
 7269 01ca 0498     		ldr	r0, [sp, #16]
 7270              	.LVL720:
 7271 01cc 2146     		mov	r1, r4
 7272 01ce 094B     		ldr	r3, .L556+20
 7273 01d0 9847     		blx	r3
 7274 01d2 8246     		mov	sl, r0
 7275 01d4 8046     		mov	r8, r0
 7276              	.LVL721:
3039:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (res == FR_OK) {					/* Initialize the new directory table */
 7277              		.loc 1 3039 0
 7278 01d6 0028     		cmp	r0, #0
 7279 01d8 3FF448AF 		beq	.L547
 7280 01dc C2E7     		b	.L546
 7281              	.L557:
 7282 01de 00BF     		.align	2
 7283              	.L556:
 7284 01e0 00000000 		.word	get_fattime
 7285 01e4 00000000 		.word	chk_mounted
 7286 01e8 00000000 		.word	follow_path
 7287 01ec 00000000 		.word	clust2sect
 7288 01f0 00000000 		.word	mem_cpy
 7289 01f4 00000000 		.word	move_window
 7290 01f8 00000000 		.word	mem_set
 7291 01fc 00000000 		.word	dir_register
 7292 0200 00000000 		.word	remove_chain
 7293 0204 00000000 		.word	sync
 7294 0208 00000000 		.word	create_chain
 7295              		.cfi_endproc
 7296              	.LFE39:
 7298              		.section	.text.f_chmod,"ax",%progbits
 7299              		.align	1
 7300              		.global	f_chmod
 7301              		.thumb
 7302              		.thumb_func
 7304              	f_chmod:
 7305              	.LFB40:
3091:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 7306              		.loc 1 3091 0
 7307              		.cfi_startproc
 7308              		@ args = 0, pretend = 0, frame = 48
 7309              		@ frame_needed = 0, uses_anonymous_args = 0
 7310              	.LVL722:
 7311 0000 30B5     		push	{r4, r5, lr}
 7312              	.LCFI40:
 7313              		.cfi_def_cfa_offset 12
 7314              		.cfi_offset 14, -4
 7315              		.cfi_offset 5, -8
 7316              		.cfi_offset 4, -12
 7317 0002 8DB0     		sub	sp, sp, #52
 7318              	.LCFI41:
 7319              		.cfi_def_cfa_offset 64
3091:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 7320              		.loc 1 3091 0
 7321 0004 0DF1300C 		add	ip, sp, #48
 7322 0008 4CF82C0D 		str	r0, [ip, #-44]!
 7323 000c 0C46     		mov	r4, r1
 7324 000e 1546     		mov	r5, r2
3098:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 7325              		.loc 1 3098 0
 7326 0010 6046     		mov	r0, ip
 7327              	.LVL723:
 7328 0012 02A9     		add	r1, sp, #8
 7329              	.LVL724:
 7330 0014 0122     		movs	r2, #1
 7331              	.LVL725:
 7332 0016 134B     		ldr	r3, .L565
 7333 0018 9847     		blx	r3
 7334              	.LVL726:
3099:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 7335              		.loc 1 3099 0
 7336 001a E0B9     		cbnz	r0, .L559
3100:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 7337              		.loc 1 3100 0
 7338 001c 09A8     		add	r0, sp, #36
 7339              	.LVL727:
 7340 001e 0890     		str	r0, [sp, #32]
3101:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 7341              		.loc 1 3101 0
 7342 0020 0199     		ldr	r1, [sp, #4]
 7343 0022 02A8     		add	r0, sp, #8
 7344 0024 104A     		ldr	r2, .L565+4
 7345 0026 9047     		blx	r2
 7346              	.LVL728:
3103:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 7347              		.loc 1 3103 0
 7348 0028 A8B9     		cbnz	r0, .L559
3103:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 7349              		.loc 1 3103 0 is_stmt 0 discriminator 1
 7350 002a 089B     		ldr	r3, [sp, #32]
 7351 002c D97A     		ldrb	r1, [r3, #11]	@ zero_extendqisi2
 7352 002e 8906     		lsls	r1, r1, #26
 7353 0030 13D5     		bpl	.L561
 7354 0032 0FE0     		b	.L563
 7355              	.LVL729:
 7356              	.L564:
3111:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 7357              		.loc 1 3111 0 is_stmt 1
 7358 0034 D87A     		ldrb	r0, [r3, #11]	@ zero_extendqisi2
3110:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
 7359              		.loc 1 3110 0
 7360 0036 05F0270C 		and	ip, r5, #39
 7361              	.LVL730:
3111:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 7362              		.loc 1 3111 0
 7363 003a 20EA0C0E 		bic	lr, r0, ip
 7364 003e 0CEA0405 		and	r5, ip, r4
3112:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7365              		.loc 1 3112 0
 7366 0042 0298     		ldr	r0, [sp, #8]
3111:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 7367              		.loc 1 3111 0
 7368 0044 4EEA0505 		orr	r5, lr, r5
3112:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7369              		.loc 1 3112 0
 7370 0048 0121     		movs	r1, #1
3111:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dir[DIR_Attr] = (value & mask) | (dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change */
 7371              		.loc 1 3111 0
 7372 004a DD72     		strb	r5, [r3, #11]
3113:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
 7373              		.loc 1 3113 0
 7374 004c 074A     		ldr	r2, .L565+8
3112:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7375              		.loc 1 3112 0
 7376 004e 0171     		strb	r1, [r0, #4]
3113:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
 7377              		.loc 1 3113 0
 7378 0050 9047     		blx	r2
 7379              	.LVL731:
 7380 0052 00E0     		b	.L559
 7381              	.LVL732:
 7382              	.L563:
3108:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
 7383              		.loc 1 3108 0
 7384 0054 0620     		movs	r0, #6
 7385              	.L559:
 7386              	.LVL733:
3119:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 7387              		.loc 1 3119 0
 7388 0056 0DB0     		add	sp, sp, #52
 7389 0058 30BD     		pop	{r4, r5, pc}
 7390              	.L561:
 7391              	.LVL734:
3106:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;
 7392              		.loc 1 3106 0
 7393 005a 079B     		ldr	r3, [sp, #28]
 7394              	.LVL735:
3107:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dir) {						/* Is it a root directory? */
 7395              		.loc 1 3107 0
 7396 005c 002B     		cmp	r3, #0
 7397 005e E9D1     		bne	.L564
 7398 0060 F8E7     		b	.L563
 7399              	.L566:
 7400 0062 00BF     		.align	2
 7401              	.L565:
 7402 0064 00000000 		.word	chk_mounted
 7403 0068 00000000 		.word	follow_path
 7404 006c 00000000 		.word	sync
 7405              		.cfi_endproc
 7406              	.LFE40:
 7408              		.section	.text.f_utime,"ax",%progbits
 7409              		.align	1
 7410              		.global	f_utime
 7411              		.thumb
 7412              		.thumb_func
 7414              	f_utime:
 7415              	.LFB41:
3132:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 7416              		.loc 1 3132 0
 7417              		.cfi_startproc
 7418              		@ args = 0, pretend = 0, frame = 48
 7419              		@ frame_needed = 0, uses_anonymous_args = 0
 7420              	.LVL736:
 7421 0000 10B5     		push	{r4, lr}
 7422              	.LCFI42:
 7423              		.cfi_def_cfa_offset 8
 7424              		.cfi_offset 14, -4
 7425              		.cfi_offset 4, -8
 7426 0002 8CB0     		sub	sp, sp, #48
 7427              	.LCFI43:
 7428              		.cfi_def_cfa_offset 56
3132:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 7429              		.loc 1 3132 0
 7430 0004 0CAA     		add	r2, sp, #48
 7431 0006 42F82C0D 		str	r0, [r2, #-44]!
 7432 000a 0C46     		mov	r4, r1
3139:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path, &dj.fs, 1);
 7433              		.loc 1 3139 0
 7434 000c 1046     		mov	r0, r2
 7435              	.LVL737:
 7436 000e 02A9     		add	r1, sp, #8
 7437              	.LVL738:
 7438 0010 0122     		movs	r2, #1
 7439 0012 154B     		ldr	r3, .L574
 7440 0014 9847     		blx	r3
 7441              	.LVL739:
3140:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 7442              		.loc 1 3140 0
 7443 0016 00BB     		cbnz	r0, .L568
3141:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(dj);
 7444              		.loc 1 3141 0
 7445 0018 09A8     		add	r0, sp, #36
 7446              	.LVL740:
 7447 001a 0890     		str	r0, [sp, #32]
3142:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 7448              		.loc 1 3142 0
 7449 001c 0199     		ldr	r1, [sp, #4]
 7450 001e 02A8     		add	r0, sp, #8
 7451 0020 124B     		ldr	r3, .L574+4
 7452 0022 9847     		blx	r3
 7453              	.LVL741:
3144:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 7454              		.loc 1 3144 0
 7455 0024 C8B9     		cbnz	r0, .L568
3144:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (dj.fn[NS] & NS_DOT))
 7456              		.loc 1 3144 0 is_stmt 0 discriminator 1
 7457 0026 089A     		ldr	r2, [sp, #32]
 7458 0028 D17A     		ldrb	r1, [r2, #11]	@ zero_extendqisi2
 7459 002a 8806     		lsls	r0, r1, #26
 7460              	.LVL742:
 7461 002c 17D5     		bpl	.L570
 7462 002e 13E0     		b	.L572
 7463              	.LVL743:
 7464              	.L573:
3151:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtTime, fno->ftime);
 7465              		.loc 1 3151 0 is_stmt 1
 7466 0030 B4F806E0 		ldrh	lr, [r4, #6]
 7467 0034 83F816E0 		strb	lr, [r3, #22]
 7468 0038 E088     		ldrh	r0, [r4, #6]
 7469 003a 010A     		lsrs	r1, r0, #8
 7470 003c D975     		strb	r1, [r3, #23]
3152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 7471              		.loc 1 3152 0
 7472 003e B4F804C0 		ldrh	ip, [r4, #4]
3153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7473              		.loc 1 3153 0
 7474 0042 0121     		movs	r1, #1
3152:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				ST_WORD(dir+DIR_WrtDate, fno->fdate);
 7475              		.loc 1 3152 0
 7476 0044 83F818C0 		strb	ip, [r3, #24]
 7477 0048 A288     		ldrh	r2, [r4, #4]
 7478 004a 100A     		lsrs	r0, r2, #8
 7479 004c 5876     		strb	r0, [r3, #25]
3153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7480              		.loc 1 3153 0
 7481 004e 0298     		ldr	r0, [sp, #8]
3154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
 7482              		.loc 1 3154 0
 7483 0050 074B     		ldr	r3, .L574+8
 7484              	.LVL744:
3153:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				dj.fs->wflag = 1;
 7485              		.loc 1 3153 0
 7486 0052 0171     		strb	r1, [r0, #4]
3154:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = sync(dj.fs);
 7487              		.loc 1 3154 0
 7488 0054 9847     		blx	r3
 7489              	.LVL745:
 7490 0056 00E0     		b	.L568
 7491              	.LVL746:
 7492              	.L572:
3149:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_INVALID_NAME;
 7493              		.loc 1 3149 0
 7494 0058 0620     		movs	r0, #6
 7495              	.L568:
 7496              	.LVL747:
3160:../../../SDK_embedded/libs/fatfs/src/ff.c **** }
 7497              		.loc 1 3160 0
 7498 005a 0CB0     		add	sp, sp, #48
 7499 005c 10BD     		pop	{r4, pc}
 7500              	.LVL748:
 7501              	.L570:
3147:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			dir = dj.dir;
 7502              		.loc 1 3147 0
 7503 005e 079B     		ldr	r3, [sp, #28]
 7504              	.LVL749:
3148:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!dir) {					/* Root directory */
 7505              		.loc 1 3148 0
 7506 0060 002B     		cmp	r3, #0
 7507 0062 E5D1     		bne	.L573
 7508 0064 F8E7     		b	.L572
 7509              	.L575:
 7510 0066 00BF     		.align	2
 7511              	.L574:
 7512 0068 00000000 		.word	chk_mounted
 7513 006c 00000000 		.word	follow_path
 7514 0070 00000000 		.word	sync
 7515              		.cfi_endproc
 7516              	.LFE41:
 7518              		.section	.text.f_rename,"ax",%progbits
 7519              		.align	1
 7520              		.global	f_rename
 7521              		.thumb
 7522              		.thumb_func
 7524              	f_rename:
 7525              	.LFB42:
3173:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 7526              		.loc 1 3173 0
 7527              		.cfi_startproc
 7528              		@ args = 0, pretend = 0, frame = 104
 7529              		@ frame_needed = 0, uses_anonymous_args = 0
 7530              	.LVL750:
 7531 0000 70B5     		push	{r4, r5, r6, lr}
 7532              	.LCFI44:
 7533              		.cfi_def_cfa_offset 16
 7534              		.cfi_offset 14, -4
 7535              		.cfi_offset 6, -8
 7536              		.cfi_offset 5, -12
 7537              		.cfi_offset 4, -16
 7538 0002 9AB0     		sub	sp, sp, #104
 7539              	.LCFI45:
 7540              		.cfi_def_cfa_offset 120
3173:../../../SDK_embedded/libs/fatfs/src/ff.c **** {
 7541              		.loc 1 3173 0
 7542 0004 1AAA     		add	r2, sp, #104
 7543 0006 42F8640D 		str	r0, [r2, #-100]!
 7544 000a 0E46     		mov	r6, r1
3181:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	res = chk_mounted(&path_old, &djo.fs, 1);
 7545              		.loc 1 3181 0
 7546 000c 1046     		mov	r0, r2
 7547              	.LVL751:
 7548 000e 03A9     		add	r1, sp, #12
 7549              	.LVL752:
 7550 0010 0122     		movs	r2, #1
 7551 0012 454B     		ldr	r3, .L592
 7552 0014 9847     		blx	r3
 7553              	.LVL753:
3182:../../../SDK_embedded/libs/fatfs/src/ff.c **** 	if (res == FR_OK) {
 7554              		.loc 1 3182 0
 7555 0016 0028     		cmp	r0, #0
 7556 0018 7FD1     		bne	.L577
3183:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		djn.fs = djo.fs;
 7557              		.loc 1 3183 0
 7558 001a 0399     		ldr	r1, [sp, #12]
3184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(djo);
 7559              		.loc 1 3184 0
 7560 001c 17A8     		add	r0, sp, #92
 7561              	.LVL754:
3183:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		djn.fs = djo.fs;
 7562              		.loc 1 3183 0
 7563 001e 0A91     		str	r1, [sp, #40]
3184:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		INIT_BUF(djo);
 7564              		.loc 1 3184 0
 7565 0020 0990     		str	r0, [sp, #36]
3185:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 7566              		.loc 1 3185 0
 7567 0022 0199     		ldr	r1, [sp, #4]
 7568 0024 03A8     		add	r0, sp, #12
 7569 0026 414C     		ldr	r4, .L592+4
 7570 0028 A047     		blx	r4
 7571              	.LVL755:
3186:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
 7572              		.loc 1 3186 0
 7573 002a 0028     		cmp	r0, #0
 7574 002c 75D1     		bne	.L577
3186:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
 7575              		.loc 1 3186 0 is_stmt 0 discriminator 1
 7576 002e 099B     		ldr	r3, [sp, #36]
3187:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			res = FR_INVALID_NAME;
 7577              		.loc 1 3187 0 is_stmt 1 discriminator 1
 7578 0030 0620     		movs	r0, #6
 7579              	.LVL756:
3186:../../../SDK_embedded/libs/fatfs/src/ff.c **** 		if (_FS_RPATH && res == FR_OK && (djo.fn[NS] & NS_DOT))
 7580              		.loc 1 3186 0 discriminator 1
 7581 0032 93F80BC0 		ldrb	ip, [r3, #11]	@ zero_extendqisi2
 7582 0036 5FEA8C62 		lsls	r2, ip, #26
 7583 003a 6ED4     		bmi	.L577
 7584 003c 6FE0     		b	.L590
 7585              	.LVL757:
 7586              	.L589:
3195:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(buf, djo.dir+DIR_Attr, 21);		/* Save the object information except for name */
 7587              		.loc 1 3195 0
 7588 003e 0B31     		adds	r1, r1, #11
 7589 0040 11A8     		add	r0, sp, #68
 7590 0042 1522     		movs	r2, #21
 7591 0044 3A4D     		ldr	r5, .L592+8
 7592 0046 A847     		blx	r5
3196:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				mem_cpy(&djn, &djo, sizeof(DIR));		/* Check new object */
 7593              		.loc 1 3196 0
 7594 0048 0AA8     		add	r0, sp, #40
 7595 004a 03A9     		add	r1, sp, #12
 7596 004c 1C22     		movs	r2, #28
 7597 004e A847     		blx	r5
3197:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = follow_path(&djn, path_new);
 7598              		.loc 1 3197 0
 7599 0050 0AA8     		add	r0, sp, #40
 7600 0052 3146     		mov	r1, r6
 7601 0054 A047     		blx	r4
 7602              	.LVL758:
3198:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 7603              		.loc 1 3198 0
 7604 0056 0028     		cmp	r0, #0
 7605 0058 5CD0     		beq	.L585
3199:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_NO_FILE) { 				/* Is it a valid path and no name collision? */
 7606              		.loc 1 3199 0
 7607 005a 0428     		cmp	r0, #4
 7608 005c 5DD1     		bne	.L577
3201:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 7609              		.loc 1 3201 0
 7610 005e 0AA8     		add	r0, sp, #40
 7611              	.LVL759:
 7612 0060 344A     		ldr	r2, .L592+12
 7613 0062 9047     		blx	r2
 7614              	.LVL760:
3202:../../../SDK_embedded/libs/fatfs/src/ff.c **** 					if (res == FR_OK) {
 7615              		.loc 1 3202 0
 7616 0064 0028     		cmp	r0, #0
 7617 0066 58D1     		bne	.L577
3203:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dir = djn.dir;					/* Copy object information except for name */
 7618              		.loc 1 3203 0
 7619 0068 0F9C     		ldr	r4, [sp, #60]
 7620              	.LVL761:
3204:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						mem_cpy(dir+13, buf+2, 19);
 7621              		.loc 1 3204 0
 7622 006a 1322     		movs	r2, #19
 7623 006c 04F10D00 		add	r0, r4, #13
 7624              	.LVL762:
 7625 0070 0DF14601 		add	r1, sp, #70
 7626 0074 A847     		blx	r5
 7627              	.LVL763:
3205:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 7628              		.loc 1 3205 0
 7629 0076 9DF84400 		ldrb	r0, [sp, #68]	@ zero_extendqisi2
3206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						djo.fs->wflag = 1;
 7630              		.loc 1 3206 0
 7631 007a 039B     		ldr	r3, [sp, #12]
3205:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 7632              		.loc 1 3205 0
 7633 007c 40F0200C 		orr	ip, r0, #32
3206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						djo.fs->wflag = 1;
 7634              		.loc 1 3206 0
 7635 0080 0122     		movs	r2, #1
3205:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						dir[DIR_Attr] = buf[0] | AM_ARC;
 7636              		.loc 1 3205 0
 7637 0082 84F80BC0 		strb	ip, [r4, #11]
3206:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						djo.fs->wflag = 1;
 7638              		.loc 1 3206 0
 7639 0086 1A71     		strb	r2, [r3, #4]
3207:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 7640              		.loc 1 3207 0
 7641 0088 0C99     		ldr	r1, [sp, #48]
 7642 008a 0598     		ldr	r0, [sp, #20]
 7643 008c 8842     		cmp	r0, r1
 7644 008e 39D0     		beq	.L580
3207:../../../SDK_embedded/libs/fatfs/src/ff.c **** 						if (djo.sclust != djn.sclust && (dir[DIR_Attr] & AM_DIR)) {		/* Update .. entry in the direct
 7645              		.loc 1 3207 0 is_stmt 0 discriminator 1
 7646 0090 94F80BE0 		ldrb	lr, [r4, #11]	@ zero_extendqisi2
 7647 0094 5FEACE63 		lsls	r3, lr, #27
 7648 0098 34D5     		bpl	.L580
3208:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							dw = clust2sect(djn.fs, LD_CLUST(dir));
 7649              		.loc 1 3208 0 is_stmt 1
 7650 009a 94F815E0 		ldrb	lr, [r4, #21]	@ zero_extendqisi2
 7651 009e 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 7652 00a0 E07E     		ldrb	r0, [r4, #27]	@ zero_extendqisi2
 7653 00a2 94F81AC0 		ldrb	ip, [r4, #26]	@ zero_extendqisi2
 7654 00a6 0A9D     		ldr	r5, [sp, #40]
 7655 00a8 42EA0E21 		orr	r1, r2, lr, lsl #8
 7656 00ac 4CEA0023 		orr	r3, ip, r0, lsl #8
 7657 00b0 43EA0141 		orr	r1, r3, r1, lsl #16
 7658 00b4 2846     		mov	r0, r5
 7659 00b6 204A     		ldr	r2, .L592+16
 7660 00b8 9047     		blx	r2
 7661 00ba 0146     		mov	r1, r0
 7662              	.LVL764:
3210:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								res = FR_INT_ERR;
 7663              		.loc 1 3210 0
 7664 00bc 0220     		movs	r0, #2
 7665              	.LVL765:
3209:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							if (!dw) {
 7666              		.loc 1 3209 0
 7667 00be 0029     		cmp	r1, #0
 7668 00c0 2BD0     		beq	.L577
3212:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								res = move_window(djn.fs, dw);
 7669              		.loc 1 3212 0
 7670 00c2 1E4B     		ldr	r3, .L592+20
 7671 00c4 2846     		mov	r0, r5
 7672 00c6 9847     		blx	r3
 7673              	.LVL766:
3213:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								dir = djn.fs->win+32;	/* .. entry */
 7674              		.loc 1 3213 0
 7675 00c8 0A9B     		ldr	r3, [sp, #40]
 7676              	.LVL767:
3214:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 7677              		.loc 1 3214 0
 7678 00ca 30BB     		cbnz	r0, .L577
3214:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 7679              		.loc 1 3214 0 is_stmt 0 discriminator 1
 7680 00cc 93F85510 		ldrb	r1, [r3, #85]	@ zero_extendqisi2
 7681 00d0 2E29     		cmp	r1, #46
 7682 00d2 17D1     		bne	.L580
3215:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 7683              		.loc 1 3215 0 is_stmt 1
 7684 00d4 93F800C0 		ldrb	ip, [r3, #0]	@ zero_extendqisi2
 7685 00d8 BCF1030F 		cmp	ip, #3
 7686 00dc 03D1     		bne	.L582
3215:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 7687              		.loc 1 3215 0 is_stmt 0 discriminator 2
 7688 00de 9A6A     		ldr	r2, [r3, #40]
 7689 00e0 0C99     		ldr	r1, [sp, #48]
 7690 00e2 9142     		cmp	r1, r2
 7691 00e4 00D0     		beq	.L583
 7692              	.L582:
3215:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									dw = (djn.fs->fs_type == FS_FAT32 && djn.sclust == djn.fs->dirbase) ? 0 : djn.sclust;
 7693              		.loc 1 3215 0 discriminator 1
 7694 00e6 0C98     		ldr	r0, [sp, #48]
 7695              	.LVL768:
 7696              	.L583:
3216:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									ST_CLUST(dir, dw);
 7697              		.loc 1 3216 0 is_stmt 1 discriminator 4
 7698 00e8 020C     		lsrs	r2, r0, #16
 7699 00ea C0F3072E 		ubfx	lr, r0, #8, #8
 7700 00ee 83F86E00 		strb	r0, [r3, #110]
 7701 00f2 110A     		lsrs	r1, r2, #8
3217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									djn.fs->wflag = 1;
 7702              		.loc 1 3217 0 discriminator 4
 7703 00f4 0120     		movs	r0, #1
 7704              	.LVL769:
3216:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									ST_CLUST(dir, dw);
 7705              		.loc 1 3216 0 discriminator 4
 7706 00f6 83F86FE0 		strb	lr, [r3, #111]
 7707 00fa 83F86820 		strb	r2, [r3, #104]
 7708 00fe 83F86910 		strb	r1, [r3, #105]
3217:../../../SDK_embedded/libs/fatfs/src/ff.c **** 									djn.fs->wflag = 1;
 7709              		.loc 1 3217 0 discriminator 4
 7710 0102 1871     		strb	r0, [r3, #4]
 7711              	.LVL770:
 7712              	.L580:
3222:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							res = dir_remove(&djo);		/* Remove old entry */
 7713              		.loc 1 3222 0
 7714 0104 03A8     		add	r0, sp, #12
 7715 0106 0E4B     		ldr	r3, .L592+24
 7716 0108 9847     		blx	r3
 7717              	.LVL771:
3223:../../../SDK_embedded/libs/fatfs/src/ff.c **** 							if (res == FR_OK)
 7718              		.loc 1 3223 0
 7719 010a 30B9     		cbnz	r0, .L577
3224:../../../SDK_embedded/libs/fatfs/src/ff.c **** 								res = sync(djo.fs);
 7720              		.loc 1 3224 0
 7721 010c 0398     		ldr	r0, [sp, #12]
 7722              	.LVL772:
 7723 010e 0D49     		ldr	r1, .L592+28
 7724 0110 8847     		blx	r1
 7725              	.LVL773:
 7726 0112 02E0     		b	.L577
 7727              	.L585:
3198:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				if (res == FR_OK) res = FR_EXIST;		/* The new object name is already existing */
 7728              		.loc 1 3198 0
 7729 0114 0820     		movs	r0, #8
 7730              	.LVL774:
 7731 0116 00E0     		b	.L577
 7732              	.LVL775:
 7733              	.L591:
3193:../../../SDK_embedded/libs/fatfs/src/ff.c **** 				res = FR_NO_FILE;
 7734              		.loc 1 3193 0
 7735 0118 0420     		movs	r0, #4
 7736              	.LVL776:
 7737              	.L577:
 7738              		.loc 1 3234 0
 7739 011a 1AB0     		add	sp, sp, #104
 7740 011c 70BD     		pop	{r4, r5, r6, pc}
 7741              	.LVL777:
 7742              	.L590:
3192:../../../SDK_embedded/libs/fatfs/src/ff.c **** 			if (!djo.dir) {						/* Is root dir? */
 7743              		.loc 1 3192 0
 7744 011e 0899     		ldr	r1, [sp, #32]
 7745 0120 0029     		cmp	r1, #0
 7746 0122 8CD1     		bne	.L589
 7747 0124 F8E7     		b	.L591
 7748              	.L593:
 7749 0126 00BF     		.align	2
 7750              	.L592:
 7751 0128 00000000 		.word	chk_mounted
 7752 012c 00000000 		.word	follow_path
 7753 0130 00000000 		.word	mem_cpy
 7754 0134 00000000 		.word	dir_register
 7755 0138 00000000 		.word	clust2sect
 7756 013c 00000000 		.word	move_window
 7757 0140 00000000 		.word	dir_remove
 7758 0144 00000000 		.word	sync
 7759              		.cfi_endproc
 7760              	.LFE42:
 7762              		.section	.bss.CurrVol,"aw",%nobits
 7763              		.set	.LANCHOR0,. + 0
 7766              	CurrVol:
 7767 0000 00       		.space	1
 7768              		.section	.rodata.str1.1,"aMS",%progbits,1
 7769              	.LC0:
 7770 0000 222A2B2C 		.ascii	"\"*+,:;<=>?[]|\177\000"
 7770      3A3B3C3D 
 7770      3E3F5B5D 
 7770      7C7F00
 7771              		.section	.bss.Fsid,"aw",%nobits
 7772              		.align	1
 7773              		.set	.LANCHOR2,. + 0
 7776              	Fsid:
 7777 0000 0000     		.space	2
 7778              		.section	.rodata.excvt.1593,"a",%progbits
 7779              		.set	.LANCHOR3,. + 0
 7782              	excvt.1593:
 7783 0000 80       		.byte	-128
 7784 0001 81       		.byte	-127
 7785 0002 82       		.byte	-126
 7786 0003 82       		.byte	-126
 7787 0004 84       		.byte	-124
 7788 0005 85       		.byte	-123
 7789 0006 86       		.byte	-122
 7790 0007 87       		.byte	-121
 7791 0008 88       		.byte	-120
 7792 0009 89       		.byte	-119
 7793 000a 8A       		.byte	-118
 7794 000b 8B       		.byte	-117
 7795 000c 8C       		.byte	-116
 7796 000d 8D       		.byte	-115
 7797 000e 8E       		.byte	-114
 7798 000f 8F       		.byte	-113
 7799 0010 80       		.byte	-128
 7800 0011 91       		.byte	-111
 7801 0012 92       		.byte	-110
 7802 0013 93       		.byte	-109
 7803 0014 94       		.byte	-108
 7804 0015 95       		.byte	-107
 7805 0016 96       		.byte	-106
 7806 0017 97       		.byte	-105
 7807 0018 98       		.byte	-104
 7808 0019 99       		.byte	-103
 7809 001a 8A       		.byte	-118
 7810 001b 9B       		.byte	-101
 7811 001c 8C       		.byte	-116
 7812 001d 8D       		.byte	-115
 7813 001e 8E       		.byte	-114
 7814 001f 8F       		.byte	-113
 7815 0020 A0       		.byte	-96
 7816 0021 A2       		.byte	-94
 7817 0022 A2       		.byte	-94
 7818 0023 A3       		.byte	-93
 7819 0024 A4       		.byte	-92
 7820 0025 A5       		.byte	-91
 7821 0026 A6       		.byte	-90
 7822 0027 A7       		.byte	-89
 7823 0028 A8       		.byte	-88
 7824 0029 A9       		.byte	-87
 7825 002a AA       		.byte	-86
 7826 002b AB       		.byte	-85
 7827 002c AC       		.byte	-84
 7828 002d AD       		.byte	-83
 7829 002e AE       		.byte	-82
 7830 002f AF       		.byte	-81
 7831 0030 B0       		.byte	-80
 7832 0031 B1       		.byte	-79
 7833 0032 B2       		.byte	-78
 7834 0033 B2       		.byte	-78
 7835 0034 A5       		.byte	-91
 7836 0035 B5       		.byte	-75
 7837 0036 B6       		.byte	-74
 7838 0037 B7       		.byte	-73
 7839 0038 A8       		.byte	-88
 7840 0039 B9       		.byte	-71
 7841 003a AA       		.byte	-86
 7842 003b BB       		.byte	-69
 7843 003c A3       		.byte	-93
 7844 003d BD       		.byte	-67
 7845 003e BD       		.byte	-67
 7846 003f AF       		.byte	-81
 7847 0040 C0       		.byte	-64
 7848 0041 C1       		.byte	-63
 7849 0042 C2       		.byte	-62
 7850 0043 C3       		.byte	-61
 7851 0044 C4       		.byte	-60
 7852 0045 C5       		.byte	-59
 7853 0046 C6       		.byte	-58
 7854 0047 C7       		.byte	-57
 7855 0048 C8       		.byte	-56
 7856 0049 C9       		.byte	-55
 7857 004a CA       		.byte	-54
 7858 004b CB       		.byte	-53
 7859 004c CC       		.byte	-52
 7860 004d CD       		.byte	-51
 7861 004e CE       		.byte	-50
 7862 004f CF       		.byte	-49
 7863 0050 D0       		.byte	-48
 7864 0051 D1       		.byte	-47
 7865 0052 D2       		.byte	-46
 7866 0053 D3       		.byte	-45
 7867 0054 D4       		.byte	-44
 7868 0055 D5       		.byte	-43
 7869 0056 D6       		.byte	-42
 7870 0057 D7       		.byte	-41
 7871 0058 D8       		.byte	-40
 7872 0059 D9       		.byte	-39
 7873 005a DA       		.byte	-38
 7874 005b DB       		.byte	-37
 7875 005c DC       		.byte	-36
 7876 005d DD       		.byte	-35
 7877 005e DE       		.byte	-34
 7878 005f DF       		.byte	-33
 7879 0060 C0       		.byte	-64
 7880 0061 C1       		.byte	-63
 7881 0062 C2       		.byte	-62
 7882 0063 C3       		.byte	-61
 7883 0064 C4       		.byte	-60
 7884 0065 C5       		.byte	-59
 7885 0066 C6       		.byte	-58
 7886 0067 C7       		.byte	-57
 7887 0068 C8       		.byte	-56
 7888 0069 C9       		.byte	-55
 7889 006a CA       		.byte	-54
 7890 006b CB       		.byte	-53
 7891 006c CC       		.byte	-52
 7892 006d CD       		.byte	-51
 7893 006e CE       		.byte	-50
 7894 006f CF       		.byte	-49
 7895 0070 D0       		.byte	-48
 7896 0071 D1       		.byte	-47
 7897 0072 D2       		.byte	-46
 7898 0073 D3       		.byte	-45
 7899 0074 D4       		.byte	-44
 7900 0075 D5       		.byte	-43
 7901 0076 D6       		.byte	-42
 7902 0077 D7       		.byte	-41
 7903 0078 D8       		.byte	-40
 7904 0079 D9       		.byte	-39
 7905 007a DA       		.byte	-38
 7906 007b DB       		.byte	-37
 7907 007c DC       		.byte	-36
 7908 007d DD       		.byte	-35
 7909 007e DE       		.byte	-34
 7910 007f DF       		.byte	-33
 7911              		.section	.bss.FatFs,"aw",%nobits
 7912              		.align	2
 7913              		.set	.LANCHOR1,. + 0
 7916              	FatFs:
 7917 0000 00000000 		.space	4
 7918              		.text
 7919              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1165   .text.mem_cpy:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1169   .text.mem_cpy:00000000 mem_cpy
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1200   .text.mem_set:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1204   .text.mem_set:00000000 mem_set
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1230   .text.get_fileinfo:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1234   .text.get_fileinfo:00000000 get_fileinfo
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1360   .text.move_window:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1364   .text.move_window:00000000 move_window
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1487   .text.move_window:00000080 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1493   .text.sync:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1497   .text.sync:00000000 sync
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1623   .text.sync:000000b8 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1631   .text.validate:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1635   .text.validate:00000000 validate
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1686   .text.validate:00000028 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1691   .text.check_fs:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1695   .text.check_fs:00000000 check_fs
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1778   .text.check_fs:00000084 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1785   .text.chk_mounted:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:1789   .text.chk_mounted:00000000 chk_mounted
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2272   .text.chk_mounted:00000310 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2285   .text.chk_mounted:00000338 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2309   .text.clust2sect:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2314   .text.clust2sect:00000000 clust2sect
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2344   .text.get_fat:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2349   .text.get_fat:00000000 get_fat
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2505   .text.get_fat:000000dc $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2510   .text.dir_sdi:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2514   .text.dir_sdi:00000000 dir_sdi
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2659   .text.dir_sdi:0000008c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2665   .text.dir_remove:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2669   .text.dir_remove:00000000 dir_remove
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2720   .text.dir_remove:00000024 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2726   .text.put_fat:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2731   .text.put_fat:00000000 put_fat
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2931   .text.put_fat:00000108 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2936   .text.create_chain:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:2940   .text.create_chain:00000000 create_chain
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3119   .text.create_chain:000000cc $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3125   .text.dir_next:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3129   .text.dir_next:00000000 dir_next
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3348   .text.dir_next:00000104 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3357   .text.follow_path:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3361   .text.follow_path:00000000 follow_path
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3817   .text.follow_path:00000260 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3827   .text.dir_register:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3831   .text.dir_register:00000000 dir_register
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3952   .text.dir_register:00000078 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3963   .text.dir_read:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:3967   .text.dir_read:00000000 dir_read
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4057   .text.dir_read:00000044 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4063   .text.remove_chain:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4067   .text.remove_chain:00000000 remove_chain
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4185   .text.remove_chain:0000006c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4191   .text.f_mount:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4196   .text.f_mount:00000000 f_mount
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4253   .text.f_mount:00000028 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4259   .text.f_open:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4264   .text.f_open:00000000 f_open
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4528   .text.f_open:00000140 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4538   .text.f_read:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4543   .text.f_read:00000000 f_read
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4821   .text.f_read:00000178 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4831   .text.f_write:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:4836   .text.f_write:00000000 f_write
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5152   .text.f_write:000001a0 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5162   .text.f_sync:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5167   .text.f_sync:00000000 f_sync
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5296   .text.f_sync:000000b0 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5305   .text.f_close:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5310   .text.f_close:00000000 f_close
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5339   .text.f_close:00000010 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5344   .text.f_chdrive:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5349   .text.f_chdrive:00000000 f_chdrive
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5373   .text.f_chdrive:0000000c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5378   .text.f_chdir:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5383   .text.f_chdir:00000000 f_chdir
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5463   .text.f_chdir:00000064 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5469   .text.f_getcwd:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5474   .text.f_getcwd:00000000 f_getcwd
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5754   .text.f_getcwd:0000014c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5764   .text.f_lseek:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:5769   .text.f_lseek:00000000 f_lseek
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6068   .text.f_lseek:0000015c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6078   .text.f_opendir:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6083   .text.f_opendir:00000000 f_opendir
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6175   .text.f_opendir:00000068 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6182   .text.f_readdir:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6187   .text.f_readdir:00000000 f_readdir
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6280   .text.f_readdir:00000054 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6289   .text.f_stat:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6294   .text.f_stat:00000000 f_stat
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6364   .text.f_stat:00000040 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6371   .text.f_getfree:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6376   .text.f_getfree:00000000 f_getfree
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6590   .text.f_getfree:000000f4 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6597   .text.f_truncate:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6602   .text.f_truncate:00000000 f_truncate
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6742   .text.f_truncate:00000094 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6750   .text.f_unlink:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6755   .text.f_unlink:00000000 f_unlink
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6932   .text.f_unlink:000000cc $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6944   .text.f_mkdir:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:6949   .text.f_mkdir:00000000 f_mkdir
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7284   .text.f_mkdir:000001e0 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7299   .text.f_chmod:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7304   .text.f_chmod:00000000 f_chmod
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7402   .text.f_chmod:00000064 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7409   .text.f_utime:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7414   .text.f_utime:00000000 f_utime
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7512   .text.f_utime:00000068 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7519   .text.f_rename:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7524   .text.f_rename:00000000 f_rename
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7751   .text.f_rename:00000128 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7766   .bss.CurrVol:00000000 CurrVol
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7767   .bss.CurrVol:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7772   .bss.Fsid:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7776   .bss.Fsid:00000000 Fsid
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7782   .rodata.excvt.1593:00000000 excvt.1593
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7912   .bss.FatFs:00000000 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccPSyPFJ.s:7916   .bss.FatFs:00000000 FatFs
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disk_read
disk_write
disk_ioctl
disk_status
disk_initialize
disk_deinitialize
get_fattime
