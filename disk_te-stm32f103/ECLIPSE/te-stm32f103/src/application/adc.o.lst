   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 18, 4
  12              		.thumb
  13              		.file	"adc.c"
  23              	.Ltext0:
 20169              		.align	1
 20170              		.global	adc_get_test_result
 20171              		.thumb
 20172              		.thumb_func
 20174              	adc_get_test_result:
 20175              	.LFB30:
   1:adc.c         **** #include <stdlib.h>
   2:adc.c         **** #include <math.h>
   3:adc.c         **** 
   4:adc.c         **** #include "appdefs.h"
   5:adc.c         **** #include "adc.h"
   6:adc.c         **** 
   7:adc.c         **** #define RESISTIVE_DIVADER_RATIO 0.33
   8:adc.c         **** //--------------------------------------------------------------------------------
   9:adc.c         **** AdcTestResult adc_test_result = { FAILED, 0.0};
  10:adc.c         **** uint16_t   ADCConvertedValue[256];
  11:adc.c         **** //--------------------------------------------------------------------------------
  12:adc.c         **** AdcTestResult* adc_get_test_result()
  13:adc.c         **** 	{
 20176              		.loc 1 13 0
 20177              		.cfi_startproc
 20178              		@ args = 0, pretend = 0, frame = 0
 20179              		@ frame_needed = 0, uses_anonymous_args = 0
 20180              		@ link register save eliminated.
  14:adc.c         **** 	 return &adc_test_result ;
  15:adc.c         ****     }
 20181              		.loc 1 15 0
 20182 0000 0048     		ldr	r0, .L2
 20183 0002 7047     		bx	lr
 20184              	.L3:
 20185              		.align	2
 20186              	.L2:
 20187 0004 00000000 		.word	.LANCHOR0
 20188              		.cfi_endproc
 20189              	.LFE30:
 20191              		.section	.text.adc_init,"ax",%progbits
 20192              		.align	1
 20193              		.global	adc_init
 20194              		.thumb
 20195              		.thumb_func
 20197              	adc_init:
 20198              	.LFB31:
  16:adc.c         **** //--------------------------------------------------------------------------------
  17:adc.c         **** void adc_init()
  18:adc.c         ****   {
 20199              		.loc 1 18 0
 20200              		.cfi_startproc
 20201              		@ args = 0, pretend = 0, frame = 72
 20202              		@ frame_needed = 0, uses_anonymous_args = 0
 20203 0000 30B5     		push	{r4, r5, lr}
 20204              	.LCFI0:
 20205              		.cfi_def_cfa_offset 12
 20206              		.cfi_offset 14, -4
 20207              		.cfi_offset 5, -8
 20208              		.cfi_offset 4, -12
  19:adc.c         ****     ADC_InitTypeDef ADC_InitStructure;
  20:adc.c         ****     DMA_InitTypeDef DMA_InitStructure;
  21:adc.c         ****     GPIO_InitTypeDef GPIO_InitStructure;
  22:adc.c         ****     // Установка PC.04 (ADC Channel14) как аналоговый вход
  23:adc.c         ****     GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;
 20209              		.loc 1 23 0
 20210 0002 1025     		movs	r5, #16
  18:adc.c         ****   {
 20211              		.loc 1 18 0
 20212 0004 93B0     		sub	sp, sp, #76
 20213              	.LCFI1:
 20214              		.cfi_def_cfa_offset 88
 20215              		.loc 1 23 0
 20216 0006 ADF84450 		strh	r5, [sp, #68]	@ movhi
  24:adc.c         ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AIN;
 20217              		.loc 1 24 0
 20218 000a 0025     		movs	r5, #0
 20219 000c 8DF84750 		strb	r5, [sp, #71]
  25:adc.c         ****     GPIO_Init(GPIOC, &GPIO_InitStructure);
 20220              		.loc 1 25 0
 20221 0010 2E48     		ldr	r0, .L9
 20222 0012 11A9     		add	r1, sp, #68
 20223 0014 2E4C     		ldr	r4, .L9+4
 20224 0016 A047     		blx	r4
  26:adc.c         **** 
  27:adc.c         ****     // включение тактирования модуля DMA1
  28:adc.c         ****     RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 20225              		.loc 1 28 0
 20226 0018 0120     		movs	r0, #1
 20227 001a 2E4B     		ldr	r3, .L9+8
 20228 001c 0146     		mov	r1, r0
 20229 001e 9847     		blx	r3
  29:adc.c         ****     // включение тактирования модуля ADC1 и GPIOC
  30:adc.c         ****     RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1 | RCC_APB2Periph_GPIOC, ENABLE);
 20230              		.loc 1 30 0
 20231 0020 0121     		movs	r1, #1
 20232 0022 2D4A     		ldr	r2, .L9+12
 20233 0024 4FF40470 		mov	r0, #528
 20234 0028 9047     		blx	r2
  31:adc.c         **** 
  32:adc.c         ****     /* конфигурация DMA1 channel1 ----------------------------------------------*/
  33:adc.c         ****     DMA_DeInit(DMA1_Channel1);
 20235              		.loc 1 33 0
 20236 002a 2C4C     		ldr	r4, .L9+16
 20237 002c 2C48     		ldr	r0, .L9+20
 20238 002e A047     		blx	r4
  34:adc.c         ****     DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(((ADC_TypeDef*)ADC1_BASE)->DR) ;
 20239              		.loc 1 34 0
 20240 0030 2C4B     		ldr	r3, .L9+24
  35:adc.c         ****     DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADCConvertedValue;
 20241              		.loc 1 35 0
 20242 0032 2D49     		ldr	r1, .L9+28
  36:adc.c         ****     DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
  37:adc.c         ****     DMA_InitStructure.DMA_BufferSize = 256 ;
 20243              		.loc 1 37 0
 20244 0034 4FF48074 		mov	r4, #256
  38:adc.c         ****     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
  39:adc.c         ****     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 20245              		.loc 1 39 0
 20246 0038 8022     		movs	r2, #128
  34:adc.c         ****     DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(((ADC_TypeDef*)ADC1_BASE)->DR) ;
 20247              		.loc 1 34 0
 20248 003a 0193     		str	r3, [sp, #4]
  35:adc.c         ****     DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t)ADCConvertedValue;
 20249              		.loc 1 35 0
 20250 003c 0291     		str	r1, [sp, #8]
  40:adc.c         ****     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
  41:adc.c         ****     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
  42:adc.c         ****     DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 20251              		.loc 1 42 0
 20252 003e 2023     		movs	r3, #32
  41:adc.c         ****     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 20253              		.loc 1 41 0
 20254 0040 4FF48060 		mov	r0, #1024
  43:adc.c         ****     DMA_InitStructure.DMA_Priority = DMA_Priority_High;
 20255              		.loc 1 43 0
 20256 0044 4FF40051 		mov	r1, #8192
  42:adc.c         ****     DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
 20257              		.loc 1 42 0
 20258 0048 0993     		str	r3, [sp, #36]
  36:adc.c         ****     DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 20259              		.loc 1 36 0
 20260 004a 0395     		str	r5, [sp, #12]
  37:adc.c         ****     DMA_InitStructure.DMA_BufferSize = 256 ;
 20261              		.loc 1 37 0
 20262 004c 0494     		str	r4, [sp, #16]
  38:adc.c         ****     DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 20263              		.loc 1 38 0
 20264 004e 0595     		str	r5, [sp, #20]
  39:adc.c         ****     DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 20265              		.loc 1 39 0
 20266 0050 0692     		str	r2, [sp, #24]
  40:adc.c         ****     DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;
 20267              		.loc 1 40 0
 20268 0052 0794     		str	r4, [sp, #28]
  41:adc.c         ****     DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;
 20269              		.loc 1 41 0
 20270 0054 0890     		str	r0, [sp, #32]
 20271              		.loc 1 43 0
 20272 0056 0A91     		str	r1, [sp, #40]
  44:adc.c         ****     DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 20273              		.loc 1 44 0
 20274 0058 0B95     		str	r5, [sp, #44]
  45:adc.c         ****     DMA_Init(DMA1_Channel1, &DMA_InitStructure);
 20275              		.loc 1 45 0
 20276 005a 2148     		ldr	r0, .L9+20
 20277 005c 01A9     		add	r1, sp, #4
 20278 005e 234C     		ldr	r4, .L9+32
 20279 0060 A047     		blx	r4
  46:adc.c         **** 
  47:adc.c         ****     // включение DMA1 channel1 */
  48:adc.c         ****     DMA_Cmd(DMA1_Channel1, ENABLE);
 20280              		.loc 1 48 0
 20281 0062 234A     		ldr	r2, .L9+36
 20282 0064 1E48     		ldr	r0, .L9+20
 20283 0066 0121     		movs	r1, #1
 20284 0068 9047     		blx	r2
  49:adc.c         **** 
  50:adc.c         ****     // конфигурация ADC1
  51:adc.c         ****     ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
  52:adc.c         ****     ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 20285              		.loc 1 52 0
 20286 006a 0124     		movs	r4, #1
  53:adc.c         ****     ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
  54:adc.c         ****     ADC_InitStructure.ADC_ExternalTrigConv = ADC_ExternalTrigConv_None;
 20287              		.loc 1 54 0
 20288 006c 4FF46020 		mov	r0, #917504
  51:adc.c         ****     ADC_InitStructure.ADC_Mode = ADC_Mode_Independent;
 20289              		.loc 1 51 0
 20290 0070 0C95     		str	r5, [sp, #48]
  52:adc.c         ****     ADC_InitStructure.ADC_ScanConvMode = ENABLE;
 20291              		.loc 1 52 0
 20292 0072 8DF83440 		strb	r4, [sp, #52]
  53:adc.c         ****     ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 20293              		.loc 1 53 0
 20294 0076 8DF83540 		strb	r4, [sp, #53]
 20295              		.loc 1 54 0
 20296 007a 0E90     		str	r0, [sp, #56]
  55:adc.c         ****     ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 20297              		.loc 1 55 0
 20298 007c 0F95     		str	r5, [sp, #60]
  56:adc.c         ****     ADC_InitStructure.ADC_NbrOfChannel = 1;
 20299              		.loc 1 56 0
 20300 007e 8DF84040 		strb	r4, [sp, #64]
  57:adc.c         ****     ADC_Init(ADC1, &ADC_InitStructure);
 20301              		.loc 1 57 0
 20302 0082 1C48     		ldr	r0, .L9+40
 20303 0084 0CA9     		add	r1, sp, #48
 20304 0086 1C4D     		ldr	r5, .L9+44
 20305 0088 A847     		blx	r5
  58:adc.c         **** 
  59:adc.c         ****     // настройка ADC1 regular channel14
  60:adc.c         ****     ADC_RegularChannelConfig(ADC1, ADC_Channel_14, 1, ADC_SampleTime_55Cycles5);
 20306              		.loc 1 60 0
 20307 008a 2246     		mov	r2, r4
 20308 008c 1948     		ldr	r0, .L9+40
 20309 008e 0E21     		movs	r1, #14
 20310 0090 0523     		movs	r3, #5
 20311 0092 1A4D     		ldr	r5, .L9+48
 20312 0094 A847     		blx	r5
  61:adc.c         **** 
  62:adc.c         ****     // разрешение ADC1 режима DMA
  63:adc.c         ****     ADC_DMACmd(ADC1, ENABLE);
 20313              		.loc 1 63 0
 20314 0096 2146     		mov	r1, r4
 20315 0098 194B     		ldr	r3, .L9+52
 20316 009a 1648     		ldr	r0, .L9+40
 20317 009c 9847     		blx	r3
  64:adc.c         **** 
  65:adc.c         ****     // разрешение ADC1
  66:adc.c         ****     ADC_Cmd(ADC1, ENABLE);
 20318              		.loc 1 66 0
 20319 009e 2146     		mov	r1, r4
 20320 00a0 1448     		ldr	r0, .L9+40
 20321 00a2 184A     		ldr	r2, .L9+56
 20322 00a4 9047     		blx	r2
  67:adc.c         **** 
  68:adc.c         ****     // сброс калиброви ADC1
  69:adc.c         ****     ADC_ResetCalibration(ADC1);
 20323              		.loc 1 69 0
 20324 00a6 1348     		ldr	r0, .L9+40
 20325 00a8 174B     		ldr	r3, .L9+60
 20326 00aa 9847     		blx	r3
  70:adc.c         ****     // ожидание сброса калибровки ADC1
  71:adc.c         ****     while(ADC_GetResetCalibrationStatus(ADC1));
 20327              		.loc 1 71 0
 20328 00ac 174C     		ldr	r4, .L9+64
 20329              	.L5:
 20330              		.loc 1 71 0 is_stmt 0 discriminator 1
 20331 00ae 1148     		ldr	r0, .L9+40
 20332 00b0 A047     		blx	r4
 20333 00b2 0028     		cmp	r0, #0
 20334 00b4 FBD1     		bne	.L5
  72:adc.c         **** 
  73:adc.c         ****     // запуск калибровки ADC1
  74:adc.c         ****     ADC_StartCalibration(ADC1);
 20335              		.loc 1 74 0 is_stmt 1
 20336 00b6 0F48     		ldr	r0, .L9+40
 20337 00b8 1549     		ldr	r1, .L9+68
 20338 00ba 8847     		blx	r1
  75:adc.c         ****     // ожидание завершения калибровки ADC1
  76:adc.c         ****     while(ADC_GetCalibrationStatus(ADC1));
 20339              		.loc 1 76 0
 20340 00bc 154C     		ldr	r4, .L9+72
 20341              	.L6:
 20342              		.loc 1 76 0 is_stmt 0 discriminator 1
 20343 00be 0D48     		ldr	r0, .L9+40
 20344 00c0 A047     		blx	r4
 20345 00c2 0028     		cmp	r0, #0
 20346 00c4 FBD1     		bne	.L6
  77:adc.c         **** 
  78:adc.c         ****   }
 20347              		.loc 1 78 0 is_stmt 1
 20348 00c6 13B0     		add	sp, sp, #76
 20349 00c8 30BD     		pop	{r4, r5, pc}
 20350              	.L10:
 20351 00ca 00BF     		.align	2
 20352              	.L9:
 20353 00cc 00100140 		.word	1073811456
 20354 00d0 00000000 		.word	GPIO_Init
 20355 00d4 00000000 		.word	RCC_AHBPeriphClockCmd
 20356 00d8 00000000 		.word	RCC_APB2PeriphClockCmd
 20357 00dc 00000000 		.word	DMA_DeInit
 20358 00e0 08000240 		.word	1073872904
 20359 00e4 4C240140 		.word	1073816652
 20360 00e8 00000000 		.word	ADCConvertedValue
 20361 00ec 00000000 		.word	DMA_Init
 20362 00f0 00000000 		.word	DMA_Cmd
 20363 00f4 00240140 		.word	1073816576
 20364 00f8 00000000 		.word	ADC_Init
 20365 00fc 00000000 		.word	ADC_RegularChannelConfig
 20366 0100 00000000 		.word	ADC_DMACmd
 20367 0104 00000000 		.word	ADC_Cmd
 20368 0108 00000000 		.word	ADC_ResetCalibration
 20369 010c 00000000 		.word	ADC_GetResetCalibrationStatus
 20370 0110 00000000 		.word	ADC_StartCalibration
 20371 0114 00000000 		.word	ADC_GetCalibrationStatus
 20372              		.cfi_endproc
 20373              	.LFE31:
 20375              		.section	.text.adc_start,"ax",%progbits
 20376              		.align	1
 20377              		.global	adc_start
 20378              		.thumb
 20379              		.thumb_func
 20381              	adc_start:
 20382              	.LFB32:
  79:adc.c         **** //----------------------------------------------------------------------
  80:adc.c         **** void adc_start()
  81:adc.c         ****   {
 20383              		.loc 1 81 0
 20384              		.cfi_startproc
 20385              		@ args = 0, pretend = 0, frame = 0
 20386              		@ frame_needed = 0, uses_anonymous_args = 0
 20387 0000 08B5     		push	{r3, lr}
 20388              	.LCFI2:
 20389              		.cfi_def_cfa_offset 8
 20390              		.cfi_offset 14, -4
 20391              		.cfi_offset 3, -8
  82:adc.c         ****     // запуск ADC1
  83:adc.c         ****     ADC_SoftwareStartConvCmd(ADC1, ENABLE);
 20392              		.loc 1 83 0
 20393 0002 0248     		ldr	r0, .L12
 20394 0004 0121     		movs	r1, #1
 20395 0006 024B     		ldr	r3, .L12+4
 20396 0008 9847     		blx	r3
  84:adc.c         ****   }
 20397              		.loc 1 84 0
 20398 000a 08BD     		pop	{r3, pc}
 20399              	.L13:
 20400              		.align	2
 20401              	.L12:
 20402 000c 00240140 		.word	1073816576
 20403 0010 00000000 		.word	ADC_SoftwareStartConvCmd
 20404              		.cfi_endproc
 20405              	.LFE32:
 20407              		.section	.text.adc_stop,"ax",%progbits
 20408              		.align	1
 20409              		.global	adc_stop
 20410              		.thumb
 20411              		.thumb_func
 20413              	adc_stop:
 20414              	.LFB33:
  85:adc.c         **** //----------------------------------------------------------------------
  86:adc.c         **** void adc_stop()
  87:adc.c         ****   {
 20415              		.loc 1 87 0
 20416              		.cfi_startproc
 20417              		@ args = 0, pretend = 0, frame = 0
 20418              		@ frame_needed = 0, uses_anonymous_args = 0
 20419 0000 08B5     		push	{r3, lr}
 20420              	.LCFI3:
 20421              		.cfi_def_cfa_offset 8
 20422              		.cfi_offset 14, -4
 20423              		.cfi_offset 3, -8
  88:adc.c         ****     // останов ADC1
  89:adc.c         ****     ADC_Cmd(ADC1, DISABLE);
 20424              		.loc 1 89 0
 20425 0002 0248     		ldr	r0, .L15
 20426 0004 0021     		movs	r1, #0
 20427 0006 024B     		ldr	r3, .L15+4
 20428 0008 9847     		blx	r3
  90:adc.c         ****   }
 20429              		.loc 1 90 0
 20430 000a 08BD     		pop	{r3, pc}
 20431              	.L16:
 20432              		.align	2
 20433              	.L15:
 20434 000c 00240140 		.word	1073816576
 20435 0010 00000000 		.word	ADC_Cmd
 20436              		.cfi_endproc
 20437              	.LFE33:
 20439              		.global	__aeabi_i2d
 20440              		.global	__aeabi_dmul
 20441              		.global	__aeabi_d2f
 20442              		.global	__aeabi_f2d
 20443              		.global	__aeabi_dsub
 20444              		.global	__aeabi_dcmplt
 20445              		.section	.text.adc_test,"ax",%progbits
 20446              		.align	1
 20447              		.global	adc_test
 20448              		.thumb
 20449              		.thumb_func
 20451              	adc_test:
 20452              	.LFB34:
  91:adc.c         **** 
  92:adc.c         **** TestStatus adc_test()
  93:adc.c         ****   {
 20453              		.loc 1 93 0
 20454              		.cfi_startproc
 20455              		@ args = 0, pretend = 0, frame = 0
 20456              		@ frame_needed = 0, uses_anonymous_args = 0
 20457 0000 38B5     		push	{r3, r4, r5, lr}
 20458              	.LCFI4:
 20459              		.cfi_def_cfa_offset 16
 20460              		.cfi_offset 14, -4
 20461              		.cfi_offset 5, -8
 20462              		.cfi_offset 4, -12
 20463              		.cfi_offset 3, -16
  94:adc.c         **** 	memset( ADCConvertedValue , 0 , 256 * 2 ) ;
 20464              		.loc 1 94 0
 20465 0002 0021     		movs	r1, #0
 20466 0004 4FF40072 		mov	r2, #512
 20467 0008 234C     		ldr	r4, .L25+24
 20468 000a 2448     		ldr	r0, .L25+28
 20469 000c A047     		blx	r4
  95:adc.c         ****     adc_init();
 20470              		.loc 1 95 0
 20471 000e 2448     		ldr	r0, .L25+32
 20472 0010 8047     		blx	r0
  96:adc.c         ****     adc_start();
 20473              		.loc 1 96 0
 20474 0012 244B     		ldr	r3, .L25+36
 20475 0014 9847     		blx	r3
 20476              	.LVL0:
 20477 0016 244C     		ldr	r4, .L25+40
 20478 0018 00E0     		b	.L18
 20479              	.LVL1:
 20480              	.L19:
 20481              	.LBB5:
 20482              	.LBB6:
   1:./../include/appdefs.h **** #ifndef __APPDEFS_H__
   2:./../include/appdefs.h **** #define __APPDEFS_H__
   3:./../include/appdefs.h **** 
   4:./../include/appdefs.h **** #include <stdint.h>
   5:./../include/appdefs.h **** #include <string.h>
   6:./../include/appdefs.h **** 
   7:./../include/appdefs.h **** #define _BV(val) (1<<val)
   8:./../include/appdefs.h **** 
   9:./../include/appdefs.h **** typedef enum {FAILED = 0, PASSED = !FAILED} TestStatus;
  10:./../include/appdefs.h **** 
  11:./../include/appdefs.h **** typedef enum
  12:./../include/appdefs.h **** {
  13:./../include/appdefs.h ****   stsSocketEmpty       ,
  14:./../include/appdefs.h ****   stsCardInSocket      ,
  15:./../include/appdefs.h ****   stsSDItitialize      ,
  16:./../include/appdefs.h ****   stsCardInfo          ,
  17:./../include/appdefs.h ****   stsSDSelectDeselect  ,
  18:./../include/appdefs.h ****   stsSDEnableWideBusOperation  ,
  19:./../include/appdefs.h ****   stsSDSetDeviceMode   ,
  20:./../include/appdefs.h ****   stsFaFsMount         ,
  21:./../include/appdefs.h ****   stsFatFsOpen         ,
  22:./../include/appdefs.h ****   stsFatFsWrite        ,
  23:./../include/appdefs.h ****   stsFatFsClose
  24:./../include/appdefs.h **** 
  25:./../include/appdefs.h **** } TSdioTestStage ;
  26:./../include/appdefs.h **** 
  27:./../include/appdefs.h **** typedef enum
  28:./../include/appdefs.h **** { vridMemoryAccess = 0  ,  // чтение/запись данных по физическому адресу
  29:./../include/appdefs.h ****   vridLibVersion        ,  // чтение версий компонент
  30:./../include/appdefs.h ****   //-------------------------------------------------------
  31:./../include/appdefs.h ****   vridGetTestSDIO       ,  // чтение результата тестирования SDIO
  32:./../include/appdefs.h ****   vridGetTestADC        ,  // чтение результата тестирования ADC
  33:./../include/appdefs.h ****   vridGetTestCAN        ,  // чтение результата тестирования CAN
  34:./../include/appdefs.h ****   vridGetCpuClock        ,
  35:./../include/appdefs.h ****   //-------------------------------------------------------
  36:./../include/appdefs.h ****   vridRequestCount
  37:./../include/appdefs.h **** } VendorRequestId ;
  38:./../include/appdefs.h **** 
  39:./../include/appdefs.h **** #ifdef __arm__
  40:./../include/appdefs.h **** 
  41:./../include/appdefs.h ****   #include "platform_config.h"
  42:./../include/appdefs.h ****   #include "stm32f10x_conf.h"
  43:./../include/appdefs.h ****   #include "stm32f10x.h"
  44:./../include/appdefs.h **** 
  45:./../include/appdefs.h ****   #define  NOP()   asm volatile ("nop")
  46:./../include/appdefs.h ****   #define  NULL    (void*)0
  47:./../include/appdefs.h ****   #define __RAM__  __attribute__ ((section(".fast")))
  48:./../include/appdefs.h **** 
  49:./../include/appdefs.h ****   inline void Delay(uint32_t msec)
  50:./../include/appdefs.h ****   {
  51:./../include/appdefs.h ****     uint32_t tmp = 7000 * msec  ;
  52:./../include/appdefs.h ****     while( tmp-- )
  53:./../include/appdefs.h ****      {
  54:./../include/appdefs.h ****        NOP();
 20483              		.loc 17 54 0
 20484              	@ 54 "./../include/appdefs.h" 1
 20485 001a 00BF     		nop
 20486              	@ 0 "" 2
 20487              		.thumb
 20488              	.L18:
  52:./../include/appdefs.h ****     while( tmp-- )
 20489              		.loc 17 52 0
 20490 001c 013C     		subs	r4, r4, #1
 20491 001e FCD1     		bne	.L19
 20492              	.LBE6:
 20493              	.LBE5:
  97:adc.c         ****     Delay(100) ;
  98:adc.c         ****     adc_stop();
 20494              		.loc 1 98 0
 20495 0020 2249     		ldr	r1, .L25+44
 20496 0022 8847     		blx	r1
 20497              	.LVL2:
 20498              	.LBB7:
  99:adc.c         **** 
 100:adc.c         ****     // анализ полученных данных
 101:adc.c         ****     uint32_t val = 0 ;
 102:adc.c         ****     for (uint32_t sample = 0 ; sample < 256 ; sample++)
 103:adc.c         ****       val += ADCConvertedValue[sample] ;
 20499              		.loc 1 103 0
 20500 0024 1D4B     		ldr	r3, .L25+28
 20501              	.LBE7:
 101:adc.c         ****     uint32_t val = 0 ;
 20502              		.loc 1 101 0
 20503 0026 2046     		mov	r0, r4
 20504              	.LVL3:
 20505              	.L20:
 20506              	.LBB8:
 20507              		.loc 1 103 0 discriminator 2
 20508 0028 E25A     		ldrh	r2, [r4, r3]
 20509 002a 0234     		adds	r4, r4, #2
 102:adc.c         ****     for (uint32_t sample = 0 ; sample < 256 ; sample++)
 20510              		.loc 1 102 0 discriminator 2
 20511 002c B4F5007F 		cmp	r4, #512
 20512              		.loc 1 103 0 discriminator 2
 20513 0030 1044     		add	r0, r0, r2
 20514              	.LVL4:
 102:adc.c         ****     for (uint32_t sample = 0 ; sample < 256 ; sample++)
 20515              		.loc 1 102 0 discriminator 2
 20516 0032 F9D1     		bne	.L20
 20517              	.LBE8:
 104:adc.c         ****     ADCConvertedValue[0] = val >> 8 ;
 20518              		.loc 1 104 0
 20519 0034 194B     		ldr	r3, .L25+28
 20520 0036 C0F30F20 		ubfx	r0, r0, #8, #16
 20521              	.LVL5:
 20522 003a 1880     		strh	r0, [r3, #0]	@ movhi
 105:adc.c         **** 
 106:adc.c         ****     adc_test_result.voltage =  ADCConvertedValue[0] * (3.3 / 4096.0 ) ;
 20523              		.loc 1 106 0
 20524 003c 1C4B     		ldr	r3, .L25+48
 20525 003e 9847     		blx	r3
 20526 0040 0FA3     		adr	r3, .L25
 20527 0042 D3E90023 		ldrd	r2, [r3]
 20528 0046 1B4C     		ldr	r4, .L25+52
 20529 0048 A047     		blx	r4
 20530 004a 1B4B     		ldr	r3, .L25+56
 20531 004c 9847     		blx	r3
 20532 004e 1B4C     		ldr	r4, .L25+60
 107:adc.c         **** 
 108:adc.c         ****     if ( fabs(adc_test_result.voltage - RESISTIVE_DIVADER_RATIO * 3.3) < 0.2 )
 20533              		.loc 1 108 0
 20534 0050 1B4B     		ldr	r3, .L25+64
 106:adc.c         ****     adc_test_result.voltage =  ADCConvertedValue[0] * (3.3 / 4096.0 ) ;
 20535              		.loc 1 106 0
 20536 0052 6060     		str	r0, [r4, #4]	@ float
 20537              		.loc 1 108 0
 20538 0054 9847     		blx	r3
 20539 0056 0CA3     		adr	r3, .L25+8
 20540 0058 D3E90023 		ldrd	r2, [r3]
 20541 005c 194D     		ldr	r5, .L25+68
 20542 005e A847     		blx	r5
 20543 0060 21F00043 		bic	r3, r1, #-2147483648
 20544 0064 1946     		mov	r1, r3
 20545 0066 184D     		ldr	r5, .L25+72
 20546 0068 09A3     		adr	r3, .L25+16
 20547 006a D3E90023 		ldrd	r2, [r3]
 20548 006e A847     		blx	r5
 20549 0070 08B1     		cbz	r0, .L21
 109:adc.c         ****     {
 110:adc.c         ****     	adc_test_result.result = PASSED ;
 20550              		.loc 1 110 0
 20551 0072 0123     		movs	r3, #1
 20552 0074 2370     		strb	r3, [r4, #0]
 20553              	.L21:
 20554 0076 2078     		ldrb	r0, [r4, #0]	@ zero_extendqisi2
 111:adc.c         ****     }
 112:adc.c         ****     return adc_test_result.result  ;
 113:adc.c         ****   }
 20555              		.loc 1 113 0
 20556 0078 38BD     		pop	{r3, r4, r5, pc}
 20557              	.L26:
 20558 007a 00BFAFF3 		.align	3
 20558      0080
 20559              	.L25:
 20560 0080 66666666 		.word	1717986918
 20561 0084 66664A3F 		.word	1061840486
 20562 0088 06819543 		.word	1133871366
 20563 008c 8B6CF13F 		.word	1072786571
 20564 0090 9A999999 		.word	-1717986918
 20565 0094 9999C93F 		.word	1070176665
 20566 0098 00000000 		.word	memset
 20567 009c 00000000 		.word	ADCConvertedValue
 20568 00a0 00000000 		.word	adc_init
 20569 00a4 00000000 		.word	adc_start
 20570 00a8 61AE0A00 		.word	700001
 20571 00ac 00000000 		.word	adc_stop
 20572 00b0 00000000 		.word	__aeabi_i2d
 20573 00b4 00000000 		.word	__aeabi_dmul
 20574 00b8 00000000 		.word	__aeabi_d2f
 20575 00bc 00000000 		.word	.LANCHOR0
 20576 00c0 00000000 		.word	__aeabi_f2d
 20577 00c4 00000000 		.word	__aeabi_dsub
 20578 00c8 00000000 		.word	__aeabi_dcmplt
 20579              		.cfi_endproc
 20580              	.LFE34:
 20582              		.comm	ADCConvertedValue,512,2
 20583              		.global	adc_test_result
 20584 00cc AFF30080 		.section	.bss.adc_test_result,"aw",%nobits
 20585              		.align	2
 20586              		.set	.LANCHOR0,. + 0
 20589              	adc_test_result:
 20590 0000 00000000 		.space	8
 20590      00000000 
 20591              		.text
 20592              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 adc.c
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20169  .text.adc_get_test_result:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20174  .text.adc_get_test_result:00000000 adc_get_test_result
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20187  .text.adc_get_test_result:00000004 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20192  .text.adc_init:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20197  .text.adc_init:00000000 adc_init
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20353  .text.adc_init:000000cc $d
                            *COM*:00000200 ADCConvertedValue
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20376  .text.adc_start:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20381  .text.adc_start:00000000 adc_start
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20402  .text.adc_start:0000000c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20408  .text.adc_stop:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20413  .text.adc_stop:00000000 adc_stop
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20434  .text.adc_stop:0000000c $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20446  .text.adc_test:00000000 $t
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20451  .text.adc_test:00000000 adc_test
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20560  .text.adc_test:00000080 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20589  .bss.adc_test_result:00000000 adc_test_result
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20585  .bss.adc_test_result:00000000 $d
                     .debug_frame:00000010 $d
C:\DOCUME~1\Admin\LOCALS~1\Temp\ccvs1l3L.s:20584  .text.adc_test:000000cc $t

UNDEFINED SYMBOLS
GPIO_Init
RCC_AHBPeriphClockCmd
RCC_APB2PeriphClockCmd
DMA_DeInit
DMA_Init
DMA_Cmd
ADC_Init
ADC_RegularChannelConfig
ADC_DMACmd
ADC_Cmd
ADC_ResetCalibration
ADC_GetResetCalibrationStatus
ADC_StartCalibration
ADC_GetCalibrationStatus
ADC_SoftwareStartConvCmd
__aeabi_i2d
__aeabi_dmul
__aeabi_d2f
__aeabi_f2d
__aeabi_dsub
__aeabi_dcmplt
memset
